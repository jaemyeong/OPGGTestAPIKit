{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/adapter\/init(_:)","title":"init(AdaptHandler)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/adapter\/adapt(_:for:completion:)","title":"func adapt(URLRequest, for: Session, completion: (Result<URLRequest, Error>) -> Void)","type":"method"},{"path":"\/documentation\/alamofire\/adapter\/adapt(_:using:completion:)","title":"func adapt(URLRequest, using: RequestAdapterState, completion: (Result<URLRequest, Error>) -> Void)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/adapter\/adapter(using:)","title":"static func adapter(using: AdaptHandler) -> Adapter","type":"method"}],"path":"\/documentation\/alamofire\/adapter\/requestadapter-implementations","title":"RequestAdapter Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/adapter\/retry(_:for:dueto:completion:)","title":"func retry(Request, for: Session, dueTo: Error, completion: (RetryResult) -> Void)","type":"method"}],"path":"\/documentation\/alamofire\/adapter\/requestretrier-implementations","title":"RequestRetrier Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/adapter","title":"Adapter","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didcanceltask:)","title":"func request(Request, didCancelTask: URLSessionTask)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didcompletetask:with:)","title":"func request(Request, didCompleteTask: URLSessionTask, with: AFError?)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didresumetask:)","title":"func request(Request, didResumeTask: URLSessionTask)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didsuspendtask:)","title":"func request(Request, didSuspendTask: URLSessionTask)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/requestdidcancel(_:)","title":"func requestDidCancel(Request)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/requestdidfinish(_:)","title":"func requestDidFinish(Request)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/requestdidresume(_:)","title":"func requestDidResume(Request)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/requestdidsuspend(_:)","title":"func requestDidSuspend(Request)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/queue","title":"var queue: DispatchQueue","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didadaptinitialrequest:to:)","title":"func request(Request, didAdaptInitialRequest: URLRequest, to: URLRequest)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didcreatedestinationurl:)","title":"func request(DownloadRequest, didCreateDestinationURL: URL)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didcreateinitialurlrequest:)","title":"func request(Request, didCreateInitialURLRequest: URLRequest)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didcreatetask:)","title":"func request(Request, didCreateTask: URLSessionTask)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didcreateurlrequest:)","title":"func request(Request, didCreateURLRequest: URLRequest)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didcreateuploadable:)","title":"func request(UploadRequest, didCreateUploadable: UploadRequest.Uploadable)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didfailtask:earlywitherror:)","title":"func request(Request, didFailTask: URLSessionTask, earlyWithError: AFError)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didfailtoadapturlrequest:witherror:)","title":"func request(Request, didFailToAdaptURLRequest: URLRequest, withError: AFError)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didfailtocreateurlrequestwitherror:)","title":"func request(Request, didFailToCreateURLRequestWithError: AFError)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didfailtocreateuploadablewitherror:)","title":"func request(UploadRequest, didFailToCreateUploadableWithError: AFError)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didfinishdownloadingusing:with:)","title":"func request(DownloadRequest, didFinishDownloadingUsing: URLSessionTask, with: Result<URL, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didgathermetrics:)","title":"func request(Request, didGatherMetrics: URLSessionTaskMetrics)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didparseresponse:)-312w4","title":"func request(DataRequest, didParseResponse: DataResponse<Data?, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didparseresponse:)-4vxgf","title":"func request(DownloadRequest, didParseResponse: DownloadResponse<URL?, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didparseresponse:)-7xwkv","title":"func request<Value>(DataRequest, didParseResponse: DataResponse<Value, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didparseresponse:)-f4td","title":"func request<Value>(DownloadRequest, didParseResponse: DownloadResponse<Value, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didparsestream:)","title":"func request<Value>(DataStreamRequest, didParseStream: Result<Value, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didprovideinputstream:)","title":"func request(UploadRequest, didProvideInputStream: InputStream)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didvalidaterequest:response:data:withresult:)","title":"func request(DataRequest, didValidateRequest: URLRequest?, response: HTTPURLResponse, data: Data?, withResult: Request.ValidationResult)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didvalidaterequest:response:fileurl:withresult:)","title":"func request(DownloadRequest, didValidateRequest: URLRequest?, response: HTTPURLResponse, fileURL: URL?, withResult: Request.ValidationResult)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/request(_:didvalidaterequest:response:withresult:)","title":"func request(DataStreamRequest, didValidateRequest: URLRequest?, response: HTTPURLResponse, withResult: Request.ValidationResult)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/requestisretrying(_:)","title":"func requestIsRetrying(Request)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/urlsession(_:datatask:didreceive:)","title":"func urlSession(URLSession, dataTask: URLSessionDataTask, didReceive: Data)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/urlsession(_:datatask:willcacheresponse:)","title":"func urlSession(URLSession, dataTask: URLSessionDataTask, willCacheResponse: CachedURLResponse)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/urlsession(_:didbecomeinvalidwitherror:)","title":"func urlSession(URLSession, didBecomeInvalidWithError: Error?)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/urlsession(_:downloadtask:didfinishdownloadingto:)","title":"func urlSession(URLSession, downloadTask: URLSessionDownloadTask, didFinishDownloadingTo: URL)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/urlsession(_:downloadtask:didresumeatoffset:expectedtotalbytes:)","title":"func urlSession(URLSession, downloadTask: URLSessionDownloadTask, didResumeAtOffset: Int64, expectedTotalBytes: Int64)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/urlsession(_:downloadtask:didwritedata:totalbyteswritten:totalbytesexpectedtowrite:)","title":"func urlSession(URLSession, downloadTask: URLSessionDownloadTask, didWriteData: Int64, totalBytesWritten: Int64, totalBytesExpectedToWrite: Int64)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/urlsession(_:task:didcompletewitherror:)","title":"func urlSession(URLSession, task: URLSessionTask, didCompleteWithError: Error?)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/urlsession(_:task:didfinishcollecting:)","title":"func urlSession(URLSession, task: URLSessionTask, didFinishCollecting: URLSessionTaskMetrics)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/urlsession(_:task:didreceive:)","title":"func urlSession(URLSession, task: URLSessionTask, didReceive: URLAuthenticationChallenge)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/urlsession(_:task:didsendbodydata:totalbytessent:totalbytesexpectedtosend:)","title":"func urlSession(URLSession, task: URLSessionTask, didSendBodyData: Int64, totalBytesSent: Int64, totalBytesExpectedToSend: Int64)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/urlsession(_:task:willperformhttpredirection:newrequest:)","title":"func urlSession(URLSession, task: URLSessionTask, willPerformHTTPRedirection: HTTPURLResponse, newRequest: URLRequest)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/urlsession(_:taskiswaitingforconnectivity:)","title":"func urlSession(URLSession, taskIsWaitingForConnectivity: URLSessionTask)","type":"method"},{"path":"\/documentation\/alamofire\/alamofirenotifications\/urlsession(_:taskneedsnewbodystream:)","title":"func urlSession(URLSession, taskNeedsNewBodyStream: URLSessionTask)","type":"method"}],"path":"\/documentation\/alamofire\/alamofirenotifications\/eventmonitor-implementations","title":"EventMonitor Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/alamofirenotifications","title":"AlamofireNotifications","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/authenticationinterceptor\/refreshwindow\/init(interval:maximumattempts:)","title":"init(interval: TimeInterval, maximumAttempts: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/authenticationinterceptor\/refreshwindow\/interval","title":"let interval: TimeInterval","type":"property"},{"path":"\/documentation\/alamofire\/authenticationinterceptor\/refreshwindow\/maximumattempts","title":"let maximumAttempts: Int","type":"property"}],"path":"\/documentation\/alamofire\/authenticationinterceptor\/refreshwindow","title":"AuthenticationInterceptor.RefreshWindow","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/authenticationinterceptor\/init(authenticator:credential:refreshwindow:)","title":"init(authenticator: AuthenticatorType, credential: Credential?, refreshWindow: RefreshWindow?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/authenticationinterceptor\/credential-swift.property","title":"var credential: Credential?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/authenticationinterceptor\/adapt(_:for:completion:)","title":"func adapt(URLRequest, for: Session, completion: (Result<URLRequest, Error>) -> Void)","type":"method"},{"path":"\/documentation\/alamofire\/authenticationinterceptor\/retry(_:for:dueto:completion:)","title":"func retry(Request, for: Session, dueTo: Error, completion: (RetryResult) -> Void)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/authenticationinterceptor\/credential-swift.typealias","title":"AuthenticationInterceptor.Credential","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/authenticationinterceptor\/adapt(_:using:completion:)","title":"func adapt(URLRequest, using: RequestAdapterState, completion: (Result<URLRequest, Error>) -> Void)","type":"method"}],"path":"\/documentation\/alamofire\/authenticationinterceptor\/requestadapter-implementations","title":"RequestAdapter Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/authenticationinterceptor","title":"AuthenticationInterceptor","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/init(queue:)","title":"init(queue: DispatchQueue)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/datataskdidreceivedata","title":"var dataTaskDidReceiveData: ((URLSession, URLSessionDataTask, Data) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/datataskwillcacheresponse","title":"var dataTaskWillCacheResponse: ((URLSession, URLSessionDataTask, CachedURLResponse) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/downloadtaskdidfinishdownloadingtourl","title":"var downloadTaskDidFinishDownloadingToURL: ((URLSession, URLSessionDownloadTask, URL) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/downloadtaskdidresumeatoffset","title":"var downloadTaskDidResumeAtOffset: ((URLSession, URLSessionDownloadTask, Int64, Int64) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/downloadtaskdidwritedata","title":"var downloadTaskDidWriteData: ((URLSession, URLSessionDownloadTask, Int64, Int64, Int64) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/queue-8lqj8","title":"let queue: DispatchQueue","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidadaptinitialrequesttoadaptedrequest","title":"var requestDidAdaptInitialRequestToAdaptedRequest: ((Request, URLRequest, URLRequest) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidcancel","title":"var requestDidCancel: ((Request) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidcanceltask","title":"var requestDidCancelTask: ((Request, URLSessionTask) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidcompletetaskwitherror","title":"var requestDidCompleteTaskWithError: ((Request, URLSessionTask, AFError?) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidcreatedestinationurl","title":"var requestDidCreateDestinationURL: ((DownloadRequest, URL) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidcreateinitialurlrequest","title":"var requestDidCreateInitialURLRequest: ((Request, URLRequest) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidcreatetask","title":"var requestDidCreateTask: ((Request, URLSessionTask) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidcreateurlrequest","title":"var requestDidCreateURLRequest: ((Request, URLRequest) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidcreateuploadable","title":"var requestDidCreateUploadable: ((UploadRequest, UploadRequest.Uploadable) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidfailtaskearlywitherror","title":"var requestDidFailTaskEarlyWithError: ((Request, URLSessionTask, AFError) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidfailtoadapturlrequestwitherror","title":"var requestDidFailToAdaptURLRequestWithError: ((Request, URLRequest, AFError) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidfailtocreateurlrequestwitherror","title":"var requestDidFailToCreateURLRequestWithError: ((Request, AFError) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidfailtocreateuploadablewitherror","title":"var requestDidFailToCreateUploadableWithError: ((UploadRequest, AFError) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidfinish","title":"var requestDidFinish: ((Request) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidfinishdownloadingusingtaskwithresult","title":"var requestDidFinishDownloadingUsingTaskWithResult: ((DownloadRequest, URLSessionTask, Result<URL, AFError>) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidgathermetrics","title":"var requestDidGatherMetrics: ((Request, URLSessionTaskMetrics) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidparsedownloadresponse","title":"var requestDidParseDownloadResponse: ((DownloadRequest, DownloadResponse<URL?, AFError>) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidparseresponse","title":"var requestDidParseResponse: ((DataRequest, DataResponse<Data?, AFError>) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidprovideinputstream","title":"var requestDidProvideInputStream: ((UploadRequest, InputStream) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidresume","title":"var requestDidResume: ((Request) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidresumetask","title":"var requestDidResumeTask: ((Request, URLSessionTask) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidsuspend","title":"var requestDidSuspend: ((Request) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidsuspendtask","title":"var requestDidSuspendTask: ((Request, URLSessionTask) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidvalidaterequestresponsedatawithresult","title":"var requestDidValidateRequestResponseDataWithResult: ((DataRequest, URLRequest?, HTTPURLResponse, Data?, Request.ValidationResult) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidvalidaterequestresponsefileurlwithresult","title":"var requestDidValidateRequestResponseFileURLWithResult: ((DownloadRequest, URLRequest?, HTTPURLResponse, URL?, Request.ValidationResult) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidvalidaterequestresponsewithresult","title":"var requestDidValidateRequestResponseWithResult: ((DataStreamRequest, URLRequest?, HTTPURLResponse, Request.ValidationResult) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestisretrying","title":"var requestIsRetrying: ((Request) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/sessiondidbecomeinvalidwitherror","title":"var sessionDidBecomeInvalidWithError: ((URLSession, Error?) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/taskdidcomplete","title":"var taskDidComplete: ((URLSession, URLSessionTask, Error?) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/taskdidfinishcollectingmetrics","title":"var taskDidFinishCollectingMetrics: ((URLSession, URLSessionTask, URLSessionTaskMetrics) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/taskdidreceivechallenge","title":"var taskDidReceiveChallenge: ((URLSession, URLSessionTask, URLAuthenticationChallenge) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/taskdidsendbodydata","title":"var taskDidSendBodyData: ((URLSession, URLSessionTask, Int64, Int64, Int64) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/taskiswaitingforconnectivity","title":"var taskIsWaitingForConnectivity: ((URLSession, URLSessionTask) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/taskneednewbodystream","title":"var taskNeedNewBodyStream: ((URLSession, URLSessionTask) -> Void)?","type":"property"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/taskwillperformhttpredirection","title":"var taskWillPerformHTTPRedirection: ((URLSession, URLSessionTask, HTTPURLResponse, URLRequest) -> Void)?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didadaptinitialrequest:to:)","title":"func request(Request, didAdaptInitialRequest: URLRequest, to: URLRequest)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didcanceltask:)","title":"func request(Request, didCancelTask: URLSessionTask)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didcompletetask:with:)","title":"func request(Request, didCompleteTask: URLSessionTask, with: AFError?)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didcreatedestinationurl:)","title":"func request(DownloadRequest, didCreateDestinationURL: URL)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didcreateinitialurlrequest:)","title":"func request(Request, didCreateInitialURLRequest: URLRequest)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didcreatetask:)","title":"func request(Request, didCreateTask: URLSessionTask)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didcreateurlrequest:)","title":"func request(Request, didCreateURLRequest: URLRequest)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didcreateuploadable:)","title":"func request(UploadRequest, didCreateUploadable: UploadRequest.Uploadable)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didfailtask:earlywitherror:)","title":"func request(Request, didFailTask: URLSessionTask, earlyWithError: AFError)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didfailtoadapturlrequest:witherror:)","title":"func request(Request, didFailToAdaptURLRequest: URLRequest, withError: AFError)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didfailtocreateurlrequestwitherror:)","title":"func request(Request, didFailToCreateURLRequestWithError: AFError)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didfailtocreateuploadablewitherror:)","title":"func request(UploadRequest, didFailToCreateUploadableWithError: AFError)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didfinishdownloadingusing:with:)","title":"func request(DownloadRequest, didFinishDownloadingUsing: URLSessionTask, with: Result<URL, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didgathermetrics:)","title":"func request(Request, didGatherMetrics: URLSessionTaskMetrics)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didparseresponse:)-2kx93","title":"func request(DataRequest, didParseResponse: DataResponse<Data?, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didparseresponse:)-7mcfl","title":"func request(DownloadRequest, didParseResponse: DownloadResponse<URL?, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didprovideinputstream:)","title":"func request(UploadRequest, didProvideInputStream: InputStream)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didresumetask:)","title":"func request(Request, didResumeTask: URLSessionTask)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didsuspendtask:)","title":"func request(Request, didSuspendTask: URLSessionTask)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didvalidaterequest:response:data:withresult:)","title":"func request(DataRequest, didValidateRequest: URLRequest?, response: HTTPURLResponse, data: Data?, withResult: Request.ValidationResult)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didvalidaterequest:response:fileurl:withresult:)","title":"func request(DownloadRequest, didValidateRequest: URLRequest?, response: HTTPURLResponse, fileURL: URL?, withResult: Request.ValidationResult)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didvalidaterequest:response:withresult:)","title":"func request(DataStreamRequest, didValidateRequest: URLRequest?, response: HTTPURLResponse, withResult: Request.ValidationResult)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidcancel(_:)","title":"func requestDidCancel(Request)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidfinish(_:)","title":"func requestDidFinish(Request)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidresume(_:)","title":"func requestDidResume(Request)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestdidsuspend(_:)","title":"func requestDidSuspend(Request)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/requestisretrying(_:)","title":"func requestIsRetrying(Request)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/urlsession(_:datatask:didreceive:)","title":"func urlSession(URLSession, dataTask: URLSessionDataTask, didReceive: Data)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/urlsession(_:datatask:willcacheresponse:)","title":"func urlSession(URLSession, dataTask: URLSessionDataTask, willCacheResponse: CachedURLResponse)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/urlsession(_:didbecomeinvalidwitherror:)","title":"func urlSession(URLSession, didBecomeInvalidWithError: Error?)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/urlsession(_:downloadtask:didfinishdownloadingto:)","title":"func urlSession(URLSession, downloadTask: URLSessionDownloadTask, didFinishDownloadingTo: URL)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/urlsession(_:downloadtask:didresumeatoffset:expectedtotalbytes:)","title":"func urlSession(URLSession, downloadTask: URLSessionDownloadTask, didResumeAtOffset: Int64, expectedTotalBytes: Int64)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/urlsession(_:downloadtask:didwritedata:totalbyteswritten:totalbytesexpectedtowrite:)","title":"func urlSession(URLSession, downloadTask: URLSessionDownloadTask, didWriteData: Int64, totalBytesWritten: Int64, totalBytesExpectedToWrite: Int64)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/urlsession(_:task:didcompletewitherror:)","title":"func urlSession(URLSession, task: URLSessionTask, didCompleteWithError: Error?)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/urlsession(_:task:didfinishcollecting:)","title":"func urlSession(URLSession, task: URLSessionTask, didFinishCollecting: URLSessionTaskMetrics)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/urlsession(_:task:didreceive:)","title":"func urlSession(URLSession, task: URLSessionTask, didReceive: URLAuthenticationChallenge)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/urlsession(_:task:didsendbodydata:totalbytessent:totalbytesexpectedtosend:)","title":"func urlSession(URLSession, task: URLSessionTask, didSendBodyData: Int64, totalBytesSent: Int64, totalBytesExpectedToSend: Int64)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/urlsession(_:task:willperformhttpredirection:newrequest:)","title":"func urlSession(URLSession, task: URLSessionTask, willPerformHTTPRedirection: HTTPURLResponse, newRequest: URLRequest)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/urlsession(_:taskiswaitingforconnectivity:)","title":"func urlSession(URLSession, taskIsWaitingForConnectivity: URLSessionTask)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/urlsession(_:taskneedsnewbodystream:)","title":"func urlSession(URLSession, taskNeedsNewBodyStream: URLSessionTask)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/queue-65xa0","title":"var queue: DispatchQueue","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didparseresponse:)-2pin","title":"func request<Value>(DataRequest, didParseResponse: DataResponse<Value, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didparseresponse:)-63xej","title":"func request(DownloadRequest, didParseResponse: DownloadResponse<URL?, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didparseresponse:)-6ilrb","title":"func request<Value>(DownloadRequest, didParseResponse: DownloadResponse<Value, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didparseresponse:)-9pktd","title":"func request(DataRequest, didParseResponse: DataResponse<Data?, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/closureeventmonitor\/request(_:didparsestream:)","title":"func request<Value>(DataStreamRequest, didParseStream: Result<Value, AFError>)","type":"method"}],"path":"\/documentation\/alamofire\/closureeventmonitor\/eventmonitor-implementations","title":"EventMonitor Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/closureeventmonitor","title":"ClosureEventMonitor","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/queue-8ilfn","title":"let queue: DispatchQueue","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didadaptinitialrequest:to:)","title":"func request(Request, didAdaptInitialRequest: URLRequest, to: URLRequest)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didcanceltask:)","title":"func request(Request, didCancelTask: URLSessionTask)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didcompletetask:with:)","title":"func request(Request, didCompleteTask: URLSessionTask, with: AFError?)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didcreatedestinationurl:)","title":"func request(DownloadRequest, didCreateDestinationURL: URL)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didcreateinitialurlrequest:)","title":"func request(Request, didCreateInitialURLRequest: URLRequest)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didcreatetask:)","title":"func request(Request, didCreateTask: URLSessionTask)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didcreateurlrequest:)","title":"func request(Request, didCreateURLRequest: URLRequest)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didcreateuploadable:)","title":"func request(UploadRequest, didCreateUploadable: UploadRequest.Uploadable)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didfailtask:earlywitherror:)","title":"func request(Request, didFailTask: URLSessionTask, earlyWithError: AFError)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didfailtoadapturlrequest:witherror:)","title":"func request(Request, didFailToAdaptURLRequest: URLRequest, withError: AFError)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didfailtocreateurlrequestwitherror:)","title":"func request(Request, didFailToCreateURLRequestWithError: AFError)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didfailtocreateuploadablewitherror:)","title":"func request(UploadRequest, didFailToCreateUploadableWithError: AFError)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didfinishdownloadingusing:with:)","title":"func request(DownloadRequest, didFinishDownloadingUsing: URLSessionTask, with: Result<URL, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didgathermetrics:)","title":"func request(Request, didGatherMetrics: URLSessionTaskMetrics)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didparseresponse:)-111sg","title":"func request<Value>(DownloadRequest, didParseResponse: DownloadResponse<Value, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didparseresponse:)-2xryu","title":"func request(DataRequest, didParseResponse: DataResponse<Data?, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didparseresponse:)-7crh2","title":"func request<Value>(DataRequest, didParseResponse: DataResponse<Value, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didparseresponse:)-83568","title":"func request(DownloadRequest, didParseResponse: DownloadResponse<URL?, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didparsestream:)-7o4dr","title":"func request<Value>(DataStreamRequest, didParseStream: Result<Value, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didprovideinputstream:)","title":"func request(UploadRequest, didProvideInputStream: InputStream)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didresumetask:)","title":"func request(Request, didResumeTask: URLSessionTask)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didsuspendtask:)","title":"func request(Request, didSuspendTask: URLSessionTask)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didvalidaterequest:response:data:withresult:)","title":"func request(DataRequest, didValidateRequest: URLRequest?, response: HTTPURLResponse, data: Data?, withResult: Request.ValidationResult)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didvalidaterequest:response:fileurl:withresult:)","title":"func request(DownloadRequest, didValidateRequest: URLRequest?, response: HTTPURLResponse, fileURL: URL?, withResult: Request.ValidationResult)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didvalidaterequest:response:withresult:)","title":"func request(DataStreamRequest, didValidateRequest: URLRequest?, response: HTTPURLResponse, withResult: Request.ValidationResult)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/requestdidcancel(_:)","title":"func requestDidCancel(Request)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/requestdidfinish(_:)","title":"func requestDidFinish(Request)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/requestdidresume(_:)","title":"func requestDidResume(Request)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/requestdidsuspend(_:)","title":"func requestDidSuspend(Request)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/requestisretrying(_:)","title":"func requestIsRetrying(Request)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/urlsession(_:datatask:didreceive:)","title":"func urlSession(URLSession, dataTask: URLSessionDataTask, didReceive: Data)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/urlsession(_:datatask:willcacheresponse:)","title":"func urlSession(URLSession, dataTask: URLSessionDataTask, willCacheResponse: CachedURLResponse)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/urlsession(_:didbecomeinvalidwitherror:)","title":"func urlSession(URLSession, didBecomeInvalidWithError: Error?)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/urlsession(_:downloadtask:didfinishdownloadingto:)","title":"func urlSession(URLSession, downloadTask: URLSessionDownloadTask, didFinishDownloadingTo: URL)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/urlsession(_:downloadtask:didresumeatoffset:expectedtotalbytes:)","title":"func urlSession(URLSession, downloadTask: URLSessionDownloadTask, didResumeAtOffset: Int64, expectedTotalBytes: Int64)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/urlsession(_:downloadtask:didwritedata:totalbyteswritten:totalbytesexpectedtowrite:)","title":"func urlSession(URLSession, downloadTask: URLSessionDownloadTask, didWriteData: Int64, totalBytesWritten: Int64, totalBytesExpectedToWrite: Int64)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/urlsession(_:task:didcompletewitherror:)","title":"func urlSession(URLSession, task: URLSessionTask, didCompleteWithError: Error?)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/urlsession(_:task:didfinishcollecting:)","title":"func urlSession(URLSession, task: URLSessionTask, didFinishCollecting: URLSessionTaskMetrics)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/urlsession(_:task:didreceive:)","title":"func urlSession(URLSession, task: URLSessionTask, didReceive: URLAuthenticationChallenge)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/urlsession(_:task:didsendbodydata:totalbytessent:totalbytesexpectedtosend:)","title":"func urlSession(URLSession, task: URLSessionTask, didSendBodyData: Int64, totalBytesSent: Int64, totalBytesExpectedToSend: Int64)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/urlsession(_:task:willperformhttpredirection:newrequest:)","title":"func urlSession(URLSession, task: URLSessionTask, willPerformHTTPRedirection: HTTPURLResponse, newRequest: URLRequest)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/urlsession(_:taskiswaitingforconnectivity:)","title":"func urlSession(URLSession, taskIsWaitingForConnectivity: URLSessionTask)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/urlsession(_:taskneedsnewbodystream:)","title":"func urlSession(URLSession, taskNeedsNewBodyStream: URLSessionTask)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/queue-75xgs","title":"var queue: DispatchQueue","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didparseresponse:)-2f90q","title":"func request<Value>(DataRequest, didParseResponse: DataResponse<Value, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didparseresponse:)-4ingu","title":"func request(DownloadRequest, didParseResponse: DownloadResponse<URL?, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didparseresponse:)-5bag8","title":"func request(DataRequest, didParseResponse: DataResponse<Data?, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didparseresponse:)-73ff2","title":"func request<Value>(DownloadRequest, didParseResponse: DownloadResponse<Value, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/compositeeventmonitor\/request(_:didparsestream:)-9o4hk","title":"func request<Value>(DataStreamRequest, didParseStream: Result<Value, AFError>)","type":"method"}],"path":"\/documentation\/alamofire\/compositeeventmonitor\/eventmonitor-implementations","title":"EventMonitor Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/compositeeventmonitor","title":"CompositeEventMonitor","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/compositetrustevaluator\/init(evaluators:)","title":"init(evaluators: [ServerTrustEvaluating])","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/compositetrustevaluator\/evaluate(_:forhost:)","title":"func evaluate(SecTrust, forHost: String) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/compositetrustevaluator\/composite(evaluators:)","title":"static func composite(evaluators: [ServerTrustEvaluating]) -> CompositeTrustEvaluator","type":"method"}],"path":"\/documentation\/alamofire\/compositetrustevaluator\/servertrustevaluating-implementations","title":"ServerTrustEvaluating Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/compositetrustevaluator","title":"CompositeTrustEvaluator","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/connectionlostretrypolicy\/init(retrylimit:exponentialbackoffbase:exponentialbackoffscale:retryablehttpmethods:)","title":"init(retryLimit: UInt, exponentialBackoffBase: UInt, exponentialBackoffScale: Double, retryableHTTPMethods: Set<HTTPMethod>)","type":"init"}],"path":"\/documentation\/alamofire\/connectionlostretrypolicy","title":"ConnectionLostRetryPolicy","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datarequest\/convertible","title":"let convertible: URLRequestConvertible","type":"property"},{"path":"\/documentation\/alamofire\/datarequest\/data","title":"var data: Data?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datarequest\/publishdata(queue:preprocessor:emptyresponsecodes:emptyrequestmethods:)","title":"func publishData(queue: DispatchQueue, preprocessor: DataPreprocessor, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>) -> DataResponsePublisher<Data>","type":"method"},{"path":"\/documentation\/alamofire\/datarequest\/publishdecodable(type:queue:preprocessor:decoder:emptyresponsecodes:emptyrequestmethods:)","title":"func publishDecodable<T>(type: T.Type, queue: DispatchQueue, preprocessor: DataPreprocessor, decoder: DataDecoder, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>) -> DataResponsePublisher<T>","type":"method"},{"path":"\/documentation\/alamofire\/datarequest\/publishdecodable(type:queue:preprocessor:decoder:emptyresponsecodes:emptyresponsemethods:)","title":"func publishDecodable<T>(type: T.Type, queue: DispatchQueue, preprocessor: DataPreprocessor, decoder: DataDecoder, emptyResponseCodes: Set<Int>, emptyResponseMethods: Set<HTTPMethod>) -> DataResponsePublisher<T>","type":"method"},{"path":"\/documentation\/alamofire\/datarequest\/publishresponse(using:on:)","title":"func publishResponse<Serializer, T>(using: Serializer, on: DispatchQueue) -> DataResponsePublisher<T>","type":"method"},{"path":"\/documentation\/alamofire\/datarequest\/publishstring(queue:preprocessor:encoding:emptyresponsecodes:emptyrequestmethods:)","title":"func publishString(queue: DispatchQueue, preprocessor: DataPreprocessor, encoding: String.Encoding?, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>) -> DataResponsePublisher<String>","type":"method"},{"path":"\/documentation\/alamofire\/datarequest\/publishunserialized(queue:)","title":"func publishUnserialized(queue: DispatchQueue) -> DataResponsePublisher<Data?>","type":"method"},{"path":"\/documentation\/alamofire\/datarequest\/response(queue:completionhandler:)","title":"func response(queue: DispatchQueue, completionHandler: (AFDataResponse<Data?>) -> Void) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/datarequest\/response(queue:responseserializer:completionhandler:)-3ldg9","title":"func response<Serializer>(queue: DispatchQueue, responseSerializer: Serializer, completionHandler: (AFDataResponse<Serializer.SerializedObject>) -> Void) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/datarequest\/response(queue:responseserializer:completionhandler:)-74yxi","title":"func response<Serializer>(queue: DispatchQueue, responseSerializer: Serializer, completionHandler: (AFDataResponse<Serializer.SerializedObject>) -> Void) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/datarequest\/responsedata(queue:datapreprocessor:emptyresponsecodes:emptyrequestmethods:completionhandler:)","title":"func responseData(queue: DispatchQueue, dataPreprocessor: DataPreprocessor, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>, completionHandler: (AFDataResponse<Data>) -> Void) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/datarequest\/responsedecodable(of:queue:datapreprocessor:decoder:emptyresponsecodes:emptyrequestmethods:completionhandler:)","title":"func responseDecodable<T>(of: T.Type, queue: DispatchQueue, dataPreprocessor: DataPreprocessor, decoder: DataDecoder, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>, completionHandler: (AFDataResponse<T>) -> Void) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/datarequest\/responsejson(queue:datapreprocessor:emptyresponsecodes:emptyrequestmethods:options:completionhandler:)","title":"func responseJSON(queue: DispatchQueue, dataPreprocessor: DataPreprocessor, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>, options: JSONSerialization.ReadingOptions, completionHandler: (AFDataResponse<Any>) -> Void) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/datarequest\/responsestring(queue:datapreprocessor:encoding:emptyresponsecodes:emptyrequestmethods:completionhandler:)","title":"func responseString(queue: DispatchQueue, dataPreprocessor: DataPreprocessor, encoding: String.Encoding?, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>, completionHandler: (AFDataResponse<String>) -> Void) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/datarequest\/serializingdata(automaticallycancelling:datapreprocessor:emptyresponsecodes:emptyrequestmethods:)","title":"func serializingData(automaticallyCancelling: Bool, dataPreprocessor: DataPreprocessor, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>) -> DataTask<Data>","type":"method"},{"path":"\/documentation\/alamofire\/datarequest\/serializingdecodable(_:automaticallycancelling:datapreprocessor:decoder:emptyresponsecodes:emptyrequestmethods:)","title":"func serializingDecodable<Value>(Value.Type, automaticallyCancelling: Bool, dataPreprocessor: DataPreprocessor, decoder: DataDecoder, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>) -> DataTask<Value>","type":"method"},{"path":"\/documentation\/alamofire\/datarequest\/serializingresponse(using:automaticallycancelling:)-7lxw0","title":"func serializingResponse<Serializer>(using: Serializer, automaticallyCancelling: Bool) -> DataTask<Serializer.SerializedObject>","type":"method"},{"path":"\/documentation\/alamofire\/datarequest\/serializingresponse(using:automaticallycancelling:)-owbe","title":"func serializingResponse<Serializer>(using: Serializer, automaticallyCancelling: Bool) -> DataTask<Serializer.SerializedObject>","type":"method"},{"path":"\/documentation\/alamofire\/datarequest\/serializingstring(automaticallycancelling:datapreprocessor:encoding:emptyresponsecodes:emptyrequestmethods:)","title":"func serializingString(automaticallyCancelling: Bool, dataPreprocessor: DataPreprocessor, encoding: String.Encoding?, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>) -> DataTask<String>","type":"method"},{"path":"\/documentation\/alamofire\/datarequest\/validate()","title":"func validate() -> Self","type":"method"},{"path":"\/documentation\/alamofire\/datarequest\/validate(_:)","title":"func validate(Validation) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/datarequest\/validate(contenttype:)","title":"func validate<S>(contentType: () -> S) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/datarequest\/validate(statuscode:)","title":"func validate<S>(statusCode: S) -> Self","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datarequest\/validation","title":"DataRequest.Validation","type":"typealias"}],"path":"\/documentation\/alamofire\/datarequest","title":"DataRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/dataresponseserializer\/init(datapreprocessor:emptyresponsecodes:emptyrequestmethods:)","title":"init(dataPreprocessor: DataPreprocessor, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/dataresponseserializer\/datapreprocessor-3ehxu","title":"let dataPreprocessor: DataPreprocessor","type":"property"},{"path":"\/documentation\/alamofire\/dataresponseserializer\/emptyrequestmethods-1izox","title":"let emptyRequestMethods: Set<HTTPMethod>","type":"property"},{"path":"\/documentation\/alamofire\/dataresponseserializer\/emptyresponsecodes-iibf","title":"let emptyResponseCodes: Set<Int>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/dataresponseserializer\/serialize(request:response:data:error:)","title":"func serialize(request: URLRequest?, response: HTTPURLResponse?, data: Data?, error: Error?) throws -> Data","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/dataresponseserializer\/serializedownload(request:response:fileurl:error:)","title":"func serializeDownload(request: URLRequest?, response: HTTPURLResponse?, fileURL: URL?, error: Error?) throws -> Self.SerializedObject","type":"method"}],"path":"\/documentation\/alamofire\/dataresponseserializer\/downloadresponseserializerprotocol-implementations","title":"DownloadResponseSerializerProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/dataresponseserializer\/datapreprocessor-48fhu","title":"var dataPreprocessor: DataPreprocessor","type":"property"},{"path":"\/documentation\/alamofire\/dataresponseserializer\/emptyrequestmethods-3p4fd","title":"var emptyRequestMethods: Set<HTTPMethod>","type":"property"},{"path":"\/documentation\/alamofire\/dataresponseserializer\/emptyresponsecodes-3yjje","title":"var emptyResponseCodes: Set<Int>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/dataresponseserializer\/emptyresponseallowed(forrequest:response:)","title":"func emptyResponseAllowed(forRequest: URLRequest?, response: HTTPURLResponse?) -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/dataresponseserializer\/requestallowsemptyresponsedata(_:)","title":"func requestAllowsEmptyResponseData(URLRequest?) -> Bool?","type":"method"},{"path":"\/documentation\/alamofire\/dataresponseserializer\/responseallowsemptyresponsedata(_:)","title":"func responseAllowsEmptyResponseData(HTTPURLResponse?) -> Bool?","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/dataresponseserializer\/data","title":"static var data: DataResponseSerializer","type":"property"},{"path":"\/documentation\/alamofire\/dataresponseserializer\/defaultdatapreprocessor","title":"static var defaultDataPreprocessor: DataPreprocessor","type":"property"},{"path":"\/documentation\/alamofire\/dataresponseserializer\/defaultemptyrequestmethods","title":"static var defaultEmptyRequestMethods: Set<HTTPMethod>","type":"property"},{"path":"\/documentation\/alamofire\/dataresponseserializer\/defaultemptyresponsecodes","title":"static var defaultEmptyResponseCodes: Set<Int>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/dataresponseserializer\/data(datapreprocessor:emptyresponsecodes:emptyrequestmethods:)","title":"static func data(dataPreprocessor: DataPreprocessor, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>) -> DataResponseSerializer","type":"method"},{"path":"\/documentation\/alamofire\/dataresponseserializer\/decodable(of:datapreprocessor:decoder:emptyresponsecodes:emptyrequestmethods:)","title":"static func decodable<T>(of: T.Type, dataPreprocessor: DataPreprocessor, decoder: DataDecoder, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>) -> DecodableResponseSerializer<T>","type":"method"}],"path":"\/documentation\/alamofire\/dataresponseserializer\/responseserializer-implementations","title":"ResponseSerializer Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/dataresponseserializer","title":"DataResponseSerializer","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datastreamrequest\/cancellationtoken\/cancel()","title":"func cancel()","type":"method"}],"path":"\/documentation\/alamofire\/datastreamrequest\/cancellationtoken","title":"DataStreamRequest.CancellationToken","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datastreamrequest\/completion\/error","title":"let error: AFError?","type":"property"},{"path":"\/documentation\/alamofire\/datastreamrequest\/completion\/metrics","title":"let metrics: URLSessionTaskMetrics?","type":"property"},{"path":"\/documentation\/alamofire\/datastreamrequest\/completion\/request","title":"let request: URLRequest?","type":"property"},{"path":"\/documentation\/alamofire\/datastreamrequest\/completion\/response","title":"let response: HTTPURLResponse?","type":"property"}],"path":"\/documentation\/alamofire\/datastreamrequest\/completion","title":"DataStreamRequest.Completion","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datastreamrequest\/stream\/completion","title":"var completion: DataStreamRequest.Completion?","type":"property"},{"path":"\/documentation\/alamofire\/datastreamrequest\/stream\/error","title":"var error: Failure?","type":"property"},{"path":"\/documentation\/alamofire\/datastreamrequest\/stream\/event","title":"let event: Event<Success, Failure>","type":"property"},{"path":"\/documentation\/alamofire\/datastreamrequest\/stream\/result","title":"var result: Result<Success, Failure>?","type":"property"},{"path":"\/documentation\/alamofire\/datastreamrequest\/stream\/token","title":"let token: CancellationToken","type":"property"},{"path":"\/documentation\/alamofire\/datastreamrequest\/stream\/value","title":"var value: Success?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datastreamrequest\/stream\/cancel()","title":"func cancel()","type":"method"}],"path":"\/documentation\/alamofire\/datastreamrequest\/stream","title":"DataStreamRequest.Stream","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datastreamrequest\/automaticallycancelonstreamerror","title":"let automaticallyCancelOnStreamError: Bool","type":"property"},{"path":"\/documentation\/alamofire\/datastreamrequest\/convertible","title":"let convertible: URLRequestConvertible","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datastreamrequest\/asinputstream(buffersize:)","title":"func asInputStream(bufferSize: Int) -> InputStream?","type":"method"},{"path":"\/documentation\/alamofire\/datastreamrequest\/publishdata(queue:)","title":"func publishData(queue: DispatchQueue) -> DataStreamPublisher<Data>","type":"method"},{"path":"\/documentation\/alamofire\/datastreamrequest\/publishdecodable(type:queue:decoder:preprocessor:)","title":"func publishDecodable<T>(type: T.Type, queue: DispatchQueue, decoder: DataDecoder, preprocessor: DataPreprocessor) -> DataStreamPublisher<T>","type":"method"},{"path":"\/documentation\/alamofire\/datastreamrequest\/publishstream(using:on:)","title":"func publishStream<Serializer>(using: Serializer, on: DispatchQueue) -> DataStreamPublisher<Serializer.SerializedObject>","type":"method"},{"path":"\/documentation\/alamofire\/datastreamrequest\/publishstring(queue:)","title":"func publishString(queue: DispatchQueue) -> DataStreamPublisher<String>","type":"method"},{"path":"\/documentation\/alamofire\/datastreamrequest\/responsestream(on:stream:)","title":"func responseStream(on: DispatchQueue, stream: Handler<Data, Never>) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/datastreamrequest\/responsestream(using:on:stream:)","title":"func responseStream<Serializer>(using: Serializer, on: DispatchQueue, stream: Handler<Serializer.SerializedObject, AFError>) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/datastreamrequest\/responsestreamdecodable(of:on:using:preprocessor:stream:)","title":"func responseStreamDecodable<T>(of: T.Type, on: DispatchQueue, using: DataDecoder, preprocessor: DataPreprocessor, stream: Handler<T, AFError>) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/datastreamrequest\/responsestreamstring(on:stream:)","title":"func responseStreamString(on: DispatchQueue, stream: Handler<String, Never>) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/datastreamrequest\/streamtask()","title":"func streamTask() -> DataStreamTask","type":"method"},{"path":"\/documentation\/alamofire\/datastreamrequest\/validate()","title":"func validate() -> Self","type":"method"},{"path":"\/documentation\/alamofire\/datastreamrequest\/validate(_:)","title":"func validate(Validation) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/datastreamrequest\/validate(contenttype:)","title":"func validate<S>(contentType: () -> S) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/datastreamrequest\/validate(statuscode:)","title":"func validate<S>(statusCode: S) -> Self","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datastreamrequest\/handler","title":"DataStreamRequest.Handler","type":"typealias"},{"path":"\/documentation\/alamofire\/datastreamrequest\/validation","title":"DataStreamRequest.Validation","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datastreamrequest\/event\/complete(_:)","title":"case complete(Completion)","type":"case"},{"path":"\/documentation\/alamofire\/datastreamrequest\/event\/stream(_:)","title":"case stream(Result<Success, Failure>)","type":"case"}],"path":"\/documentation\/alamofire\/datastreamrequest\/event","title":"DataStreamRequest.Event","type":"enum"}],"path":"\/documentation\/alamofire\/datastreamrequest","title":"DataStreamRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/decodableresponseserializer\/init(datapreprocessor:decoder:emptyresponsecodes:emptyrequestmethods:)","title":"init(dataPreprocessor: DataPreprocessor, decoder: DataDecoder, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/decodableresponseserializer\/datapreprocessor-3lcoe","title":"let dataPreprocessor: DataPreprocessor","type":"property"},{"path":"\/documentation\/alamofire\/decodableresponseserializer\/decoder","title":"let decoder: DataDecoder","type":"property"},{"path":"\/documentation\/alamofire\/decodableresponseserializer\/emptyrequestmethods-3n373","title":"let emptyRequestMethods: Set<HTTPMethod>","type":"property"},{"path":"\/documentation\/alamofire\/decodableresponseserializer\/emptyresponsecodes-6rt7n","title":"let emptyResponseCodes: Set<Int>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/decodableresponseserializer\/serialize(request:response:data:error:)","title":"func serialize(request: URLRequest?, response: HTTPURLResponse?, data: Data?, error: Error?) throws -> T","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/decodableresponseserializer\/serializedownload(request:response:fileurl:error:)","title":"func serializeDownload(request: URLRequest?, response: HTTPURLResponse?, fileURL: URL?, error: Error?) throws -> Self.SerializedObject","type":"method"}],"path":"\/documentation\/alamofire\/decodableresponseserializer\/downloadresponseserializerprotocol-implementations","title":"DownloadResponseSerializerProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/decodableresponseserializer\/datapreprocessor-1x7d7","title":"var dataPreprocessor: DataPreprocessor","type":"property"},{"path":"\/documentation\/alamofire\/decodableresponseserializer\/emptyrequestmethods-36f2f","title":"var emptyRequestMethods: Set<HTTPMethod>","type":"property"},{"path":"\/documentation\/alamofire\/decodableresponseserializer\/emptyresponsecodes-5jd6c","title":"var emptyResponseCodes: Set<Int>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/decodableresponseserializer\/emptyresponseallowed(forrequest:response:)","title":"func emptyResponseAllowed(forRequest: URLRequest?, response: HTTPURLResponse?) -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/decodableresponseserializer\/requestallowsemptyresponsedata(_:)","title":"func requestAllowsEmptyResponseData(URLRequest?) -> Bool?","type":"method"},{"path":"\/documentation\/alamofire\/decodableresponseserializer\/responseallowsemptyresponsedata(_:)","title":"func responseAllowsEmptyResponseData(HTTPURLResponse?) -> Bool?","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/decodableresponseserializer\/defaultdatapreprocessor","title":"static var defaultDataPreprocessor: DataPreprocessor","type":"property"},{"path":"\/documentation\/alamofire\/decodableresponseserializer\/defaultemptyrequestmethods","title":"static var defaultEmptyRequestMethods: Set<HTTPMethod>","type":"property"},{"path":"\/documentation\/alamofire\/decodableresponseserializer\/defaultemptyresponsecodes","title":"static var defaultEmptyResponseCodes: Set<Int>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/decodableresponseserializer\/decodable(of:datapreprocessor:decoder:emptyresponsecodes:emptyrequestmethods:)","title":"static func decodable<T>(of: T.Type, dataPreprocessor: DataPreprocessor, decoder: DataDecoder, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>) -> DecodableResponseSerializer<T>","type":"method"}],"path":"\/documentation\/alamofire\/decodableresponseserializer\/responseserializer-implementations","title":"ResponseSerializer Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/decodableresponseserializer","title":"DecodableResponseSerializer","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/defaulttrustevaluator\/init(validatehost:)","title":"init(validateHost: Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/defaulttrustevaluator\/evaluate(_:forhost:)","title":"func evaluate(SecTrust, forHost: String) throws","type":"method"}],"path":"\/documentation\/alamofire\/defaulttrustevaluator","title":"DefaultTrustEvaluator","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/disabledtrustevaluator\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/disabledtrustevaluator\/evaluate(_:forhost:)","title":"func evaluate(SecTrust, forHost: String) throws","type":"method"}],"path":"\/documentation\/alamofire\/disabledtrustevaluator","title":"DisabledTrustEvaluator","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/init(rawvalue:)","title":"init(rawValue: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/rawvalue","title":"let rawValue: Int","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/createintermediatedirectories","title":"static let createIntermediateDirectories: DownloadRequest.Options","type":"property"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/removepreviousfile","title":"static let removePreviousFile: DownloadRequest.Options","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/alamofire\/downloadrequest\/options\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/alamofire\/downloadrequest\/options\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/options\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/alamofire\/downloadrequest\/options\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/downloadrequest\/options","title":"DownloadRequest.Options","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadrequest\/downloadable-swift.property","title":"let downloadable: Downloadable","type":"property"},{"path":"\/documentation\/alamofire\/downloadrequest\/fileurl","title":"var fileURL: URL?","type":"property"},{"path":"\/documentation\/alamofire\/downloadrequest\/resumedata","title":"var resumeData: Data?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadrequest\/cancel()","title":"func cancel() -> Self","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/cancel(byproducingresumedata:)","title":"func cancel(byProducingResumeData: (_ data: Data?) -> Void) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/cancel(producingresumedata:)","title":"func cancel(producingResumeData: Bool) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/publishdata(queue:preprocessor:emptyresponsecodes:emptyrequestmethods:)","title":"func publishData(queue: DispatchQueue, preprocessor: DataPreprocessor, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>) -> DownloadResponsePublisher<Data>","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/publishdecodable(type:queue:preprocessor:decoder:emptyresponsecodes:emptyrequestmethods:)","title":"func publishDecodable<T>(type: T.Type, queue: DispatchQueue, preprocessor: DataPreprocessor, decoder: DataDecoder, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>) -> DownloadResponsePublisher<T>","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/publishdecodable(type:queue:preprocessor:decoder:emptyresponsecodes:emptyresponsemethods:)","title":"func publishDecodable<T>(type: T.Type, queue: DispatchQueue, preprocessor: DataPreprocessor, decoder: DataDecoder, emptyResponseCodes: Set<Int>, emptyResponseMethods: Set<HTTPMethod>) -> DownloadResponsePublisher<T>","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/publishresponse(using:on:)-6uokw","title":"func publishResponse<Serializer, T>(using: Serializer, on: DispatchQueue) -> DownloadResponsePublisher<T>","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/publishresponse(using:on:)-7u3hc","title":"func publishResponse<Serializer, T>(using: Serializer, on: DispatchQueue) -> DownloadResponsePublisher<T>","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/publishstring(queue:preprocessor:encoding:emptyresponsecodes:emptyrequestmethods:)","title":"func publishString(queue: DispatchQueue, preprocessor: DataPreprocessor, encoding: String.Encoding?, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>) -> DownloadResponsePublisher<String>","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/publishurl(queue:)","title":"func publishURL(queue: DispatchQueue) -> DownloadResponsePublisher<URL>","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/publishunserialized(on:)","title":"func publishUnserialized(on: DispatchQueue) -> DownloadResponsePublisher<URL?>","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/response(queue:completionhandler:)","title":"func response(queue: DispatchQueue, completionHandler: (AFDownloadResponse<URL?>) -> Void) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/response(queue:responseserializer:completionhandler:)-4gu40","title":"func response<Serializer>(queue: DispatchQueue, responseSerializer: Serializer, completionHandler: (AFDownloadResponse<Serializer.SerializedObject>) -> Void) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/response(queue:responseserializer:completionhandler:)-67wnq","title":"func response<Serializer>(queue: DispatchQueue, responseSerializer: Serializer, completionHandler: (AFDownloadResponse<Serializer.SerializedObject>) -> Void) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/responsedata(queue:datapreprocessor:emptyresponsecodes:emptyrequestmethods:completionhandler:)","title":"func responseData(queue: DispatchQueue, dataPreprocessor: DataPreprocessor, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>, completionHandler: (AFDownloadResponse<Data>) -> Void) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/responsedecodable(of:queue:datapreprocessor:decoder:emptyresponsecodes:emptyrequestmethods:completionhandler:)","title":"func responseDecodable<T>(of: T.Type, queue: DispatchQueue, dataPreprocessor: DataPreprocessor, decoder: DataDecoder, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>, completionHandler: (AFDownloadResponse<T>) -> Void) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/responsejson(queue:datapreprocessor:emptyresponsecodes:emptyrequestmethods:options:completionhandler:)","title":"func responseJSON(queue: DispatchQueue, dataPreprocessor: DataPreprocessor, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>, options: JSONSerialization.ReadingOptions, completionHandler: (AFDownloadResponse<Any>) -> Void) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/responsestring(queue:datapreprocessor:encoding:emptyresponsecodes:emptyrequestmethods:completionhandler:)","title":"func responseString(queue: DispatchQueue, dataPreprocessor: DataPreprocessor, encoding: String.Encoding?, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>, completionHandler: (AFDownloadResponse<String>) -> Void) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/responseurl(queue:completionhandler:)","title":"func responseURL(queue: DispatchQueue, completionHandler: (AFDownloadResponse<URL>) -> Void) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/serializingdata(automaticallycancelling:datapreprocessor:emptyresponsecodes:emptyrequestmethods:)","title":"func serializingData(automaticallyCancelling: Bool, dataPreprocessor: DataPreprocessor, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>) -> DownloadTask<Data>","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/serializingdecodable(_:automaticallycancelling:datapreprocessor:decoder:emptyresponsecodes:emptyrequestmethods:)","title":"func serializingDecodable<Value>(Value.Type, automaticallyCancelling: Bool, dataPreprocessor: DataPreprocessor, decoder: DataDecoder, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>) -> DownloadTask<Value>","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/serializingdownload(using:automaticallycancelling:)-11c06","title":"func serializingDownload<Serializer>(using: Serializer, automaticallyCancelling: Bool) -> DownloadTask<Serializer.SerializedObject>","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/serializingdownload(using:automaticallycancelling:)-h7mv","title":"func serializingDownload<Serializer>(using: Serializer, automaticallyCancelling: Bool) -> DownloadTask<Serializer.SerializedObject>","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/serializingdownloadedfileurl(automaticallycancelling:)","title":"func serializingDownloadedFileURL(automaticallyCancelling: Bool) -> DownloadTask<URL>","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/serializingstring(automaticallycancelling:datapreprocessor:encoding:emptyresponsecodes:emptyrequestmethods:)","title":"func serializingString(automaticallyCancelling: Bool, dataPreprocessor: DataPreprocessor, encoding: String.Encoding?, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>) -> DownloadTask<String>","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/task(forresumedata:using:)","title":"func task(forResumeData: Data, using: URLSession) -> URLSessionTask","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/validate()","title":"func validate() -> Self","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/validate(_:)","title":"func validate(Validation) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/validate(contenttype:)","title":"func validate<S>(contentType: () -> S) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/downloadrequest\/validate(statuscode:)","title":"func validate<S>(statusCode: S) -> Self","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadrequest\/destination","title":"DownloadRequest.Destination","type":"typealias"},{"path":"\/documentation\/alamofire\/downloadrequest\/validation","title":"DownloadRequest.Validation","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadrequest\/suggesteddownloaddestination(for:in:options:)","title":"class func suggestedDownloadDestination(for: FileManager.SearchPathDirectory, in: FileManager.SearchPathDomainMask, options: Options) -> Destination","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadrequest\/downloadable-swift.enum\/request(_:)","title":"case request(URLRequestConvertible)","type":"case"},{"path":"\/documentation\/alamofire\/downloadrequest\/downloadable-swift.enum\/resumedata(_:)","title":"case resumeData(Data)","type":"case"}],"path":"\/documentation\/alamofire\/downloadrequest\/downloadable-swift.enum","title":"DownloadRequest.Downloadable","type":"enum"}],"path":"\/documentation\/alamofire\/downloadrequest","title":"DownloadRequest","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/interceptor\/init(adapthandler:retryhandler:)","title":"init(adaptHandler: AdaptHandler, retryHandler: RetryHandler)","type":"init"},{"path":"\/documentation\/alamofire\/interceptor\/init(adapter:retrier:)","title":"init(adapter: RequestAdapter, retrier: RequestRetrier)","type":"init"},{"path":"\/documentation\/alamofire\/interceptor\/init(adapters:retriers:interceptors:)","title":"init(adapters: [RequestAdapter], retriers: [RequestRetrier], interceptors: [RequestInterceptor])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/interceptor\/adapters","title":"let adapters: [RequestAdapter]","type":"property"},{"path":"\/documentation\/alamofire\/interceptor\/retriers","title":"let retriers: [RequestRetrier]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/interceptor\/adapt(_:for:completion:)","title":"func adapt(URLRequest, for: Session, completion: (Result<URLRequest, Error>) -> Void)","type":"method"},{"path":"\/documentation\/alamofire\/interceptor\/adapt(_:using:completion:)","title":"func adapt(URLRequest, using: RequestAdapterState, completion: (Result<URLRequest, Error>) -> Void)","type":"method"},{"path":"\/documentation\/alamofire\/interceptor\/retry(_:for:dueto:completion:)","title":"func retry(Request, for: Session, dueTo: Error, completion: (RetryResult) -> Void)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/interceptor\/interceptor(adapter:retrier:)-94abq","title":"static func interceptor(adapter: RequestAdapter, retrier: RequestRetrier) -> Interceptor","type":"method"},{"path":"\/documentation\/alamofire\/interceptor\/interceptor(adapter:retrier:)-9qafw","title":"static func interceptor(adapter: AdaptHandler, retrier: RetryHandler) -> Interceptor","type":"method"},{"path":"\/documentation\/alamofire\/interceptor\/interceptor(adapters:retriers:interceptors:)","title":"static func interceptor(adapters: [RequestAdapter], retriers: [RequestRetrier], interceptors: [RequestInterceptor]) -> Interceptor","type":"method"}],"path":"\/documentation\/alamofire\/interceptor\/requestinterceptor-implementations","title":"RequestInterceptor Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/interceptor","title":"Interceptor","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/jsonparameterencoder\/init(encoder:)","title":"init(encoder: JSONEncoder)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/jsonparameterencoder\/encoder","title":"let encoder: JSONEncoder","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/jsonparameterencoder\/encode(_:into:)","title":"func encode<Parameters>(Parameters?, into: URLRequest) throws -> URLRequest","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/jsonparameterencoder\/default","title":"static var `default`: JSONParameterEncoder","type":"property"},{"path":"\/documentation\/alamofire\/jsonparameterencoder\/prettyprinted","title":"static var prettyPrinted: JSONParameterEncoder","type":"property"},{"path":"\/documentation\/alamofire\/jsonparameterencoder\/sortedkeys","title":"static var sortedKeys: JSONParameterEncoder","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/jsonparameterencoder\/json","title":"static var json: JSONParameterEncoder","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/jsonparameterencoder\/json(encoder:)","title":"static func json(encoder: JSONEncoder) -> JSONParameterEncoder","type":"method"}],"path":"\/documentation\/alamofire\/jsonparameterencoder\/parameterencoder-implementations","title":"ParameterEncoder Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/jsonparameterencoder","title":"JSONParameterEncoder","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/jsonresponseserializer\/init(datapreprocessor:emptyresponsecodes:emptyrequestmethods:options:)","title":"init(dataPreprocessor: DataPreprocessor, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>, options: JSONSerialization.ReadingOptions)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/jsonresponseserializer\/datapreprocessor-6je0z","title":"let dataPreprocessor: DataPreprocessor","type":"property"},{"path":"\/documentation\/alamofire\/jsonresponseserializer\/emptyrequestmethods-2z475","title":"let emptyRequestMethods: Set<HTTPMethod>","type":"property"},{"path":"\/documentation\/alamofire\/jsonresponseserializer\/emptyresponsecodes-3ft26","title":"let emptyResponseCodes: Set<Int>","type":"property"},{"path":"\/documentation\/alamofire\/jsonresponseserializer\/options","title":"let options: JSONSerialization.ReadingOptions","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/jsonresponseserializer\/serialize(request:response:data:error:)","title":"func serialize(request: URLRequest?, response: HTTPURLResponse?, data: Data?, error: Error?) throws -> Any","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/jsonresponseserializer\/serializedownload(request:response:fileurl:error:)","title":"func serializeDownload(request: URLRequest?, response: HTTPURLResponse?, fileURL: URL?, error: Error?) throws -> Self.SerializedObject","type":"method"}],"path":"\/documentation\/alamofire\/jsonresponseserializer\/downloadresponseserializerprotocol-implementations","title":"DownloadResponseSerializerProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/jsonresponseserializer\/datapreprocessor-60ey5","title":"var dataPreprocessor: DataPreprocessor","type":"property"},{"path":"\/documentation\/alamofire\/jsonresponseserializer\/emptyrequestmethods-3dq1m","title":"var emptyRequestMethods: Set<HTTPMethod>","type":"property"},{"path":"\/documentation\/alamofire\/jsonresponseserializer\/emptyresponsecodes-21rei","title":"var emptyResponseCodes: Set<Int>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/jsonresponseserializer\/emptyresponseallowed(forrequest:response:)","title":"func emptyResponseAllowed(forRequest: URLRequest?, response: HTTPURLResponse?) -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/jsonresponseserializer\/requestallowsemptyresponsedata(_:)","title":"func requestAllowsEmptyResponseData(URLRequest?) -> Bool?","type":"method"},{"path":"\/documentation\/alamofire\/jsonresponseserializer\/responseallowsemptyresponsedata(_:)","title":"func responseAllowsEmptyResponseData(HTTPURLResponse?) -> Bool?","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/jsonresponseserializer\/defaultdatapreprocessor","title":"static var defaultDataPreprocessor: DataPreprocessor","type":"property"},{"path":"\/documentation\/alamofire\/jsonresponseserializer\/defaultemptyrequestmethods","title":"static var defaultEmptyRequestMethods: Set<HTTPMethod>","type":"property"},{"path":"\/documentation\/alamofire\/jsonresponseserializer\/defaultemptyresponsecodes","title":"static var defaultEmptyResponseCodes: Set<Int>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/jsonresponseserializer\/decodable(of:datapreprocessor:decoder:emptyresponsecodes:emptyrequestmethods:)","title":"static func decodable<T>(of: T.Type, dataPreprocessor: DataPreprocessor, decoder: DataDecoder, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>) -> DecodableResponseSerializer<T>","type":"method"}],"path":"\/documentation\/alamofire\/jsonresponseserializer\/responseserializer-implementations","title":"ResponseSerializer Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/jsonresponseserializer","title":"JSONResponseSerializer","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/multipartformdata\/init(filemanager:boundary:)","title":"init(fileManager: FileManager, boundary: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/multipartformdata\/boundary","title":"let boundary: String","type":"property"},{"path":"\/documentation\/alamofire\/multipartformdata\/contentlength","title":"var contentLength: UInt64","type":"property"},{"path":"\/documentation\/alamofire\/multipartformdata\/contenttype","title":"var contentType: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/multipartformdata\/append(_:withlength:headers:)","title":"func append(InputStream, withLength: UInt64, headers: HTTPHeaders)","type":"method"},{"path":"\/documentation\/alamofire\/multipartformdata\/append(_:withlength:name:filename:mimetype:)","title":"func append(InputStream, withLength: UInt64, name: String, fileName: String, mimeType: String)","type":"method"},{"path":"\/documentation\/alamofire\/multipartformdata\/append(_:withname:)","title":"func append(URL, withName: String)","type":"method"},{"path":"\/documentation\/alamofire\/multipartformdata\/append(_:withname:filename:mimetype:)-83hf7","title":"func append(Data, withName: String, fileName: String?, mimeType: String?)","type":"method"},{"path":"\/documentation\/alamofire\/multipartformdata\/append(_:withname:filename:mimetype:)-ssrt","title":"func append(URL, withName: String, fileName: String, mimeType: String)","type":"method"},{"path":"\/documentation\/alamofire\/multipartformdata\/encode()","title":"func encode() throws -> Data","type":"method"},{"path":"\/documentation\/alamofire\/multipartformdata\/writeencodeddata(to:)","title":"func writeEncodedData(to: URL) throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/multipartformdata\/encodingmemorythreshold","title":"static let encodingMemoryThreshold: UInt64","type":"property"}],"path":"\/documentation\/alamofire\/multipartformdata","title":"MultipartFormData","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/networkreachabilitymanager\/init()","title":"init?()","type":"init"},{"path":"\/documentation\/alamofire\/networkreachabilitymanager\/init(host:)","title":"init?(host: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/networkreachabilitymanager\/flags","title":"var flags: SCNetworkReachabilityFlags?","type":"property"},{"path":"\/documentation\/alamofire\/networkreachabilitymanager\/isreachable","title":"var isReachable: Bool","type":"property"},{"path":"\/documentation\/alamofire\/networkreachabilitymanager\/isreachableoncellular","title":"var isReachableOnCellular: Bool","type":"property"},{"path":"\/documentation\/alamofire\/networkreachabilitymanager\/isreachableonethernetorwifi","title":"var isReachableOnEthernetOrWiFi: Bool","type":"property"},{"path":"\/documentation\/alamofire\/networkreachabilitymanager\/reachabilityqueue","title":"let reachabilityQueue: DispatchQueue","type":"property"},{"path":"\/documentation\/alamofire\/networkreachabilitymanager\/status","title":"var status: NetworkReachabilityStatus","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/networkreachabilitymanager\/startlistening(onqueue:onupdateperforming:)","title":"func startListening(onQueue: DispatchQueue, onUpdatePerforming: Listener) -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/networkreachabilitymanager\/stoplistening()","title":"func stopListening()","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/networkreachabilitymanager\/listener","title":"NetworkReachabilityManager.Listener","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/networkreachabilitymanager\/default","title":"static let `default`: NetworkReachabilityManager?","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/networkreachabilitymanager\/networkreachabilitystatus\/notreachable","title":"case notReachable","type":"case"},{"path":"\/documentation\/alamofire\/networkreachabilitymanager\/networkreachabilitystatus\/reachable(_:)","title":"case reachable(ConnectionType)","type":"case"},{"path":"\/documentation\/alamofire\/networkreachabilitymanager\/networkreachabilitystatus\/unknown","title":"case unknown","type":"case"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/networkreachabilitymanager\/networkreachabilitystatus\/connectiontype\/cellular","title":"case cellular","type":"case"},{"path":"\/documentation\/alamofire\/networkreachabilitymanager\/networkreachabilitystatus\/connectiontype\/ethernetorwifi","title":"case ethernetOrWiFi","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/alamofire\/networkreachabilitymanager\/networkreachabilitystatus\/connectiontype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/alamofire\/networkreachabilitymanager\/networkreachabilitystatus\/connectiontype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/networkreachabilitymanager\/networkreachabilitystatus\/connectiontype","title":"NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/alamofire\/networkreachabilitymanager\/networkreachabilitystatus\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/alamofire\/networkreachabilitymanager\/networkreachabilitystatus\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/networkreachabilitymanager\/networkreachabilitystatus","title":"NetworkReachabilityManager.NetworkReachabilityStatus","type":"enum"}],"path":"\/documentation\/alamofire\/networkreachabilitymanager","title":"NetworkReachabilityManager","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/pinnedcertificatestrustevaluator\/init(certificates:acceptselfsignedcertificates:performdefaultvalidation:validatehost:)","title":"init(certificates: [SecCertificate], acceptSelfSignedCertificates: Bool, performDefaultValidation: Bool, validateHost: Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/pinnedcertificatestrustevaluator\/evaluate(_:forhost:)","title":"func evaluate(SecTrust, forHost: String) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/pinnedcertificatestrustevaluator\/pinnedcertificates","title":"static var pinnedCertificates: PinnedCertificatesTrustEvaluator","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/pinnedcertificatestrustevaluator\/pinnedcertificates(certificates:acceptselfsignedcertificates:performdefaultvalidation:validatehost:)","title":"static func pinnedCertificates(certificates: [SecCertificate], acceptSelfSignedCertificates: Bool, performDefaultValidation: Bool, validateHost: Bool) -> PinnedCertificatesTrustEvaluator","type":"method"}],"path":"\/documentation\/alamofire\/pinnedcertificatestrustevaluator\/servertrustevaluating-implementations","title":"ServerTrustEvaluating Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/pinnedcertificatestrustevaluator","title":"PinnedCertificatesTrustEvaluator","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/publickeystrustevaluator\/init(keys:performdefaultvalidation:validatehost:)","title":"init(keys: [SecKey], performDefaultValidation: Bool, validateHost: Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/publickeystrustevaluator\/evaluate(_:forhost:)","title":"func evaluate(SecTrust, forHost: String) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/publickeystrustevaluator\/publickeys","title":"static var publicKeys: PublicKeysTrustEvaluator","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/publickeystrustevaluator\/publickeys(keys:performdefaultvalidation:validatehost:)","title":"static func publicKeys(keys: [SecKey], performDefaultValidation: Bool, validateHost: Bool) -> PublicKeysTrustEvaluator","type":"method"}],"path":"\/documentation\/alamofire\/publickeystrustevaluator\/servertrustevaluating-implementations","title":"ServerTrustEvaluating Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/publickeystrustevaluator","title":"PublicKeysTrustEvaluator","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/request\/allmetrics","title":"var allMetrics: [URLSessionTaskMetrics]","type":"property"},{"path":"\/documentation\/alamofire\/request\/cachedresponsehandler","title":"var cachedResponseHandler: CachedResponseHandler?","type":"property"},{"path":"\/documentation\/alamofire\/request\/credential","title":"var credential: URLCredential?","type":"property"},{"path":"\/documentation\/alamofire\/request\/delegate","title":"var delegate: RequestDelegate?","type":"property"},{"path":"\/documentation\/alamofire\/request\/downloadprogress","title":"let downloadProgress: Progress","type":"property"},{"path":"\/documentation\/alamofire\/request\/error","title":"var error: AFError?","type":"property"},{"path":"\/documentation\/alamofire\/request\/eventmonitor","title":"let eventMonitor: EventMonitor?","type":"property"},{"path":"\/documentation\/alamofire\/request\/firstmetrics","title":"var firstMetrics: URLSessionTaskMetrics?","type":"property"},{"path":"\/documentation\/alamofire\/request\/firstrequest","title":"var firstRequest: URLRequest?","type":"property"},{"path":"\/documentation\/alamofire\/request\/firsttask","title":"var firstTask: URLSessionTask?","type":"property"},{"path":"\/documentation\/alamofire\/request\/id","title":"let id: UUID","type":"property"},{"path":"\/documentation\/alamofire\/request\/interceptor","title":"let interceptor: RequestInterceptor?","type":"property"},{"path":"\/documentation\/alamofire\/request\/iscancelled","title":"var isCancelled: Bool","type":"property"},{"path":"\/documentation\/alamofire\/request\/isfinished","title":"var isFinished: Bool","type":"property"},{"path":"\/documentation\/alamofire\/request\/isinitialized","title":"var isInitialized: Bool","type":"property"},{"path":"\/documentation\/alamofire\/request\/isresumed","title":"var isResumed: Bool","type":"property"},{"path":"\/documentation\/alamofire\/request\/issuspended","title":"var isSuspended: Bool","type":"property"},{"path":"\/documentation\/alamofire\/request\/lastmetrics","title":"var lastMetrics: URLSessionTaskMetrics?","type":"property"},{"path":"\/documentation\/alamofire\/request\/lastrequest","title":"var lastRequest: URLRequest?","type":"property"},{"path":"\/documentation\/alamofire\/request\/lasttask","title":"var lastTask: URLSessionTask?","type":"property"},{"path":"\/documentation\/alamofire\/request\/metrics","title":"var metrics: URLSessionTaskMetrics?","type":"property"},{"path":"\/documentation\/alamofire\/request\/performedrequests","title":"var performedRequests: [URLRequest]","type":"property"},{"path":"\/documentation\/alamofire\/request\/redirecthandler","title":"var redirectHandler: RedirectHandler?","type":"property"},{"path":"\/documentation\/alamofire\/request\/request","title":"var request: URLRequest?","type":"property"},{"path":"\/documentation\/alamofire\/request\/requests","title":"var requests: [URLRequest]","type":"property"},{"path":"\/documentation\/alamofire\/request\/response","title":"var response: HTTPURLResponse?","type":"property"},{"path":"\/documentation\/alamofire\/request\/retrycount","title":"var retryCount: Int","type":"property"},{"path":"\/documentation\/alamofire\/request\/serializationqueue","title":"let serializationQueue: DispatchQueue","type":"property"},{"path":"\/documentation\/alamofire\/request\/state-swift.property","title":"var state: State","type":"property"},{"path":"\/documentation\/alamofire\/request\/task","title":"var task: URLSessionTask?","type":"property"},{"path":"\/documentation\/alamofire\/request\/tasks","title":"var tasks: [URLSessionTask]","type":"property"},{"path":"\/documentation\/alamofire\/request\/underlyingqueue","title":"let underlyingQueue: DispatchQueue","type":"property"},{"path":"\/documentation\/alamofire\/request\/uploadprogress","title":"let uploadProgress: Progress","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/request\/authenticate(username:password:persistence:)","title":"func authenticate(username: String, password: String, persistence: URLCredential.Persistence) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/request\/authenticate(with:)","title":"func authenticate(with: URLCredential) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/request\/curldescription()","title":"func cURLDescription() -> String","type":"method"},{"path":"\/documentation\/alamofire\/request\/curldescription(calling:)","title":"func cURLDescription(calling: (String) -> Void) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/request\/curldescription(on:calling:)","title":"func cURLDescription(on: DispatchQueue, calling: (String) -> Void) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/request\/curldescriptions(bufferingpolicy:)","title":"func cURLDescriptions(bufferingPolicy: StreamOf<String>.BufferingPolicy) -> StreamOf<String>","type":"method"},{"path":"\/documentation\/alamofire\/request\/cacheresponse(using:)","title":"func cacheResponse(using: CachedResponseHandler) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/request\/cancel()","title":"func cancel() -> Self","type":"method"},{"path":"\/documentation\/alamofire\/request\/downloadprogress(bufferingpolicy:)","title":"func downloadProgress(bufferingPolicy: StreamOf<Progress>.BufferingPolicy) -> StreamOf<Progress>","type":"method"},{"path":"\/documentation\/alamofire\/request\/downloadprogress(queue:closure:)","title":"func downloadProgress(queue: DispatchQueue, closure: ProgressHandler) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/request\/onurlrequestcreation(on:perform:)","title":"func onURLRequestCreation(on: DispatchQueue, perform: (URLRequest) -> Void) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/request\/onurlsessiontaskcreation(on:perform:)","title":"func onURLSessionTaskCreation(on: DispatchQueue, perform: (URLSessionTask) -> Void) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/request\/redirect(using:)","title":"func redirect(using: RedirectHandler) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/request\/resume()","title":"func resume() -> Self","type":"method"},{"path":"\/documentation\/alamofire\/request\/suspend()","title":"func suspend() -> Self","type":"method"},{"path":"\/documentation\/alamofire\/request\/uploadprogress(bufferingpolicy:)","title":"func uploadProgress(bufferingPolicy: StreamOf<Progress>.BufferingPolicy) -> StreamOf<Progress>","type":"method"},{"path":"\/documentation\/alamofire\/request\/uploadprogress(queue:closure:)","title":"func uploadProgress(queue: DispatchQueue, closure: ProgressHandler) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/request\/urlrequests(bufferingpolicy:)","title":"func urlRequests(bufferingPolicy: StreamOf<URLRequest>.BufferingPolicy) -> StreamOf<URLRequest>","type":"method"},{"path":"\/documentation\/alamofire\/request\/urlsessiontasks(bufferingpolicy:)","title":"func urlSessionTasks(bufferingPolicy: StreamOf<URLSessionTask>.BufferingPolicy) -> StreamOf<URLSessionTask>","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/request\/progresshandler","title":"Request.ProgressHandler","type":"typealias"},{"path":"\/documentation\/alamofire\/request\/validationresult","title":"Request.ValidationResult","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/request\/didcancelnotification","title":"static let didCancelNotification: Notification.Name","type":"property"},{"path":"\/documentation\/alamofire\/request\/didcanceltasknotification","title":"static let didCancelTaskNotification: Notification.Name","type":"property"},{"path":"\/documentation\/alamofire\/request\/didcompletetasknotification","title":"static let didCompleteTaskNotification: Notification.Name","type":"property"},{"path":"\/documentation\/alamofire\/request\/didfinishnotification","title":"static let didFinishNotification: Notification.Name","type":"property"},{"path":"\/documentation\/alamofire\/request\/didresumenotification","title":"static let didResumeNotification: Notification.Name","type":"property"},{"path":"\/documentation\/alamofire\/request\/didresumetasknotification","title":"static let didResumeTaskNotification: Notification.Name","type":"property"},{"path":"\/documentation\/alamofire\/request\/didsuspendnotification","title":"static let didSuspendNotification: Notification.Name","type":"property"},{"path":"\/documentation\/alamofire\/request\/didsuspendtasknotification","title":"static let didSuspendTaskNotification: Notification.Name","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/request\/state-swift.enum\/cancelled","title":"case cancelled","type":"case"},{"path":"\/documentation\/alamofire\/request\/state-swift.enum\/finished","title":"case finished","type":"case"},{"path":"\/documentation\/alamofire\/request\/state-swift.enum\/initialized","title":"case initialized","type":"case"},{"path":"\/documentation\/alamofire\/request\/state-swift.enum\/resumed","title":"case resumed","type":"case"},{"path":"\/documentation\/alamofire\/request\/state-swift.enum\/suspended","title":"case suspended","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/alamofire\/request\/state-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/alamofire\/request\/state-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/request\/state-swift.enum","title":"Request.State","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/request\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/alamofire\/request\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/alamofire\/request\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/alamofire\/request\/==(_:_:)","title":"static func == (Request, Request) -> Bool","type":"op"}],"path":"\/documentation\/alamofire\/request\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/request\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/alamofire\/request\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/request\/sessionheaders","title":"var sessionHeaders: [String : String]","type":"property"}],"path":"\/documentation\/alamofire\/request\/requesttype-implementations","title":"RequestType Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/request","title":"Request","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/retrier\/init(_:)","title":"init(RetryHandler)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/retrier\/retry(_:for:dueto:completion:)","title":"func retry(Request, for: Session, dueTo: Error, completion: (RetryResult) -> Void)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/retrier\/adapt(_:for:completion:)","title":"func adapt(URLRequest, for: Session, completion: (Result<URLRequest, Error>) -> Void)","type":"method"},{"path":"\/documentation\/alamofire\/retrier\/adapt(_:using:completion:)","title":"func adapt(URLRequest, using: RequestAdapterState, completion: (Result<URLRequest, Error>) -> Void)","type":"method"}],"path":"\/documentation\/alamofire\/retrier\/requestadapter-implementations","title":"RequestAdapter Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/retrier\/retrier(using:)","title":"static func retrier(using: RetryHandler) -> Retrier","type":"method"}],"path":"\/documentation\/alamofire\/retrier\/requestretrier-implementations","title":"RequestRetrier Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/retrier","title":"Retrier","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/retrypolicy\/init(retrylimit:exponentialbackoffbase:exponentialbackoffscale:retryablehttpmethods:retryablehttpstatuscodes:retryableurlerrorcodes:)","title":"init(retryLimit: UInt, exponentialBackoffBase: UInt, exponentialBackoffScale: Double, retryableHTTPMethods: Set<HTTPMethod>, retryableHTTPStatusCodes: Set<Int>, retryableURLErrorCodes: Set<URLError.Code>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/retrypolicy\/exponentialbackoffbase","title":"let exponentialBackoffBase: UInt","type":"property"},{"path":"\/documentation\/alamofire\/retrypolicy\/exponentialbackoffscale","title":"let exponentialBackoffScale: Double","type":"property"},{"path":"\/documentation\/alamofire\/retrypolicy\/retrylimit","title":"let retryLimit: UInt","type":"property"},{"path":"\/documentation\/alamofire\/retrypolicy\/retryablehttpmethods","title":"let retryableHTTPMethods: Set<HTTPMethod>","type":"property"},{"path":"\/documentation\/alamofire\/retrypolicy\/retryablehttpstatuscodes","title":"let retryableHTTPStatusCodes: Set<Int>","type":"property"},{"path":"\/documentation\/alamofire\/retrypolicy\/retryableurlerrorcodes","title":"let retryableURLErrorCodes: Set<URLError.Code>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/retrypolicy\/retry(_:for:dueto:completion:)","title":"func retry(Request, for: Session, dueTo: Error, completion: (RetryResult) -> Void)","type":"method"},{"path":"\/documentation\/alamofire\/retrypolicy\/shouldretry(request:dueto:)","title":"func shouldRetry(request: Request, dueTo: Error) -> Bool","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/retrypolicy\/defaultexponentialbackoffbase","title":"static let defaultExponentialBackoffBase: UInt","type":"property"},{"path":"\/documentation\/alamofire\/retrypolicy\/defaultexponentialbackoffscale","title":"static let defaultExponentialBackoffScale: Double","type":"property"},{"path":"\/documentation\/alamofire\/retrypolicy\/defaultretrylimit","title":"static let defaultRetryLimit: UInt","type":"property"},{"path":"\/documentation\/alamofire\/retrypolicy\/defaultretryablehttpmethods","title":"static let defaultRetryableHTTPMethods: Set<HTTPMethod>","type":"property"},{"path":"\/documentation\/alamofire\/retrypolicy\/defaultretryablehttpstatuscodes","title":"static let defaultRetryableHTTPStatusCodes: Set<Int>","type":"property"},{"path":"\/documentation\/alamofire\/retrypolicy\/defaultretryableurlerrorcodes","title":"static let defaultRetryableURLErrorCodes: Set<URLError.Code>","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/retrypolicy\/adapt(_:for:completion:)","title":"func adapt(URLRequest, for: Session, completion: (Result<URLRequest, Error>) -> Void)","type":"method"},{"path":"\/documentation\/alamofire\/retrypolicy\/adapt(_:using:completion:)","title":"func adapt(URLRequest, using: RequestAdapterState, completion: (Result<URLRequest, Error>) -> Void)","type":"method"}],"path":"\/documentation\/alamofire\/retrypolicy\/requestadapter-implementations","title":"RequestAdapter Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/retrypolicy\/retrypolicy","title":"static var retryPolicy: RetryPolicy","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/retrypolicy\/retrypolicy(retrylimit:exponentialbackoffbase:exponentialbackoffscale:retryablehttpmethods:retryablehttpstatuscodes:retryableurlerrorcodes:)","title":"static func retryPolicy(retryLimit: UInt, exponentialBackoffBase: UInt, exponentialBackoffScale: Double, retryableHTTPMethods: Set<HTTPMethod>, retryableHTTPStatusCodes: Set<Int>, retryableURLErrorCodes: Set<URLError.Code>) -> RetryPolicy","type":"method"}],"path":"\/documentation\/alamofire\/retrypolicy\/requestinterceptor-implementations","title":"RequestInterceptor Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/retrypolicy","title":"RetryPolicy","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/init(rawvalue:)","title":"init(rawValue: CFOptionFlags)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/rawvalue","title":"let rawValue: CFOptionFlags","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/any","title":"static let any: RevocationTrustEvaluator.Options","type":"property"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/crl","title":"static let crl: RevocationTrustEvaluator.Options","type":"property"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/networkaccessdisabled","title":"static let networkAccessDisabled: RevocationTrustEvaluator.Options","type":"property"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/ocsp","title":"static let ocsp: RevocationTrustEvaluator.Options","type":"property"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/prefercrl","title":"static let preferCRL: RevocationTrustEvaluator.Options","type":"property"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/requirepositiveresponse","title":"static let requirePositiveResponse: RevocationTrustEvaluator.Options","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/revocationtrustevaluator\/options","title":"RevocationTrustEvaluator.Options","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/init(performdefaultvalidation:validatehost:options:)","title":"init(performDefaultValidation: Bool, validateHost: Bool, options: Options)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/evaluate(_:forhost:)","title":"func evaluate(SecTrust, forHost: String) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/revocationchecking","title":"static var revocationChecking: RevocationTrustEvaluator","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/revocationtrustevaluator\/revocationchecking(performdefaultvalidation:validatehost:options:)","title":"static func revocationChecking(performDefaultValidation: Bool, validateHost: Bool, options: RevocationTrustEvaluator.Options) -> RevocationTrustEvaluator","type":"method"}],"path":"\/documentation\/alamofire\/revocationtrustevaluator\/servertrustevaluating-implementations","title":"ServerTrustEvaluating Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/revocationtrustevaluator","title":"RevocationTrustEvaluator","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/servertrustmanager\/init(allhostsmustbeevaluated:evaluators:)","title":"init(allHostsMustBeEvaluated: Bool, evaluators: [String : ServerTrustEvaluating])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/servertrustmanager\/allhostsmustbeevaluated","title":"let allHostsMustBeEvaluated: Bool","type":"property"},{"path":"\/documentation\/alamofire\/servertrustmanager\/evaluators","title":"let evaluators: [String : ServerTrustEvaluating]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/servertrustmanager\/servertrustevaluator(forhost:)","title":"func serverTrustEvaluator(forHost: String) throws -> ServerTrustEvaluating?","type":"method"}],"path":"\/documentation\/alamofire\/servertrustmanager","title":"ServerTrustManager","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/session\/init(configuration:delegate:rootqueue:startrequestsimmediately:requestqueue:serializationqueue:interceptor:servertrustmanager:redirecthandler:cachedresponsehandler:eventmonitors:)","title":"init(configuration: URLSessionConfiguration, delegate: SessionDelegate, rootQueue: DispatchQueue, startRequestsImmediately: Bool, requestQueue: DispatchQueue?, serializationQueue: DispatchQueue?, interceptor: RequestInterceptor?, serverTrustManager: ServerTrustManager?, redirectHandler: RedirectHandler?, cachedResponseHandler: CachedResponseHandler?, eventMonitors: [EventMonitor])","type":"init"},{"path":"\/documentation\/alamofire\/session\/init(session:delegate:rootqueue:startrequestsimmediately:requestqueue:serializationqueue:interceptor:servertrustmanager:redirecthandler:cachedresponsehandler:eventmonitors:)","title":"init(session: URLSession, delegate: SessionDelegate, rootQueue: DispatchQueue, startRequestsImmediately: Bool, requestQueue: DispatchQueue?, serializationQueue: DispatchQueue?, interceptor: RequestInterceptor?, serverTrustManager: ServerTrustManager?, redirectHandler: RedirectHandler?, cachedResponseHandler: CachedResponseHandler?, eventMonitors: [EventMonitor])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/session\/cachedresponsehandler","title":"let cachedResponseHandler: CachedResponseHandler?","type":"property"},{"path":"\/documentation\/alamofire\/session\/defaulteventmonitors","title":"let defaultEventMonitors: [EventMonitor]","type":"property"},{"path":"\/documentation\/alamofire\/session\/delegate","title":"let delegate: SessionDelegate","type":"property"},{"path":"\/documentation\/alamofire\/session\/eventmonitor","title":"let eventMonitor: CompositeEventMonitor","type":"property"},{"path":"\/documentation\/alamofire\/session\/interceptor","title":"let interceptor: RequestInterceptor?","type":"property"},{"path":"\/documentation\/alamofire\/session\/redirecthandler","title":"let redirectHandler: RedirectHandler?","type":"property"},{"path":"\/documentation\/alamofire\/session\/requestqueue","title":"let requestQueue: DispatchQueue","type":"property"},{"path":"\/documentation\/alamofire\/session\/rootqueue","title":"let rootQueue: DispatchQueue","type":"property"},{"path":"\/documentation\/alamofire\/session\/serializationqueue","title":"let serializationQueue: DispatchQueue","type":"property"},{"path":"\/documentation\/alamofire\/session\/servertrustmanager","title":"let serverTrustManager: ServerTrustManager?","type":"property"},{"path":"\/documentation\/alamofire\/session\/session","title":"let session: URLSession","type":"property"},{"path":"\/documentation\/alamofire\/session\/startrequestsimmediately","title":"let startRequestsImmediately: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/session\/cancelallrequests(completingonqueue:completion:)","title":"func cancelAllRequests(completingOnQueue: DispatchQueue, completion: (() -> Void)?)","type":"method"},{"path":"\/documentation\/alamofire\/session\/download(_:interceptor:to:)","title":"func download(URLRequestConvertible, interceptor: RequestInterceptor?, to: DownloadRequest.Destination?) -> DownloadRequest","type":"method"},{"path":"\/documentation\/alamofire\/session\/download(_:method:parameters:encoder:headers:interceptor:requestmodifier:to:)","title":"func download<Parameters>(URLConvertible, method: HTTPMethod, parameters: Parameters?, encoder: ParameterEncoder, headers: HTTPHeaders?, interceptor: RequestInterceptor?, requestModifier: RequestModifier?, to: DownloadRequest.Destination?) -> DownloadRequest","type":"method"},{"path":"\/documentation\/alamofire\/session\/download(_:method:parameters:encoding:headers:interceptor:requestmodifier:to:)","title":"func download(URLConvertible, method: HTTPMethod, parameters: Parameters?, encoding: ParameterEncoding, headers: HTTPHeaders?, interceptor: RequestInterceptor?, requestModifier: RequestModifier?, to: DownloadRequest.Destination?) -> DownloadRequest","type":"method"},{"path":"\/documentation\/alamofire\/session\/download(resumingwith:interceptor:to:)","title":"func download(resumingWith: Data, interceptor: RequestInterceptor?, to: DownloadRequest.Destination?) -> DownloadRequest","type":"method"},{"path":"\/documentation\/alamofire\/session\/request(_:interceptor:)","title":"func request(URLRequestConvertible, interceptor: RequestInterceptor?) -> DataRequest","type":"method"},{"path":"\/documentation\/alamofire\/session\/request(_:method:parameters:encoder:headers:interceptor:requestmodifier:)","title":"func request<Parameters>(URLConvertible, method: HTTPMethod, parameters: Parameters?, encoder: ParameterEncoder, headers: HTTPHeaders?, interceptor: RequestInterceptor?, requestModifier: RequestModifier?) -> DataRequest","type":"method"},{"path":"\/documentation\/alamofire\/session\/request(_:method:parameters:encoding:headers:interceptor:requestmodifier:)","title":"func request(URLConvertible, method: HTTPMethod, parameters: Parameters?, encoding: ParameterEncoding, headers: HTTPHeaders?, interceptor: RequestInterceptor?, requestModifier: RequestModifier?) -> DataRequest","type":"method"},{"path":"\/documentation\/alamofire\/session\/streamrequest(_:automaticallycancelonstreamerror:interceptor:)","title":"func streamRequest(URLRequestConvertible, automaticallyCancelOnStreamError: Bool, interceptor: RequestInterceptor?) -> DataStreamRequest","type":"method"},{"path":"\/documentation\/alamofire\/session\/streamrequest(_:method:headers:automaticallycancelonstreamerror:interceptor:requestmodifier:)","title":"func streamRequest(URLConvertible, method: HTTPMethod, headers: HTTPHeaders?, automaticallyCancelOnStreamError: Bool, interceptor: RequestInterceptor?, requestModifier: RequestModifier?) -> DataStreamRequest","type":"method"},{"path":"\/documentation\/alamofire\/session\/streamrequest(_:method:parameters:encoder:headers:automaticallycancelonstreamerror:interceptor:requestmodifier:)","title":"func streamRequest<Parameters>(URLConvertible, method: HTTPMethod, parameters: Parameters?, encoder: ParameterEncoder, headers: HTTPHeaders?, automaticallyCancelOnStreamError: Bool, interceptor: RequestInterceptor?, requestModifier: RequestModifier?) -> DataStreamRequest","type":"method"},{"path":"\/documentation\/alamofire\/session\/upload(_:to:method:headers:interceptor:filemanager:requestmodifier:)-7pq3v","title":"func upload(URL, to: URLConvertible, method: HTTPMethod, headers: HTTPHeaders?, interceptor: RequestInterceptor?, fileManager: FileManager, requestModifier: RequestModifier?) -> UploadRequest","type":"method"},{"path":"\/documentation\/alamofire\/session\/upload(_:to:method:headers:interceptor:filemanager:requestmodifier:)-91kar","title":"func upload(InputStream, to: URLConvertible, method: HTTPMethod, headers: HTTPHeaders?, interceptor: RequestInterceptor?, fileManager: FileManager, requestModifier: RequestModifier?) -> UploadRequest","type":"method"},{"path":"\/documentation\/alamofire\/session\/upload(_:to:method:headers:interceptor:filemanager:requestmodifier:)-o30a","title":"func upload(Data, to: URLConvertible, method: HTTPMethod, headers: HTTPHeaders?, interceptor: RequestInterceptor?, fileManager: FileManager, requestModifier: RequestModifier?) -> UploadRequest","type":"method"},{"path":"\/documentation\/alamofire\/session\/upload(_:with:interceptor:filemanager:)-1k3sr","title":"func upload(InputStream, with: URLRequestConvertible, interceptor: RequestInterceptor?, fileManager: FileManager) -> UploadRequest","type":"method"},{"path":"\/documentation\/alamofire\/session\/upload(_:with:interceptor:filemanager:)-6wjbd","title":"func upload(Data, with: URLRequestConvertible, interceptor: RequestInterceptor?, fileManager: FileManager) -> UploadRequest","type":"method"},{"path":"\/documentation\/alamofire\/session\/upload(_:with:interceptor:filemanager:)-9d2rr","title":"func upload(URL, with: URLRequestConvertible, interceptor: RequestInterceptor?, fileManager: FileManager) -> UploadRequest","type":"method"},{"path":"\/documentation\/alamofire\/session\/upload(multipartformdata:to:usingthreshold:method:headers:interceptor:filemanager:requestmodifier:)-4a2wk","title":"func upload(multipartFormData: MultipartFormData, to: URLConvertible, usingThreshold: UInt64, method: HTTPMethod, headers: HTTPHeaders?, interceptor: RequestInterceptor?, fileManager: FileManager, requestModifier: RequestModifier?) -> UploadRequest","type":"method"},{"path":"\/documentation\/alamofire\/session\/upload(multipartformdata:to:usingthreshold:method:headers:interceptor:filemanager:requestmodifier:)-86yyq","title":"func upload(multipartFormData: (MultipartFormData) -> Void, to: URLConvertible, usingThreshold: UInt64, method: HTTPMethod, headers: HTTPHeaders?, interceptor: RequestInterceptor?, fileManager: FileManager, requestModifier: RequestModifier?) -> UploadRequest","type":"method"},{"path":"\/documentation\/alamofire\/session\/upload(multipartformdata:with:usingthreshold:interceptor:filemanager:)-7ggjl","title":"func upload(multipartFormData: MultipartFormData, with: URLRequestConvertible, usingThreshold: UInt64, interceptor: RequestInterceptor?, fileManager: FileManager) -> UploadRequest","type":"method"},{"path":"\/documentation\/alamofire\/session\/upload(multipartformdata:with:usingthreshold:interceptor:filemanager:)-9sz30","title":"func upload(multipartFormData: (MultipartFormData) -> Void, with: URLRequestConvertible, usingThreshold: UInt64, interceptor: RequestInterceptor?, fileManager: FileManager) -> UploadRequest","type":"method"},{"path":"\/documentation\/alamofire\/session\/withallrequests(perform:)","title":"func withAllRequests(perform: (Set<Request>) -> Void)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/session\/requestmodifier","title":"Session.RequestModifier","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/session\/default","title":"static let `default`: Session","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/session\/sessionconfiguration","title":"var sessionConfiguration: URLSessionConfiguration","type":"property"},{"path":"\/documentation\/alamofire\/session\/startimmediately","title":"var startImmediately: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/session\/cleanup(after:)","title":"func cleanup(after: Request)","type":"method"},{"path":"\/documentation\/alamofire\/session\/retryrequest(_:withdelay:)","title":"func retryRequest(Request, withDelay: TimeInterval?)","type":"method"},{"path":"\/documentation\/alamofire\/session\/retryresult(for:dueto:completion:)","title":"func retryResult(for: Request, dueTo: AFError, completion: (RetryResult) -> Void)","type":"method"}],"path":"\/documentation\/alamofire\/session\/requestdelegate-implementations","title":"RequestDelegate Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/session","title":"Session","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/sessiondelegate\/init(filemanager:)","title":"init(fileManager: FileManager)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/sessiondelegate\/urlsession(_:datatask:didreceive:)","title":"func urlSession(URLSession, dataTask: URLSessionDataTask, didReceive: Data)","type":"method"},{"path":"\/documentation\/alamofire\/sessiondelegate\/urlsession(_:datatask:willcacheresponse:completionhandler:)","title":"func urlSession(URLSession, dataTask: URLSessionDataTask, willCacheResponse: CachedURLResponse, completionHandler: (CachedURLResponse?) -> Void)","type":"method"}],"path":"\/documentation\/alamofire\/sessiondelegate\/urlsessiondatadelegate-implementations","title":"URLSessionDataDelegate Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/sessiondelegate\/urlsession(_:didbecomeinvalidwitherror:)","title":"func urlSession(URLSession, didBecomeInvalidWithError: Error?)","type":"method"}],"path":"\/documentation\/alamofire\/sessiondelegate\/urlsessiondelegate-implementations","title":"URLSessionDelegate Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/sessiondelegate\/urlsession(_:downloadtask:didfinishdownloadingto:)","title":"func urlSession(URLSession, downloadTask: URLSessionDownloadTask, didFinishDownloadingTo: URL)","type":"method"},{"path":"\/documentation\/alamofire\/sessiondelegate\/urlsession(_:downloadtask:didresumeatoffset:expectedtotalbytes:)","title":"func urlSession(URLSession, downloadTask: URLSessionDownloadTask, didResumeAtOffset: Int64, expectedTotalBytes: Int64)","type":"method"},{"path":"\/documentation\/alamofire\/sessiondelegate\/urlsession(_:downloadtask:didwritedata:totalbyteswritten:totalbytesexpectedtowrite:)","title":"func urlSession(URLSession, downloadTask: URLSessionDownloadTask, didWriteData: Int64, totalBytesWritten: Int64, totalBytesExpectedToWrite: Int64)","type":"method"}],"path":"\/documentation\/alamofire\/sessiondelegate\/urlsessiondownloaddelegate-implementations","title":"URLSessionDownloadDelegate Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/sessiondelegate\/urlsession(_:task:didcompletewitherror:)","title":"func urlSession(URLSession, task: URLSessionTask, didCompleteWithError: Error?)","type":"method"},{"path":"\/documentation\/alamofire\/sessiondelegate\/urlsession(_:task:didfinishcollecting:)","title":"func urlSession(URLSession, task: URLSessionTask, didFinishCollecting: URLSessionTaskMetrics)","type":"method"},{"path":"\/documentation\/alamofire\/sessiondelegate\/urlsession(_:task:didreceive:completionhandler:)","title":"func urlSession(URLSession, task: URLSessionTask, didReceive: URLAuthenticationChallenge, completionHandler: (URLSession.AuthChallengeDisposition, URLCredential?) -> Void)","type":"method"},{"path":"\/documentation\/alamofire\/sessiondelegate\/urlsession(_:task:didsendbodydata:totalbytessent:totalbytesexpectedtosend:)","title":"func urlSession(URLSession, task: URLSessionTask, didSendBodyData: Int64, totalBytesSent: Int64, totalBytesExpectedToSend: Int64)","type":"method"},{"path":"\/documentation\/alamofire\/sessiondelegate\/urlsession(_:task:neednewbodystream:)","title":"func urlSession(URLSession, task: URLSessionTask, needNewBodyStream: (InputStream?) -> Void)","type":"method"},{"path":"\/documentation\/alamofire\/sessiondelegate\/urlsession(_:task:willperformhttpredirection:newrequest:completionhandler:)","title":"func urlSession(URLSession, task: URLSessionTask, willPerformHTTPRedirection: HTTPURLResponse, newRequest: URLRequest, completionHandler: (URLRequest?) -> Void)","type":"method"},{"path":"\/documentation\/alamofire\/sessiondelegate\/urlsession(_:taskiswaitingforconnectivity:)","title":"func urlSession(URLSession, taskIsWaitingForConnectivity: URLSessionTask)","type":"method"}],"path":"\/documentation\/alamofire\/sessiondelegate\/urlsessiontaskdelegate-implementations","title":"URLSessionTaskDelegate Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/sessiondelegate","title":"SessionDelegate","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/stringresponseserializer\/init(datapreprocessor:encoding:emptyresponsecodes:emptyrequestmethods:)","title":"init(dataPreprocessor: DataPreprocessor, encoding: String.Encoding?, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/stringresponseserializer\/datapreprocessor-ampd","title":"let dataPreprocessor: DataPreprocessor","type":"property"},{"path":"\/documentation\/alamofire\/stringresponseserializer\/emptyrequestmethods-8clza","title":"let emptyRequestMethods: Set<HTTPMethod>","type":"property"},{"path":"\/documentation\/alamofire\/stringresponseserializer\/emptyresponsecodes-30ajy","title":"let emptyResponseCodes: Set<Int>","type":"property"},{"path":"\/documentation\/alamofire\/stringresponseserializer\/encoding","title":"let encoding: String.Encoding?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/stringresponseserializer\/serialize(request:response:data:error:)","title":"func serialize(request: URLRequest?, response: HTTPURLResponse?, data: Data?, error: Error?) throws -> String","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/stringresponseserializer\/serializedownload(request:response:fileurl:error:)","title":"func serializeDownload(request: URLRequest?, response: HTTPURLResponse?, fileURL: URL?, error: Error?) throws -> Self.SerializedObject","type":"method"}],"path":"\/documentation\/alamofire\/stringresponseserializer\/downloadresponseserializerprotocol-implementations","title":"DownloadResponseSerializerProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/stringresponseserializer\/datapreprocessor-9cu5d","title":"var dataPreprocessor: DataPreprocessor","type":"property"},{"path":"\/documentation\/alamofire\/stringresponseserializer\/emptyrequestmethods-86nf0","title":"var emptyRequestMethods: Set<HTTPMethod>","type":"property"},{"path":"\/documentation\/alamofire\/stringresponseserializer\/emptyresponsecodes-45tdm","title":"var emptyResponseCodes: Set<Int>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/stringresponseserializer\/emptyresponseallowed(forrequest:response:)","title":"func emptyResponseAllowed(forRequest: URLRequest?, response: HTTPURLResponse?) -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/stringresponseserializer\/requestallowsemptyresponsedata(_:)","title":"func requestAllowsEmptyResponseData(URLRequest?) -> Bool?","type":"method"},{"path":"\/documentation\/alamofire\/stringresponseserializer\/responseallowsemptyresponsedata(_:)","title":"func responseAllowsEmptyResponseData(HTTPURLResponse?) -> Bool?","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/stringresponseserializer\/defaultdatapreprocessor","title":"static var defaultDataPreprocessor: DataPreprocessor","type":"property"},{"path":"\/documentation\/alamofire\/stringresponseserializer\/defaultemptyrequestmethods","title":"static var defaultEmptyRequestMethods: Set<HTTPMethod>","type":"property"},{"path":"\/documentation\/alamofire\/stringresponseserializer\/defaultemptyresponsecodes","title":"static var defaultEmptyResponseCodes: Set<Int>","type":"property"},{"path":"\/documentation\/alamofire\/stringresponseserializer\/string","title":"static var string: StringResponseSerializer","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/stringresponseserializer\/decodable(of:datapreprocessor:decoder:emptyresponsecodes:emptyrequestmethods:)","title":"static func decodable<T>(of: T.Type, dataPreprocessor: DataPreprocessor, decoder: DataDecoder, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>) -> DecodableResponseSerializer<T>","type":"method"},{"path":"\/documentation\/alamofire\/stringresponseserializer\/string(datapreprocessor:encoding:emptyresponsecodes:emptyrequestmethods:)","title":"static func string(dataPreprocessor: DataPreprocessor, encoding: String.Encoding?, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>) -> StringResponseSerializer","type":"method"}],"path":"\/documentation\/alamofire\/stringresponseserializer\/responseserializer-implementations","title":"ResponseSerializer Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/stringresponseserializer","title":"StringResponseSerializer","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/init(alphabetizekeyvaluepairs:arrayencoding:boolencoding:dataencoding:dateencoding:keyencoding:spaceencoding:allowedcharacters:)","title":"init(alphabetizeKeyValuePairs: Bool, arrayEncoding: ArrayEncoding, boolEncoding: BoolEncoding, dataEncoding: DataEncoding, dateEncoding: DateEncoding, keyEncoding: KeyEncoding, spaceEncoding: SpaceEncoding, allowedCharacters: CharacterSet)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/allowedcharacters","title":"var allowedCharacters: CharacterSet","type":"property"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/alphabetizekeyvaluepairs","title":"let alphabetizeKeyValuePairs: Bool","type":"property"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/arrayencoding-swift.property","title":"let arrayEncoding: ArrayEncoding","type":"property"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/boolencoding-swift.property","title":"let boolEncoding: BoolEncoding","type":"property"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/dataencoding-swift.property","title":"let dataEncoding: DataEncoding","type":"property"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/dateencoding-swift.property","title":"let dateEncoding: DateEncoding","type":"property"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/keyencoding-swift.property","title":"let keyEncoding: KeyEncoding","type":"property"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/spaceencoding-swift.property","title":"let spaceEncoding: SpaceEncoding","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/encode(_:)-58lp0","title":"func encode(Encodable) throws -> String","type":"method"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/encode(_:)-7zbgf","title":"func encode(Encodable) throws -> Data","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/arrayencoding-swift.enum\/brackets","title":"case brackets","type":"case"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/arrayencoding-swift.enum\/indexinbrackets","title":"case indexInBrackets","type":"case"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/arrayencoding-swift.enum\/nobrackets","title":"case noBrackets","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/arrayencoding-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/alamofire\/urlencodedformencoder\/arrayencoding-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/urlencodedformencoder\/arrayencoding-swift.enum","title":"URLEncodedFormEncoder.ArrayEncoding","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/boolencoding-swift.enum\/literal","title":"case literal","type":"case"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/boolencoding-swift.enum\/numeric","title":"case numeric","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/boolencoding-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/alamofire\/urlencodedformencoder\/boolencoding-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/urlencodedformencoder\/boolencoding-swift.enum","title":"URLEncodedFormEncoder.BoolEncoding","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/dataencoding-swift.enum\/base64","title":"case base64","type":"case"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/dataencoding-swift.enum\/custom(_:)","title":"case custom((Data) throws -> String)","type":"case"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/dataencoding-swift.enum\/deferredtodata","title":"case deferredToData","type":"case"}],"path":"\/documentation\/alamofire\/urlencodedformencoder\/dataencoding-swift.enum","title":"URLEncodedFormEncoder.DataEncoding","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/dateencoding-swift.enum\/custom(_:)","title":"case custom((Date) throws -> String)","type":"case"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/dateencoding-swift.enum\/deferredtodate","title":"case deferredToDate","type":"case"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/dateencoding-swift.enum\/formatted(_:)","title":"case formatted(DateFormatter)","type":"case"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/dateencoding-swift.enum\/iso8601","title":"case iso8601","type":"case"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/dateencoding-swift.enum\/millisecondssince1970","title":"case millisecondsSince1970","type":"case"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/dateencoding-swift.enum\/secondssince1970","title":"case secondsSince1970","type":"case"}],"path":"\/documentation\/alamofire\/urlencodedformencoder\/dateencoding-swift.enum","title":"URLEncodedFormEncoder.DateEncoding","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/error\/invalidrootobject(_:)","title":"case invalidRootObject(String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/error\/asaferror","title":"var asAFError: AFError?","type":"property"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/error\/localizeddescription","title":"var localizedDescription: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/error\/asaferror(orfailwith:file:line:)","title":"func asAFError(orFailWith: () -> String, file: StaticString, line: UInt) -> AFError","type":"method"}],"path":"\/documentation\/alamofire\/urlencodedformencoder\/error\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/urlencodedformencoder\/error","title":"URLEncodedFormEncoder.Error","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/keyencoding-swift.enum\/capitalized","title":"case capitalized","type":"case"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/keyencoding-swift.enum\/converttokebabcase","title":"case convertToKebabCase","type":"case"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/keyencoding-swift.enum\/converttosnakecase","title":"case convertToSnakeCase","type":"case"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/keyencoding-swift.enum\/custom(_:)","title":"case custom((String) -> String)","type":"case"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/keyencoding-swift.enum\/lowercased","title":"case lowercased","type":"case"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/keyencoding-swift.enum\/uppercased","title":"case uppercased","type":"case"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/keyencoding-swift.enum\/usedefaultkeys","title":"case useDefaultKeys","type":"case"}],"path":"\/documentation\/alamofire\/urlencodedformencoder\/keyencoding-swift.enum","title":"URLEncodedFormEncoder.KeyEncoding","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/spaceencoding-swift.enum\/percentescaped","title":"case percentEscaped","type":"case"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/spaceencoding-swift.enum\/plusreplaced","title":"case plusReplaced","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencodedformencoder\/spaceencoding-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/alamofire\/urlencodedformencoder\/spaceencoding-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/urlencodedformencoder\/spaceencoding-swift.enum","title":"URLEncodedFormEncoder.SpaceEncoding","type":"enum"}],"path":"\/documentation\/alamofire\/urlencodedformencoder","title":"URLEncodedFormEncoder","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencodedformparameterencoder\/init(encoder:destination:)","title":"init(encoder: URLEncodedFormEncoder, destination: Destination)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencodedformparameterencoder\/destination-swift.property","title":"let destination: Destination","type":"property"},{"path":"\/documentation\/alamofire\/urlencodedformparameterencoder\/encoder","title":"let encoder: URLEncodedFormEncoder","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencodedformparameterencoder\/encode(_:into:)","title":"func encode<Parameters>(Parameters?, into: URLRequest) throws -> URLRequest","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencodedformparameterencoder\/default","title":"static var `default`: URLEncodedFormParameterEncoder","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencodedformparameterencoder\/destination-swift.enum\/httpbody","title":"case httpBody","type":"case"},{"path":"\/documentation\/alamofire\/urlencodedformparameterencoder\/destination-swift.enum\/methoddependent","title":"case methodDependent","type":"case"},{"path":"\/documentation\/alamofire\/urlencodedformparameterencoder\/destination-swift.enum\/querystring","title":"case queryString","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencodedformparameterencoder\/destination-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/alamofire\/urlencodedformparameterencoder\/destination-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/urlencodedformparameterencoder\/destination-swift.enum","title":"URLEncodedFormParameterEncoder.Destination","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencodedformparameterencoder\/urlencodedform","title":"static var urlEncodedForm: URLEncodedFormParameterEncoder","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencodedformparameterencoder\/urlencodedform(encoder:destination:)","title":"static func urlEncodedForm(encoder: URLEncodedFormEncoder, destination: URLEncodedFormParameterEncoder.Destination) -> URLEncodedFormParameterEncoder","type":"method"}],"path":"\/documentation\/alamofire\/urlencodedformparameterencoder\/parameterencoder-implementations","title":"ParameterEncoder Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/urlencodedformparameterencoder","title":"URLEncodedFormParameterEncoder","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/uploadrequest\/filemanager","title":"let fileManager: FileManager","type":"property"},{"path":"\/documentation\/alamofire\/uploadrequest\/upload","title":"let upload: UploadableConvertible","type":"property"},{"path":"\/documentation\/alamofire\/uploadrequest\/uploadable-swift.property","title":"var uploadable: Uploadable?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/uploadrequest\/cleanup()","title":"func cleanup()","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/uploadrequest\/uploadable-swift.enum\/data(_:)","title":"case data(Data)","type":"case"},{"path":"\/documentation\/alamofire\/uploadrequest\/uploadable-swift.enum\/file(_:shouldremove:)","title":"case file(URL, shouldRemove: Bool)","type":"case"},{"path":"\/documentation\/alamofire\/uploadrequest\/uploadable-swift.enum\/stream(_:)","title":"case stream(InputStream)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/uploadrequest\/uploadable-swift.enum\/createuploadable()","title":"func createUploadable() throws -> UploadRequest.Uploadable","type":"method"}],"path":"\/documentation\/alamofire\/uploadrequest\/uploadable-swift.enum\/uploadableconvertible-implementations","title":"UploadableConvertible Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/uploadrequest\/uploadable-swift.enum","title":"UploadRequest.Uploadable","type":"enum"}],"path":"\/documentation\/alamofire\/uploadrequest","title":"UploadRequest","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/alamofire\/alamofireextended\/extendedtype","title":"ExtendedType","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/alamofireextended\/af-swift.property-87wck","title":"var af: AlamofireExtension<Self>","type":"property"},{"path":"\/documentation\/alamofire\/alamofireextended\/af-swift.type.property-7ed55","title":"static var af: AlamofireExtension<Self>.Type","type":"property"}],"title":"AlamofireExtended Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/alamofireextended\/af-swift.property-98w2s","title":"var af: AlamofireExtension<ExtendedType>","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/alamofireextended\/af-swift.property-87wck","title":"var af: AlamofireExtension<Self>","type":"property"},{"path":"\/documentation\/alamofire\/alamofireextended\/af-swift.type.property-7ed55","title":"static var af: AlamofireExtension<Self>.Type","type":"property"}],"title":"AlamofireExtended Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/alamofireextended\/af-swift.type.property-iw7g","title":"static var af: AlamofireExtension<ExtendedType>.Type","type":"property"}],"path":"\/documentation\/alamofire\/alamofireextended","title":"AlamofireExtended","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/authenticationcredential\/requiresrefresh","title":"var requiresRefresh: Bool","type":"property"}],"path":"\/documentation\/alamofire\/authenticationcredential","title":"AuthenticationCredential","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/alamofire\/authenticator\/credential","title":"Credential","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/authenticator\/apply(_:to:)","title":"func apply(Credential, to: inout URLRequest)","type":"method"},{"path":"\/documentation\/alamofire\/authenticator\/didrequest(_:with:failduetoauthenticationerror:)","title":"func didRequest(URLRequest, with: HTTPURLResponse, failDueToAuthenticationError: Error) -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/authenticator\/isrequest(_:authenticatedwith:)","title":"func isRequest(URLRequest, authenticatedWith: Credential) -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/authenticator\/refresh(_:for:completion:)","title":"func refresh(Credential, for: Session, completion: (Result<Credential, Error>) -> Void)","type":"method"}],"path":"\/documentation\/alamofire\/authenticator","title":"Authenticator","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/cachedresponsehandler\/datatask(_:willcacheresponse:completion:)","title":"func dataTask(URLSessionDataTask, willCacheResponse: CachedURLResponse, completion: (CachedURLResponse?) -> Void)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/cachedresponsehandler\/cache","title":"static var cache: ResponseCacher","type":"property"},{"path":"\/documentation\/alamofire\/cachedresponsehandler\/donotcache","title":"static var doNotCache: ResponseCacher","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/cachedresponsehandler\/modify(using:)","title":"static func modify(using: ((URLSessionDataTask, CachedURLResponse) -> CachedURLResponse?)) -> ResponseCacher","type":"method"}],"path":"\/documentation\/alamofire\/cachedresponsehandler","title":"CachedResponseHandler","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datadecoder\/decode(_:from:)","title":"func decode<D>(D.Type, from: Data) throws -> D","type":"method"}],"path":"\/documentation\/alamofire\/datadecoder","title":"DataDecoder","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datapreprocessor\/preprocess(_:)","title":"func preprocess(Data) throws -> Data","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datapreprocessor\/googlexssi","title":"static var googleXSSI: GoogleXSSIPreprocessor","type":"property"},{"path":"\/documentation\/alamofire\/datapreprocessor\/passthrough","title":"static var passthrough: PassthroughPreprocessor","type":"property"}],"path":"\/documentation\/alamofire\/datapreprocessor","title":"DataPreprocessor","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/alamofire\/dataresponseserializerprotocol\/serializedobject","title":"SerializedObject","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/dataresponseserializerprotocol\/serialize(request:response:data:error:)","title":"func serialize(request: URLRequest?, response: HTTPURLResponse?, data: Data?, error: Error?) throws -> SerializedObject","type":"method"}],"path":"\/documentation\/alamofire\/dataresponseserializerprotocol","title":"DataResponseSerializerProtocol","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datastreamserializer\/serializedobject","title":"SerializedObject","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datastreamserializer\/serialize(_:)","title":"func serialize(Data) throws -> SerializedObject","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datastreamserializer\/passthrough","title":"static var passthrough: PassthroughStreamSerializer","type":"property"},{"path":"\/documentation\/alamofire\/datastreamserializer\/string","title":"static var string: StringStreamSerializer","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datastreamserializer\/decodable(of:decoder:datapreprocessor:)","title":"static func decodable<T>(of: T.Type, decoder: DataDecoder, dataPreprocessor: DataPreprocessor) -> Self","type":"method"}],"path":"\/documentation\/alamofire\/datastreamserializer","title":"DataStreamSerializer","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadresponseserializerprotocol\/serializedobject","title":"SerializedObject","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/downloadresponseserializerprotocol\/serializedownload(request:response:fileurl:error:)-79cbc","title":"func serializeDownload(request: URLRequest?, response: HTTPURLResponse?, fileURL: URL?, error: Error?) throws -> Self.SerializedObject","type":"method"}],"title":"DownloadResponseSerializerProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/downloadresponseserializerprotocol\/serializedownload(request:response:fileurl:error:)-1ezfb","title":"func serializeDownload(request: URLRequest?, response: HTTPURLResponse?, fileURL: URL?, error: Error?) throws -> SerializedObject","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadresponseserializerprotocol\/url","title":"static var url: URLResponseSerializer","type":"property"}],"path":"\/documentation\/alamofire\/downloadresponseserializerprotocol","title":"DownloadResponseSerializerProtocol","type":"protocol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/emptyresponse\/emptyvalue()","title":"static func emptyValue() -> Self","type":"method"}],"path":"\/documentation\/alamofire\/emptyresponse","title":"EmptyResponse","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/queue-6luhs","title":"var queue: DispatchQueue","type":"property"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/queue-6lttz","title":"var queue: DispatchQueue","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didadaptinitialrequest:to:)-8wq8o","title":"func request(Request, didAdaptInitialRequest: URLRequest, to: URLRequest)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didadaptinitialrequest:to:)-9o7xr","title":"func request(Request, didAdaptInitialRequest: URLRequest, to: URLRequest)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didcanceltask:)-8e7j2","title":"func request(Request, didCancelTask: URLSessionTask)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didcanceltask:)-1civb","title":"func request(Request, didCancelTask: URLSessionTask)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didcompletetask:with:)-5b46r","title":"func request(Request, didCompleteTask: URLSessionTask, with: AFError?)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didcompletetask:with:)-5u2sj","title":"func request(Request, didCompleteTask: URLSessionTask, with: AFError?)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didcreatedestinationurl:)-4037h","title":"func request(DownloadRequest, didCreateDestinationURL: URL)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didcreatedestinationurl:)-51eg0","title":"func request(DownloadRequest, didCreateDestinationURL: URL)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didcreateinitialurlrequest:)-21n9d","title":"func request(Request, didCreateInitialURLRequest: URLRequest)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didcreateinitialurlrequest:)-kbwa","title":"func request(Request, didCreateInitialURLRequest: URLRequest)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didcreatetask:)-4hdg6","title":"func request(Request, didCreateTask: URLSessionTask)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didcreatetask:)-9ahty","title":"func request(Request, didCreateTask: URLSessionTask)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didcreateurlrequest:)-6wjl0","title":"func request(Request, didCreateURLRequest: URLRequest)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didcreateurlrequest:)-8e7su","title":"func request(Request, didCreateURLRequest: URLRequest)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didcreateuploadable:)-qgy6","title":"func request(UploadRequest, didCreateUploadable: UploadRequest.Uploadable)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didcreateuploadable:)-85h75","title":"func request(UploadRequest, didCreateUploadable: UploadRequest.Uploadable)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didfailtask:earlywitherror:)-4cz7s","title":"func request(Request, didFailTask: URLSessionTask, earlyWithError: AFError)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didfailtask:earlywitherror:)-2vbaa","title":"func request(Request, didFailTask: URLSessionTask, earlyWithError: AFError)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didfailtoadapturlrequest:witherror:)-3f71v","title":"func request(Request, didFailToAdaptURLRequest: URLRequest, withError: AFError)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didfailtoadapturlrequest:witherror:)-3ch74","title":"func request(Request, didFailToAdaptURLRequest: URLRequest, withError: AFError)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didfailtocreateurlrequestwitherror:)-3wi1s","title":"func request(Request, didFailToCreateURLRequestWithError: AFError)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didfailtocreateurlrequestwitherror:)-5m4z7","title":"func request(Request, didFailToCreateURLRequestWithError: AFError)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didfailtocreateuploadablewitherror:)-9ydv4","title":"func request(UploadRequest, didFailToCreateUploadableWithError: AFError)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didfailtocreateuploadablewitherror:)-7u1lv","title":"func request(UploadRequest, didFailToCreateUploadableWithError: AFError)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didfinishdownloadingusing:with:)-1su78","title":"func request(DownloadRequest, didFinishDownloadingUsing: URLSessionTask, with: Result<URL, AFError>)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didfinishdownloadingusing:with:)-l26","title":"func request(DownloadRequest, didFinishDownloadingUsing: URLSessionTask, with: Result<URL, AFError>)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didgathermetrics:)-9fxj2","title":"func request(Request, didGatherMetrics: URLSessionTaskMetrics)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didgathermetrics:)-72yk3","title":"func request(Request, didGatherMetrics: URLSessionTaskMetrics)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didparseresponse:)-3vq5f","title":"func request(DataRequest, didParseResponse: DataResponse<Data?, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didparseresponse:)-93jnn","title":"func request(DownloadRequest, didParseResponse: DownloadResponse<URL?, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didparseresponse:)-37d8o","title":"func request<Value>(DataRequest, didParseResponse: DataResponse<Value, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didparseresponse:)-53liq","title":"func request<Value>(DownloadRequest, didParseResponse: DownloadResponse<Value, AFError>)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didparseresponse:)-1bi6w","title":"func request<Value>(DataRequest, didParseResponse: DataResponse<Value, AFError>)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didparseresponse:)-53liq","title":"func request<Value>(DownloadRequest, didParseResponse: DownloadResponse<Value, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didparseresponse:)-37d8o","title":"func request<Value>(DataRequest, didParseResponse: DataResponse<Value, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didparseresponse:)-93jnn","title":"func request(DownloadRequest, didParseResponse: DownloadResponse<URL?, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didparseresponse:)-3vq5f","title":"func request(DataRequest, didParseResponse: DataResponse<Data?, AFError>)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didparseresponse:)-2bkwc","title":"func request<Value>(DownloadRequest, didParseResponse: DownloadResponse<Value, AFError>)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didparseresponse:)-53liq","title":"func request<Value>(DownloadRequest, didParseResponse: DownloadResponse<Value, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didparseresponse:)-37d8o","title":"func request<Value>(DataRequest, didParseResponse: DataResponse<Value, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didparseresponse:)-3vq5f","title":"func request(DataRequest, didParseResponse: DataResponse<Data?, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didparseresponse:)-93jnn","title":"func request(DownloadRequest, didParseResponse: DownloadResponse<URL?, AFError>)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didparseresponse:)-80e0z","title":"func request(DownloadRequest, didParseResponse: DownloadResponse<URL?, AFError>)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didparseresponse:)-37d8o","title":"func request<Value>(DataRequest, didParseResponse: DataResponse<Value, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didparseresponse:)-93jnn","title":"func request(DownloadRequest, didParseResponse: DownloadResponse<URL?, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didparseresponse:)-3vq5f","title":"func request(DataRequest, didParseResponse: DataResponse<Data?, AFError>)","type":"method"},{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didparseresponse:)-53liq","title":"func request<Value>(DownloadRequest, didParseResponse: DownloadResponse<Value, AFError>)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didparseresponse:)-elo3","title":"func request(DataRequest, didParseResponse: DataResponse<Data?, AFError>)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didparsestream:)-269k8","title":"func request<Value>(DataStreamRequest, didParseStream: Result<Value, AFError>)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didparsestream:)-2o00e","title":"func request<Value>(DataStreamRequest, didParseStream: Result<Value, AFError>)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didprovideinputstream:)-2kg1s","title":"func request(UploadRequest, didProvideInputStream: InputStream)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didprovideinputstream:)-6q09h","title":"func request(UploadRequest, didProvideInputStream: InputStream)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didresumetask:)-23uh1","title":"func request(Request, didResumeTask: URLSessionTask)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didresumetask:)-5qkob","title":"func request(Request, didResumeTask: URLSessionTask)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didsuspendtask:)-7l52t","title":"func request(Request, didSuspendTask: URLSessionTask)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didsuspendtask:)-98cjf","title":"func request(Request, didSuspendTask: URLSessionTask)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didvalidaterequest:response:data:withresult:)-8sds2","title":"func request(DataRequest, didValidateRequest: URLRequest?, response: HTTPURLResponse, data: Data?, withResult: Request.ValidationResult)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didvalidaterequest:response:data:withresult:)-6jzo3","title":"func request(DataRequest, didValidateRequest: URLRequest?, response: HTTPURLResponse, data: Data?, withResult: Request.ValidationResult)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didvalidaterequest:response:fileurl:withresult:)-9t4as","title":"func request(DownloadRequest, didValidateRequest: URLRequest?, response: HTTPURLResponse, fileURL: URL?, withResult: Request.ValidationResult)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didvalidaterequest:response:fileurl:withresult:)-4455t","title":"func request(DownloadRequest, didValidateRequest: URLRequest?, response: HTTPURLResponse, fileURL: URL?, withResult: Request.ValidationResult)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didvalidaterequest:response:withresult:)-5xjld","title":"func request(DataStreamRequest, didValidateRequest: URLRequest?, response: HTTPURLResponse, withResult: Request.ValidationResult)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/request(_:didvalidaterequest:response:withresult:)-65vwv","title":"func request(DataStreamRequest, didValidateRequest: URLRequest?, response: HTTPURLResponse, withResult: Request.ValidationResult)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/requestdidcancel(_:)-5ji4n","title":"func requestDidCancel(Request)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/requestdidcancel(_:)-390y6","title":"func requestDidCancel(Request)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/requestdidfinish(_:)-8xt80","title":"func requestDidFinish(Request)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/requestdidfinish(_:)-wrzt","title":"func requestDidFinish(Request)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/requestdidresume(_:)-479u4","title":"func requestDidResume(Request)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/requestdidresume(_:)-1hdq9","title":"func requestDidResume(Request)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/requestdidsuspend(_:)-k6do","title":"func requestDidSuspend(Request)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/requestdidsuspend(_:)-6yg2p","title":"func requestDidSuspend(Request)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/requestisretrying(_:)-7xqj3","title":"func requestIsRetrying(Request)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/requestisretrying(_:)-584yb","title":"func requestIsRetrying(Request)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:datatask:didreceive:)-3k5fj","title":"func urlSession(URLSession, dataTask: URLSessionDataTask, didReceive: Data)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:datatask:didreceive:)-quh1","title":"func urlSession(URLSession, dataTask: URLSessionDataTask, didReceive: Data)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:datatask:willcacheresponse:)-3l0gj","title":"func urlSession(URLSession, dataTask: URLSessionDataTask, willCacheResponse: CachedURLResponse)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:datatask:willcacheresponse:)-60an4","title":"func urlSession(URLSession, dataTask: URLSessionDataTask, willCacheResponse: CachedURLResponse)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:didbecomeinvalidwitherror:)-42hq2","title":"func urlSession(URLSession, didBecomeInvalidWithError: Error?)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:didbecomeinvalidwitherror:)-1owme","title":"func urlSession(URLSession, didBecomeInvalidWithError: Error?)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:downloadtask:didfinishdownloadingto:)-60klc","title":"func urlSession(URLSession, downloadTask: URLSessionDownloadTask, didFinishDownloadingTo: URL)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:downloadtask:didfinishdownloadingto:)-2vzpu","title":"func urlSession(URLSession, downloadTask: URLSessionDownloadTask, didFinishDownloadingTo: URL)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:downloadtask:didresumeatoffset:expectedtotalbytes:)-275km","title":"func urlSession(URLSession, downloadTask: URLSessionDownloadTask, didResumeAtOffset: Int64, expectedTotalBytes: Int64)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:downloadtask:didresumeatoffset:expectedtotalbytes:)-5z51e","title":"func urlSession(URLSession, downloadTask: URLSessionDownloadTask, didResumeAtOffset: Int64, expectedTotalBytes: Int64)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:downloadtask:didwritedata:totalbyteswritten:totalbytesexpectedtowrite:)-9ufdp","title":"func urlSession(URLSession, downloadTask: URLSessionDownloadTask, didWriteData: Int64, totalBytesWritten: Int64, totalBytesExpectedToWrite: Int64)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:downloadtask:didwritedata:totalbyteswritten:totalbytesexpectedtowrite:)-1uwwb","title":"func urlSession(URLSession, downloadTask: URLSessionDownloadTask, didWriteData: Int64, totalBytesWritten: Int64, totalBytesExpectedToWrite: Int64)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:task:didcompletewitherror:)-lbh2","title":"func urlSession(URLSession, task: URLSessionTask, didCompleteWithError: Error?)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:task:didcompletewitherror:)-5luhc","title":"func urlSession(URLSession, task: URLSessionTask, didCompleteWithError: Error?)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:task:didfinishcollecting:)-3zbwj","title":"func urlSession(URLSession, task: URLSessionTask, didFinishCollecting: URLSessionTaskMetrics)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:task:didfinishcollecting:)-5lw6p","title":"func urlSession(URLSession, task: URLSessionTask, didFinishCollecting: URLSessionTaskMetrics)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:task:didreceive:)-1l62s","title":"func urlSession(URLSession, task: URLSessionTask, didReceive: URLAuthenticationChallenge)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:task:didreceive:)-5taqp","title":"func urlSession(URLSession, task: URLSessionTask, didReceive: URLAuthenticationChallenge)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:task:didsendbodydata:totalbytessent:totalbytesexpectedtosend:)-4zrgq","title":"func urlSession(URLSession, task: URLSessionTask, didSendBodyData: Int64, totalBytesSent: Int64, totalBytesExpectedToSend: Int64)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:task:didsendbodydata:totalbytessent:totalbytesexpectedtosend:)-65y0","title":"func urlSession(URLSession, task: URLSessionTask, didSendBodyData: Int64, totalBytesSent: Int64, totalBytesExpectedToSend: Int64)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:task:willperformhttpredirection:newrequest:)-6vdtq","title":"func urlSession(URLSession, task: URLSessionTask, willPerformHTTPRedirection: HTTPURLResponse, newRequest: URLRequest)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:task:willperformhttpredirection:newrequest:)-wx70","title":"func urlSession(URLSession, task: URLSessionTask, willPerformHTTPRedirection: HTTPURLResponse, newRequest: URLRequest)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:taskiswaitingforconnectivity:)-3ifnu","title":"func urlSession(URLSession, taskIsWaitingForConnectivity: URLSessionTask)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:taskiswaitingforconnectivity:)-8zfxo","title":"func urlSession(URLSession, taskIsWaitingForConnectivity: URLSessionTask)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:taskneedsnewbodystream:)-2pr8w","title":"func urlSession(URLSession, taskNeedsNewBodyStream: URLSessionTask)","type":"method"}],"title":"EventMonitor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/eventmonitor\/urlsession(_:taskneedsnewbodystream:)-3gxlo","title":"func urlSession(URLSession, taskNeedsNewBodyStream: URLSessionTask)","type":"method"}],"path":"\/documentation\/alamofire\/eventmonitor","title":"EventMonitor","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/parameterencoder\/encode(_:into:)","title":"func encode<Parameters>(Parameters?, into: URLRequest) throws -> URLRequest","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/parameterencoder\/json","title":"static var json: JSONParameterEncoder","type":"property"},{"path":"\/documentation\/alamofire\/parameterencoder\/urlencodedform","title":"static var urlEncodedForm: URLEncodedFormParameterEncoder","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/parameterencoder\/json(encoder:)","title":"static func json(encoder: JSONEncoder) -> JSONParameterEncoder","type":"method"},{"path":"\/documentation\/alamofire\/parameterencoder\/urlencodedform(encoder:destination:)","title":"static func urlEncodedForm(encoder: URLEncodedFormEncoder, destination: URLEncodedFormParameterEncoder.Destination) -> URLEncodedFormParameterEncoder","type":"method"}],"path":"\/documentation\/alamofire\/parameterencoder","title":"ParameterEncoder","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/parameterencoding\/encode(_:with:)","title":"func encode(URLRequestConvertible, with: Parameters?) throws -> URLRequest","type":"method"}],"path":"\/documentation\/alamofire\/parameterencoding","title":"ParameterEncoding","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/redirecthandler\/task(_:willberedirectedto:for:completion:)","title":"func task(URLSessionTask, willBeRedirectedTo: URLRequest, for: HTTPURLResponse, completion: (URLRequest?) -> Void)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/redirecthandler\/donotfollow","title":"static var doNotFollow: Redirector","type":"property"},{"path":"\/documentation\/alamofire\/redirecthandler\/follow","title":"static var follow: Redirector","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/redirecthandler\/modify(using:)","title":"static func modify(using: (URLSessionTask, URLRequest, HTTPURLResponse) -> URLRequest?) -> Redirector","type":"method"}],"path":"\/documentation\/alamofire\/redirecthandler","title":"RedirectHandler","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/requestinterceptor\/adapt(_:for:completion:)","title":"func adapt(URLRequest, for: Session, completion: (Result<URLRequest, Error>) -> Void)","type":"method"}],"title":"RequestInterceptor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/requestadapter\/adapt(_:for:completion:)","title":"func adapt(URLRequest, for: Session, completion: (Result<URLRequest, Error>) -> Void)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/requestadapter\/adapt(_:using:completion:)-4galo","title":"func adapt(URLRequest, using: RequestAdapterState, completion: (Result<URLRequest, Error>) -> Void)","type":"method"}],"title":"RequestAdapter Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/requestadapter\/adapt(_:using:completion:)-xbmy","title":"func adapt(URLRequest, using: RequestAdapterState, completion: (Result<URLRequest, Error>) -> Void)","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/requestadapter\/adapter(using:)","title":"static func adapter(using: AdaptHandler) -> Adapter","type":"method"}],"path":"\/documentation\/alamofire\/requestadapter","title":"RequestAdapter","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/requestdelegate\/sessionconfiguration","title":"var sessionConfiguration: URLSessionConfiguration","type":"property"},{"path":"\/documentation\/alamofire\/requestdelegate\/startimmediately","title":"var startImmediately: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/requestdelegate\/cleanup(after:)","title":"func cleanup(after: Request)","type":"method"},{"path":"\/documentation\/alamofire\/requestdelegate\/retryrequest(_:withdelay:)","title":"func retryRequest(Request, withDelay: TimeInterval?)","type":"method"},{"path":"\/documentation\/alamofire\/requestdelegate\/retryresult(for:dueto:completion:)","title":"func retryResult(for: Request, dueTo: AFError, completion: (RetryResult) -> Void)","type":"method"}],"path":"\/documentation\/alamofire\/requestdelegate","title":"RequestDelegate","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/requestinterceptor\/connectionlostretrypolicy","title":"static var connectionLostRetryPolicy: ConnectionLostRetryPolicy","type":"property"},{"path":"\/documentation\/alamofire\/requestinterceptor\/retrypolicy","title":"static var retryPolicy: RetryPolicy","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/requestinterceptor\/connectionlostretrypolicy(retrylimit:exponentialbackoffbase:exponentialbackoffscale:retryablehttpmethods:)","title":"static func connectionLostRetryPolicy(retryLimit: UInt, exponentialBackoffBase: UInt, exponentialBackoffScale: Double, retryableHTTPMethods: Set<HTTPMethod>) -> ConnectionLostRetryPolicy","type":"method"},{"path":"\/documentation\/alamofire\/requestinterceptor\/interceptor(adapter:retrier:)-33scc","title":"static func interceptor(adapter: AdaptHandler, retrier: RetryHandler) -> Interceptor","type":"method"},{"path":"\/documentation\/alamofire\/requestinterceptor\/interceptor(adapter:retrier:)-5sffk","title":"static func interceptor(adapter: RequestAdapter, retrier: RequestRetrier) -> Interceptor","type":"method"},{"path":"\/documentation\/alamofire\/requestinterceptor\/interceptor(adapters:retriers:interceptors:)","title":"static func interceptor(adapters: [RequestAdapter], retriers: [RequestRetrier], interceptors: [RequestInterceptor]) -> Interceptor","type":"method"},{"path":"\/documentation\/alamofire\/requestinterceptor\/retrypolicy(retrylimit:exponentialbackoffbase:exponentialbackoffscale:retryablehttpmethods:retryablehttpstatuscodes:retryableurlerrorcodes:)","title":"static func retryPolicy(retryLimit: UInt, exponentialBackoffBase: UInt, exponentialBackoffScale: Double, retryableHTTPMethods: Set<HTTPMethod>, retryableHTTPStatusCodes: Set<Int>, retryableURLErrorCodes: Set<URLError.Code>) -> RetryPolicy","type":"method"}],"path":"\/documentation\/alamofire\/requestinterceptor","title":"RequestInterceptor","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/requestinterceptor\/retry(_:for:dueto:completion:)","title":"func retry(Request, for: Session, dueTo: Error, completion: (RetryResult) -> Void)","type":"method"}],"title":"RequestInterceptor Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/requestretrier\/retry(_:for:dueto:completion:)","title":"func retry(Request, for: Session, dueTo: Error, completion: (RetryResult) -> Void)","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/requestretrier\/retrier(using:)","title":"static func retrier(using: RetryHandler) -> Retrier","type":"method"}],"path":"\/documentation\/alamofire\/requestretrier","title":"RequestRetrier","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/responseserializer\/datapreprocessor-948wn","title":"var dataPreprocessor: DataPreprocessor","type":"property"}],"title":"ResponseSerializer Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/responseserializer\/datapreprocessor-4p0eh","title":"var dataPreprocessor: DataPreprocessor","type":"property"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/responseserializer\/emptyrequestmethods-9rk76","title":"var emptyRequestMethods: Set<HTTPMethod>","type":"property"}],"title":"ResponseSerializer Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/responseserializer\/emptyrequestmethods-8g8wx","title":"var emptyRequestMethods: Set<HTTPMethod>","type":"property"},{"children":[{"children":[{"path":"\/documentation\/alamofire\/responseserializer\/emptyresponsecodes-8eqtm","title":"var emptyResponseCodes: Set<Int>","type":"property"}],"title":"ResponseSerializer Implementations","type":"groupMarker"}],"path":"\/documentation\/alamofire\/responseserializer\/emptyresponsecodes-2chkx","title":"var emptyResponseCodes: Set<Int>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/responseserializer\/emptyresponseallowed(forrequest:response:)","title":"func emptyResponseAllowed(forRequest: URLRequest?, response: HTTPURLResponse?) -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/responseserializer\/requestallowsemptyresponsedata(_:)","title":"func requestAllowsEmptyResponseData(URLRequest?) -> Bool?","type":"method"},{"path":"\/documentation\/alamofire\/responseserializer\/responseallowsemptyresponsedata(_:)","title":"func responseAllowsEmptyResponseData(HTTPURLResponse?) -> Bool?","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/responseserializer\/data","title":"static var data: DataResponseSerializer","type":"property"},{"path":"\/documentation\/alamofire\/responseserializer\/defaultdatapreprocessor","title":"static var defaultDataPreprocessor: DataPreprocessor","type":"property"},{"path":"\/documentation\/alamofire\/responseserializer\/defaultemptyrequestmethods","title":"static var defaultEmptyRequestMethods: Set<HTTPMethod>","type":"property"},{"path":"\/documentation\/alamofire\/responseserializer\/defaultemptyresponsecodes","title":"static var defaultEmptyResponseCodes: Set<Int>","type":"property"},{"path":"\/documentation\/alamofire\/responseserializer\/string","title":"static var string: StringResponseSerializer","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/responseserializer\/data(datapreprocessor:emptyresponsecodes:emptyrequestmethods:)","title":"static func data(dataPreprocessor: DataPreprocessor, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>) -> DataResponseSerializer","type":"method"},{"path":"\/documentation\/alamofire\/responseserializer\/decodable(of:datapreprocessor:decoder:emptyresponsecodes:emptyrequestmethods:)","title":"static func decodable<T>(of: T.Type, dataPreprocessor: DataPreprocessor, decoder: DataDecoder, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>) -> DecodableResponseSerializer<T>","type":"method"},{"path":"\/documentation\/alamofire\/responseserializer\/string(datapreprocessor:encoding:emptyresponsecodes:emptyrequestmethods:)","title":"static func string(dataPreprocessor: DataPreprocessor, encoding: String.Encoding?, emptyResponseCodes: Set<Int>, emptyRequestMethods: Set<HTTPMethod>) -> StringResponseSerializer","type":"method"}],"path":"\/documentation\/alamofire\/responseserializer","title":"ResponseSerializer","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/servertrustevaluating\/evaluate(_:forhost:)","title":"func evaluate(SecTrust, forHost: String) throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/servertrustevaluating\/pinnedcertificates","title":"static var pinnedCertificates: PinnedCertificatesTrustEvaluator","type":"property"},{"path":"\/documentation\/alamofire\/servertrustevaluating\/publickeys","title":"static var publicKeys: PublicKeysTrustEvaluator","type":"property"},{"path":"\/documentation\/alamofire\/servertrustevaluating\/revocationchecking","title":"static var revocationChecking: RevocationTrustEvaluator","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/servertrustevaluating\/composite(evaluators:)","title":"static func composite(evaluators: [ServerTrustEvaluating]) -> CompositeTrustEvaluator","type":"method"},{"path":"\/documentation\/alamofire\/servertrustevaluating\/pinnedcertificates(certificates:acceptselfsignedcertificates:performdefaultvalidation:validatehost:)","title":"static func pinnedCertificates(certificates: [SecCertificate], acceptSelfSignedCertificates: Bool, performDefaultValidation: Bool, validateHost: Bool) -> PinnedCertificatesTrustEvaluator","type":"method"},{"path":"\/documentation\/alamofire\/servertrustevaluating\/publickeys(keys:performdefaultvalidation:validatehost:)","title":"static func publicKeys(keys: [SecKey], performDefaultValidation: Bool, validateHost: Bool) -> PublicKeysTrustEvaluator","type":"method"},{"path":"\/documentation\/alamofire\/servertrustevaluating\/revocationchecking(performdefaultvalidation:validatehost:options:)","title":"static func revocationChecking(performDefaultValidation: Bool, validateHost: Bool, options: RevocationTrustEvaluator.Options) -> RevocationTrustEvaluator","type":"method"}],"path":"\/documentation\/alamofire\/servertrustevaluating","title":"ServerTrustEvaluating","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlconvertible\/asurl()","title":"func asURL() throws -> URL","type":"method"}],"path":"\/documentation\/alamofire\/urlconvertible","title":"URLConvertible","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlrequestconvertible\/urlrequest","title":"var urlRequest: URLRequest?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlrequestconvertible\/asurlrequest()","title":"func asURLRequest() throws -> URLRequest","type":"method"}],"path":"\/documentation\/alamofire\/urlrequestconvertible","title":"URLRequestConvertible","type":"protocol"},{"path":"\/documentation\/alamofire\/uploadconvertible","title":"UploadConvertible","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/uploadableconvertible\/createuploadable()","title":"func createUploadable() throws -> UploadRequest.Uploadable","type":"method"}],"path":"\/documentation\/alamofire\/uploadableconvertible","title":"UploadableConvertible","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/alamofireextension\/init(_:)","title":"init(ExtendedType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/alamofireextension\/certificatedata","title":"var certificateData: [Data]","type":"property"},{"path":"\/documentation\/alamofire\/alamofireextension\/certificates-6oo9w","title":"var certificates: [SecCertificate]","type":"property"},{"path":"\/documentation\/alamofire\/alamofireextension\/certificates-6xru5","title":"var certificates: [SecCertificate]","type":"property"},{"path":"\/documentation\/alamofire\/alamofireextension\/data","title":"var data: [Data]","type":"property"},{"path":"\/documentation\/alamofire\/alamofireextension\/issuccess-1ni4r","title":"var isSuccess: Bool","type":"property"},{"path":"\/documentation\/alamofire\/alamofireextension\/issuccess-1zy3i","title":"var isSuccess: Bool","type":"property"},{"path":"\/documentation\/alamofire\/alamofireextension\/publickey","title":"var publicKey: SecKey?","type":"property"},{"path":"\/documentation\/alamofire\/alamofireextension\/publickeys-26hhq","title":"var publicKeys: [SecKey]","type":"property"},{"path":"\/documentation\/alamofire\/alamofireextension\/publickeys-4iap2","title":"var publicKeys: [SecKey]","type":"property"},{"path":"\/documentation\/alamofire\/alamofireextension\/publickeys-8abmk","title":"var publicKeys: [SecKey]","type":"property"},{"path":"\/documentation\/alamofire\/alamofireextension\/type","title":"var type: ExtendedType","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/alamofireextension\/apply(policy:)","title":"func apply(policy: SecPolicy) throws -> SecTrust","type":"method"},{"path":"\/documentation\/alamofire\/alamofireextension\/evaluate()","title":"func evaluate() throws","type":"method"},{"path":"\/documentation\/alamofire\/alamofireextension\/evaluate(afterapplying:)","title":"func evaluate(afterApplying: SecPolicy) throws","type":"method"},{"path":"\/documentation\/alamofire\/alamofireextension\/paths(forresourcesoftypes:)","title":"func paths(forResourcesOfTypes: [String]) -> [String]","type":"method"},{"path":"\/documentation\/alamofire\/alamofireextension\/performdefaultvalidation(forhost:)","title":"func performDefaultValidation(forHost: String) throws","type":"method"},{"path":"\/documentation\/alamofire\/alamofireextension\/performvalidation(forhost:)","title":"func performValidation(forHost: String) throws","type":"method"},{"path":"\/documentation\/alamofire\/alamofireextension\/setanchorcertificates(_:)","title":"func setAnchorCertificates([SecCertificate]) throws","type":"method"},{"deprecated":true,"path":"\/documentation\/alamofire\/alamofireextension\/validate(errorproducer:)","title":"func validate(errorProducer: (_ status: OSStatus, _ result: SecTrustResultType) -> Error) throws","type":"method"},{"deprecated":true,"path":"\/documentation\/alamofire\/alamofireextension\/validate(policy:errorproducer:)","title":"func validate(policy: SecPolicy, errorProducer: (_ status: OSStatus, _ result: SecTrustResultType) -> Error) throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/alamofireextension\/default-3bthg","title":"static var `default`: URLSessionConfiguration","type":"property"},{"path":"\/documentation\/alamofire\/alamofireextension\/default-87cik","title":"static let `default`: SecPolicy","type":"property"},{"path":"\/documentation\/alamofire\/alamofireextension\/ephemeral","title":"static var ephemeral: URLSessionConfiguration","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/alamofireextension\/hostname(_:)","title":"static func hostname(String) -> SecPolicy","type":"method"},{"path":"\/documentation\/alamofire\/alamofireextension\/revocation(options:)","title":"static func revocation(options: RevocationTrustEvaluator.Options) throws -> SecPolicy","type":"method"}],"path":"\/documentation\/alamofire\/alamofireextension","title":"AlamofireExtension","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/dataresponse\/init(request:response:data:metrics:serializationduration:result:)","title":"init(request: URLRequest?, response: HTTPURLResponse?, data: Data?, metrics: URLSessionTaskMetrics?, serializationDuration: TimeInterval, result: Result<Success, Failure>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/dataresponse\/data","title":"let data: Data?","type":"property"},{"path":"\/documentation\/alamofire\/dataresponse\/error","title":"var error: Failure?","type":"property"},{"path":"\/documentation\/alamofire\/dataresponse\/metrics","title":"let metrics: URLSessionTaskMetrics?","type":"property"},{"path":"\/documentation\/alamofire\/dataresponse\/request","title":"let request: URLRequest?","type":"property"},{"path":"\/documentation\/alamofire\/dataresponse\/response","title":"let response: HTTPURLResponse?","type":"property"},{"path":"\/documentation\/alamofire\/dataresponse\/result","title":"let result: Result<Success, Failure>","type":"property"},{"path":"\/documentation\/alamofire\/dataresponse\/serializationduration","title":"let serializationDuration: TimeInterval","type":"property"},{"path":"\/documentation\/alamofire\/dataresponse\/value","title":"var value: Success?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/dataresponse\/map(_:)","title":"func map<NewSuccess>((Success) -> NewSuccess) -> DataResponse<NewSuccess, Failure>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponse\/maperror(_:)","title":"func mapError<NewFailure>((Failure) -> NewFailure) -> DataResponse<Success, NewFailure>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponse\/trymap(_:)","title":"func tryMap<NewSuccess>((Success) throws -> NewSuccess) -> DataResponse<NewSuccess, Error>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponse\/trymaperror(_:)","title":"func tryMapError<NewFailure>((Failure) throws -> NewFailure) -> DataResponse<Success, Error>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/dataresponse\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/alamofire\/dataresponse\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/dataresponse\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/alamofire\/dataresponse\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/dataresponse","title":"DataResponse","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/init(_:queue:)","title":"init(DataRequest, queue: DispatchQueue)","type":"init"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/init(_:queue:serializer:)-3fpns","title":"init<Serializer>(DataRequest, queue: DispatchQueue, serializer: Serializer)","type":"init"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/init(_:queue:serializer:)-7n7m1","title":"init<Serializer>(DataRequest, queue: DispatchQueue, serializer: Serializer)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/receive(subscriber:)","title":"func receive<S>(subscriber: S)","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/result()","title":"func result() -> AnyPublisher<Result<Value, AFError>, Never>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/value()","title":"func value() -> AnyPublisher<Value, AFError>","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/failure","title":"DataResponsePublisher.Failure","type":"typealias"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/output","title":"DataResponsePublisher.Output","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/values-5vaxe","title":"var values: AsyncPublisher<Self>","type":"property"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/values-9k339","title":"var values: AsyncThrowingPublisher<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/allsatisfy(_:)","title":"func allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/append(_:)","title":"func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/assertnofailure(_:file:line:)","title":"func assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/assign(to:)","title":"func assign(to: inout Published<Self.Output>.Publisher)","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/assign(to:on:)","title":"func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/breakpoint(receivesubscription:receiveoutput:receivecompletion:)","title":"func breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/breakpointonerror()","title":"func breakpointOnError() -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/buffer(size:prefetch:whenfull:)","title":"func buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/catch(_:)","title":"func `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/collect()","title":"func collect() -> Publishers.Collect<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/collect(_:)","title":"func collect(Int) -> Publishers.CollectByCount<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/collect(_:options:)","title":"func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/combinelatest(_:)","title":"func combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/combinelatest(_:_:)-4oata","title":"func combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/combinelatest(_:_:)-97ehv","title":"func combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/combinelatest(_:_:_:)-37usn","title":"func combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/combinelatest(_:_:_:)-3q4os","title":"func combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/combinelatest(_:_:_:_:)","title":"func combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/compactmap(_:)","title":"func compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/contains(where:)","title":"func contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/count()","title":"func count() -> Publishers.Count<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/debounce(for:scheduler:options:)","title":"func debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/decode(type:decoder:)","title":"func decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/delay(for:tolerance:scheduler:options:)","title":"func delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/drop(untiloutputfrom:)","title":"func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/drop(while:)","title":"func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/dropfirst(_:)","title":"func dropFirst(Int) -> Publishers.Drop<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/erasetoanypublisher()","title":"func eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Publishers.Filter<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/first()","title":"func first() -> Publishers.First<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/first(where:)","title":"func first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/flatmap(maxpublishers:_:)-1yf0m","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/flatmap(maxpublishers:_:)-2bs46","title":"func flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/flatmap(maxpublishers:_:)-4ky0c","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/flatmap(maxpublishers:_:)-8nyoc","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)","title":"func handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/ignoreoutput()","title":"func ignoreOutput() -> Publishers.IgnoreOutput<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/last()","title":"func last() -> Publishers.Last<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/last(where:)","title":"func last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/makeconnectable()","title":"func makeConnectable() -> Publishers.MakeConnectable<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/map(_:)-6szjx","title":"func map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/map(_:)-6zbmw","title":"func map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/map(_:_:)","title":"func map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/map(_:_:_:)","title":"func map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/maperror(_:)","title":"func mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/max(by:)","title":"func max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/measureinterval(using:options:)","title":"func measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/merge(with:)","title":"func merge(with: Self) -> Publishers.MergeMany<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/merge(with:_:)","title":"func merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/merge(with:_:_:)","title":"func merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/merge(with:_:_:_:)","title":"func merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/merge(with:_:_:_:_:)","title":"func merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/merge(with:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/merge(with:_:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/min(by:)","title":"func min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/multicast(_:)","title":"func multicast<S>(() -> S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/multicast(subject:)","title":"func multicast<S>(subject: S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/output(at:)","title":"func output(at: Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/output(in:)","title":"func output<R>(in: R) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/prefix(_:)","title":"func prefix(Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/prefix(untiloutputfrom:)","title":"func prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/prefix(while:)","title":"func prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/prepend(_:)","title":"func prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/print(_:to:)","title":"func print(String, to: TextOutputStream?) -> Publishers.Print<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/receive(on:options:)","title":"func receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/reduce(_:_:)","title":"func reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/removeduplicates(by:)","title":"func removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/replaceempty(with:)","title":"func replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/replacenil(with:)","title":"func replaceNil<T>(with: T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/retry(_:)","title":"func retry(Int) -> Publishers.Retry<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/setfailuretype(to:)","title":"func setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/share()","title":"func share() -> Publishers.Share<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/sink(receivecompletion:receivevalue:)","title":"func sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/sink(receivevalue:)","title":"func sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/subscribe(_:)-1h43y","title":"func subscribe<S>(S) -> AnyCancellable","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/subscribe(_:)-jnf5","title":"func subscribe<S>(S)","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/subscribe(on:options:)","title":"func subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/throttle(for:scheduler:latest:)","title":"func throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/timeout(_:scheduler:options:customerror:)","title":"func timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/tryallsatisfy(_:)","title":"func tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/trycatch(_:)","title":"func tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/trycompactmap(_:)","title":"func tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/trycontains(where:)","title":"func tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/trydrop(while:)","title":"func tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/tryfilter(_:)","title":"func tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/tryfirst(where:)","title":"func tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/trylast(where:)","title":"func tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/trymap(_:)","title":"func tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/trymax(by:)","title":"func tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/trymin(by:)","title":"func tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/tryprefix(while:)","title":"func tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/tryreduce(_:_:)","title":"func tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/tryremoveduplicates(by:)","title":"func tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/tryscan(_:_:)","title":"func tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/zip(_:)","title":"func zip<P>(P) -> Publishers.Zip<Self, P>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/zip(_:_:)-29k8n","title":"func zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/zip(_:_:)-5tz7w","title":"func zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/zip(_:_:_:)-1c80n","title":"func zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/zip(_:_:_:)-5ujyi","title":"func zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/alamofire\/dataresponsepublisher\/zip(_:_:_:_:)","title":"func zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>","type":"method"}],"path":"\/documentation\/alamofire\/dataresponsepublisher\/publisher-implementations","title":"Publisher Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/dataresponsepublisher","title":"DataResponsePublisher","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datastreampublisher\/init(_:queue:serializer:)","title":"init<Serializer>(DataStreamRequest, queue: DispatchQueue, serializer: Serializer)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datastreampublisher\/receive(subscriber:)","title":"func receive<S>(subscriber: S)","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/result()","title":"func result() -> AnyPublisher<Result<Value, AFError>, Never>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/value()","title":"func value() -> AnyPublisher<Value, AFError>","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datastreampublisher\/failure","title":"DataStreamPublisher.Failure","type":"typealias"},{"path":"\/documentation\/alamofire\/datastreampublisher\/output","title":"DataStreamPublisher.Output","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datastreampublisher\/values-2hixo","title":"var values: AsyncPublisher<Self>","type":"property"},{"path":"\/documentation\/alamofire\/datastreampublisher\/values-7o276","title":"var values: AsyncThrowingPublisher<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datastreampublisher\/allsatisfy(_:)","title":"func allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/append(_:)","title":"func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/assertnofailure(_:file:line:)","title":"func assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/assign(to:)","title":"func assign(to: inout Published<Self.Output>.Publisher)","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/assign(to:on:)","title":"func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/breakpoint(receivesubscription:receiveoutput:receivecompletion:)","title":"func breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/breakpointonerror()","title":"func breakpointOnError() -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/buffer(size:prefetch:whenfull:)","title":"func buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/catch(_:)","title":"func `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/collect()","title":"func collect() -> Publishers.Collect<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/collect(_:)","title":"func collect(Int) -> Publishers.CollectByCount<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/collect(_:options:)","title":"func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/combinelatest(_:)","title":"func combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/combinelatest(_:_:)-6j00b","title":"func combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/combinelatest(_:_:)-7nbw6","title":"func combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/combinelatest(_:_:_:)-4tdq8","title":"func combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/combinelatest(_:_:_:)-7ha7w","title":"func combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/combinelatest(_:_:_:_:)","title":"func combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/compactmap(_:)","title":"func compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/contains(where:)","title":"func contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/count()","title":"func count() -> Publishers.Count<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/debounce(for:scheduler:options:)","title":"func debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/decode(type:decoder:)","title":"func decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/delay(for:tolerance:scheduler:options:)","title":"func delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/drop(untiloutputfrom:)","title":"func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/drop(while:)","title":"func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/dropfirst(_:)","title":"func dropFirst(Int) -> Publishers.Drop<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/erasetoanypublisher()","title":"func eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Publishers.Filter<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/first()","title":"func first() -> Publishers.First<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/first(where:)","title":"func first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/flatmap(maxpublishers:_:)-32kwa","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/flatmap(maxpublishers:_:)-3i8ov","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/flatmap(maxpublishers:_:)-3rejm","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/flatmap(maxpublishers:_:)-76eba","title":"func flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)","title":"func handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/ignoreoutput()","title":"func ignoreOutput() -> Publishers.IgnoreOutput<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/last()","title":"func last() -> Publishers.Last<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/last(where:)","title":"func last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/makeconnectable()","title":"func makeConnectable() -> Publishers.MakeConnectable<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/map(_:)-8vzvh","title":"func map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/map(_:)-zex7","title":"func map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/map(_:_:)","title":"func map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/map(_:_:_:)","title":"func map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/maperror(_:)","title":"func mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/max(by:)","title":"func max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/measureinterval(using:options:)","title":"func measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/merge(with:)","title":"func merge(with: Self) -> Publishers.MergeMany<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/merge(with:_:)","title":"func merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/merge(with:_:_:)","title":"func merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/merge(with:_:_:_:)","title":"func merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/merge(with:_:_:_:_:)","title":"func merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/merge(with:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/merge(with:_:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/min(by:)","title":"func min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/multicast(_:)","title":"func multicast<S>(() -> S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/multicast(subject:)","title":"func multicast<S>(subject: S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/output(at:)","title":"func output(at: Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/output(in:)","title":"func output<R>(in: R) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/prefix(_:)","title":"func prefix(Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/prefix(untiloutputfrom:)","title":"func prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/prefix(while:)","title":"func prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/prepend(_:)","title":"func prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/print(_:to:)","title":"func print(String, to: TextOutputStream?) -> Publishers.Print<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/receive(on:options:)","title":"func receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/reduce(_:_:)","title":"func reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/removeduplicates(by:)","title":"func removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/replaceempty(with:)","title":"func replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/replacenil(with:)","title":"func replaceNil<T>(with: T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/retry(_:)","title":"func retry(Int) -> Publishers.Retry<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/setfailuretype(to:)","title":"func setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/share()","title":"func share() -> Publishers.Share<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/sink(receivecompletion:receivevalue:)","title":"func sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/sink(receivevalue:)","title":"func sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/subscribe(_:)-52fax","title":"func subscribe<S>(S) -> AnyCancellable","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/subscribe(_:)-mema","title":"func subscribe<S>(S)","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/subscribe(on:options:)","title":"func subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/throttle(for:scheduler:latest:)","title":"func throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/timeout(_:scheduler:options:customerror:)","title":"func timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/tryallsatisfy(_:)","title":"func tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/trycatch(_:)","title":"func tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/trycompactmap(_:)","title":"func tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/trycontains(where:)","title":"func tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/trydrop(while:)","title":"func tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/tryfilter(_:)","title":"func tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/tryfirst(where:)","title":"func tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/trylast(where:)","title":"func tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/trymap(_:)","title":"func tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/trymax(by:)","title":"func tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/trymin(by:)","title":"func tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/tryprefix(while:)","title":"func tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/tryreduce(_:_:)","title":"func tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/tryremoveduplicates(by:)","title":"func tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/tryscan(_:_:)","title":"func tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/zip(_:)","title":"func zip<P>(P) -> Publishers.Zip<Self, P>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/zip(_:_:)-5bqs9","title":"func zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/zip(_:_:)-9bbq6","title":"func zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/zip(_:_:_:)-2dzb8","title":"func zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/zip(_:_:_:)-4y7yu","title":"func zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/alamofire\/datastreampublisher\/zip(_:_:_:_:)","title":"func zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>","type":"method"}],"path":"\/documentation\/alamofire\/datastreampublisher\/publisher-implementations","title":"Publisher Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/datastreampublisher","title":"DataStreamPublisher","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datastreamtask\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/alamofire\/datastreamtask\/resume()","title":"func resume()","type":"method"},{"path":"\/documentation\/alamofire\/datastreamtask\/streamingdata(automaticallycancelling:bufferingpolicy:)","title":"func streamingData(automaticallyCancelling: Bool, bufferingPolicy: Stream<Data, Never>.BufferingPolicy) -> Stream<Data, Never>","type":"method"},{"path":"\/documentation\/alamofire\/datastreamtask\/streamingdecodables(_:automaticallycancelling:bufferingpolicy:)","title":"func streamingDecodables<T>(T.Type, automaticallyCancelling: Bool, bufferingPolicy: Stream<T, AFError>.BufferingPolicy) -> Stream<T, AFError>","type":"method"},{"path":"\/documentation\/alamofire\/datastreamtask\/streamingresponses(serializedusing:automaticallycancelling:bufferingpolicy:)","title":"func streamingResponses<Serializer>(serializedUsing: Serializer, automaticallyCancelling: Bool, bufferingPolicy: Stream<Serializer.SerializedObject, AFError>.BufferingPolicy) -> Stream<Serializer.SerializedObject, AFError>","type":"method"},{"path":"\/documentation\/alamofire\/datastreamtask\/streamingstrings(automaticallycancelling:bufferingpolicy:)","title":"func streamingStrings(automaticallyCancelling: Bool, bufferingPolicy: Stream<String, Never>.BufferingPolicy) -> Stream<String, Never>","type":"method"},{"path":"\/documentation\/alamofire\/datastreamtask\/suspend()","title":"func suspend()","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datastreamtask\/stream","title":"DataStreamTask.Stream","type":"typealias"}],"path":"\/documentation\/alamofire\/datastreamtask","title":"DataStreamTask","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datatask\/response","title":"var response: DataResponse<Value, AFError>","type":"property"},{"path":"\/documentation\/alamofire\/datatask\/result","title":"var result: Result<Value, AFError>","type":"property"},{"path":"\/documentation\/alamofire\/datatask\/value","title":"var value: Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/datatask\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/alamofire\/datatask\/resume()","title":"func resume()","type":"method"},{"path":"\/documentation\/alamofire\/datatask\/suspend()","title":"func suspend()","type":"method"}],"path":"\/documentation\/alamofire\/datatask","title":"DataTask","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/decodablestreamserializer\/init(decoder:datapreprocessor:)","title":"init(decoder: DataDecoder, dataPreprocessor: DataPreprocessor)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/decodablestreamserializer\/datapreprocessor","title":"let dataPreprocessor: DataPreprocessor","type":"property"},{"path":"\/documentation\/alamofire\/decodablestreamserializer\/decoder","title":"let decoder: DataDecoder","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/decodablestreamserializer\/serialize(_:)","title":"func serialize(Data) throws -> T","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/decodablestreamserializer\/decodable(of:decoder:datapreprocessor:)","title":"static func decodable<T>(of: T.Type, decoder: DataDecoder, dataPreprocessor: DataPreprocessor) -> Self","type":"method"}],"path":"\/documentation\/alamofire\/decodablestreamserializer\/datastreamserializer-implementations","title":"DataStreamSerializer Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/decodablestreamserializer","title":"DecodableStreamSerializer","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadresponse\/init(request:response:fileurl:resumedata:metrics:serializationduration:result:)","title":"init(request: URLRequest?, response: HTTPURLResponse?, fileURL: URL?, resumeData: Data?, metrics: URLSessionTaskMetrics?, serializationDuration: TimeInterval, result: Result<Success, Failure>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadresponse\/error","title":"var error: Failure?","type":"property"},{"path":"\/documentation\/alamofire\/downloadresponse\/fileurl","title":"let fileURL: URL?","type":"property"},{"path":"\/documentation\/alamofire\/downloadresponse\/metrics","title":"let metrics: URLSessionTaskMetrics?","type":"property"},{"path":"\/documentation\/alamofire\/downloadresponse\/request","title":"let request: URLRequest?","type":"property"},{"path":"\/documentation\/alamofire\/downloadresponse\/response","title":"let response: HTTPURLResponse?","type":"property"},{"path":"\/documentation\/alamofire\/downloadresponse\/result","title":"let result: Result<Success, Failure>","type":"property"},{"path":"\/documentation\/alamofire\/downloadresponse\/resumedata","title":"let resumeData: Data?","type":"property"},{"path":"\/documentation\/alamofire\/downloadresponse\/serializationduration","title":"let serializationDuration: TimeInterval","type":"property"},{"path":"\/documentation\/alamofire\/downloadresponse\/value","title":"var value: Success?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadresponse\/map(_:)","title":"func map<NewSuccess>((Success) -> NewSuccess) -> DownloadResponse<NewSuccess, Failure>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponse\/maperror(_:)","title":"func mapError<NewFailure>((Failure) -> NewFailure) -> DownloadResponse<Success, NewFailure>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponse\/trymap(_:)","title":"func tryMap<NewSuccess>((Success) throws -> NewSuccess) -> DownloadResponse<NewSuccess, Error>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponse\/trymaperror(_:)","title":"func tryMapError<NewFailure>((Failure) throws -> NewFailure) -> DownloadResponse<Success, Error>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadresponse\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/alamofire\/downloadresponse\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadresponse\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/alamofire\/downloadresponse\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/downloadresponse","title":"DownloadResponse","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/init(_:queue:)","title":"init(DownloadRequest, queue: DispatchQueue)","type":"init"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/init(_:queue:serializer:)-8kp3n","title":"init<Serializer>(DownloadRequest, queue: DispatchQueue, serializer: Serializer)","type":"init"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/init(_:queue:serializer:)-dggh","title":"init<Serializer>(DownloadRequest, queue: DispatchQueue, serializer: Serializer)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/receive(subscriber:)","title":"func receive<S>(subscriber: S)","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/result()","title":"func result() -> AnyPublisher<Result<Value, AFError>, Never>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/value()","title":"func value() -> AnyPublisher<Value, AFError>","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/failure","title":"DownloadResponsePublisher.Failure","type":"typealias"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/output","title":"DownloadResponsePublisher.Output","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/values-4c3x7","title":"var values: AsyncPublisher<Self>","type":"property"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/values-56ye9","title":"var values: AsyncThrowingPublisher<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/allsatisfy(_:)","title":"func allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/append(_:)","title":"func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/assertnofailure(_:file:line:)","title":"func assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/assign(to:)","title":"func assign(to: inout Published<Self.Output>.Publisher)","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/assign(to:on:)","title":"func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/breakpoint(receivesubscription:receiveoutput:receivecompletion:)","title":"func breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/breakpointonerror()","title":"func breakpointOnError() -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/buffer(size:prefetch:whenfull:)","title":"func buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/catch(_:)","title":"func `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/collect()","title":"func collect() -> Publishers.Collect<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/collect(_:)","title":"func collect(Int) -> Publishers.CollectByCount<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/collect(_:options:)","title":"func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/combinelatest(_:)","title":"func combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/combinelatest(_:_:)-3ogq2","title":"func combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/combinelatest(_:_:)-x42","title":"func combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/combinelatest(_:_:_:)-3rggj","title":"func combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/combinelatest(_:_:_:)-3tuae","title":"func combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/combinelatest(_:_:_:_:)","title":"func combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/compactmap(_:)","title":"func compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/contains(where:)","title":"func contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/count()","title":"func count() -> Publishers.Count<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/debounce(for:scheduler:options:)","title":"func debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/decode(type:decoder:)","title":"func decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/delay(for:tolerance:scheduler:options:)","title":"func delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/drop(untiloutputfrom:)","title":"func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/drop(while:)","title":"func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/dropfirst(_:)","title":"func dropFirst(Int) -> Publishers.Drop<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/erasetoanypublisher()","title":"func eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Publishers.Filter<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/first()","title":"func first() -> Publishers.First<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/first(where:)","title":"func first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/flatmap(maxpublishers:_:)-4gh4s","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/flatmap(maxpublishers:_:)-94h2s","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/flatmap(maxpublishers:_:)-97pj1","title":"func flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/flatmap(maxpublishers:_:)-9mxgp","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)","title":"func handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/ignoreoutput()","title":"func ignoreOutput() -> Publishers.IgnoreOutput<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/last()","title":"func last() -> Publishers.Last<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/last(where:)","title":"func last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/makeconnectable()","title":"func makeConnectable() -> Publishers.MakeConnectable<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/map(_:)-33cr3","title":"func map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/map(_:)-43n6r","title":"func map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/map(_:_:)","title":"func map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/map(_:_:_:)","title":"func map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/maperror(_:)","title":"func mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/max(by:)","title":"func max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/measureinterval(using:options:)","title":"func measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/merge(with:)","title":"func merge(with: Self) -> Publishers.MergeMany<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/merge(with:_:)","title":"func merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/merge(with:_:_:)","title":"func merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/merge(with:_:_:_:)","title":"func merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/merge(with:_:_:_:_:)","title":"func merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/merge(with:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/merge(with:_:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/min(by:)","title":"func min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/multicast(_:)","title":"func multicast<S>(() -> S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/multicast(subject:)","title":"func multicast<S>(subject: S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/output(at:)","title":"func output(at: Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/output(in:)","title":"func output<R>(in: R) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/prefix(_:)","title":"func prefix(Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/prefix(untiloutputfrom:)","title":"func prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/prefix(while:)","title":"func prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/prepend(_:)","title":"func prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/print(_:to:)","title":"func print(String, to: TextOutputStream?) -> Publishers.Print<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/receive(on:options:)","title":"func receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/reduce(_:_:)","title":"func reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/removeduplicates(by:)","title":"func removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/replaceempty(with:)","title":"func replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/replacenil(with:)","title":"func replaceNil<T>(with: T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/retry(_:)","title":"func retry(Int) -> Publishers.Retry<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/setfailuretype(to:)","title":"func setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/share()","title":"func share() -> Publishers.Share<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/sink(receivecompletion:receivevalue:)","title":"func sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/sink(receivevalue:)","title":"func sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/subscribe(_:)-1k9k3","title":"func subscribe<S>(S)","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/subscribe(_:)-4moko","title":"func subscribe<S>(S) -> AnyCancellable","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/subscribe(on:options:)","title":"func subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/throttle(for:scheduler:latest:)","title":"func throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/timeout(_:scheduler:options:customerror:)","title":"func timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/tryallsatisfy(_:)","title":"func tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/trycatch(_:)","title":"func tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/trycompactmap(_:)","title":"func tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/trycontains(where:)","title":"func tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/trydrop(while:)","title":"func tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/tryfilter(_:)","title":"func tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/tryfirst(where:)","title":"func tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/trylast(where:)","title":"func tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/trymap(_:)","title":"func tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/trymax(by:)","title":"func tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/trymin(by:)","title":"func tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/tryprefix(while:)","title":"func tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/tryreduce(_:_:)","title":"func tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/tryremoveduplicates(by:)","title":"func tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/tryscan(_:_:)","title":"func tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/zip(_:)","title":"func zip<P>(P) -> Publishers.Zip<Self, P>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/zip(_:_:)-5762e","title":"func zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/zip(_:_:)-6nue6","title":"func zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/zip(_:_:_:)-2e21","title":"func zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/zip(_:_:_:)-8x7js","title":"func zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/alamofire\/downloadresponsepublisher\/zip(_:_:_:_:)","title":"func zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>","type":"method"}],"path":"\/documentation\/alamofire\/downloadresponsepublisher\/publisher-implementations","title":"Publisher Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/downloadresponsepublisher","title":"DownloadResponsePublisher","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadtask\/response","title":"var response: DownloadResponse<Value, AFError>","type":"property"},{"path":"\/documentation\/alamofire\/downloadtask\/result","title":"var result: Result<Value, AFError>","type":"property"},{"path":"\/documentation\/alamofire\/downloadtask\/value","title":"var value: Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/downloadtask\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/alamofire\/downloadtask\/resume()","title":"func resume()","type":"method"},{"path":"\/documentation\/alamofire\/downloadtask\/suspend()","title":"func suspend()","type":"method"}],"path":"\/documentation\/alamofire\/downloadtask","title":"DownloadTask","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/empty\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/empty\/value","title":"static let value: Empty","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/empty\/emptyvalue()","title":"static func emptyValue() -> Empty","type":"method"}],"path":"\/documentation\/alamofire\/empty\/emptyresponse-implementations","title":"EmptyResponse Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/empty","title":"Empty","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/googlexssipreprocessor\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/googlexssipreprocessor\/preprocess(_:)","title":"func preprocess(Data) throws -> Data","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/googlexssipreprocessor\/googlexssi","title":"static var googleXSSI: GoogleXSSIPreprocessor","type":"property"}],"path":"\/documentation\/alamofire\/googlexssipreprocessor\/datapreprocessor-implementations","title":"DataPreprocessor Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/googlexssipreprocessor","title":"GoogleXSSIPreprocessor","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpheader\/init(name:value:)","title":"init(name: String, value: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpheader\/name","title":"let name: String","type":"property"},{"path":"\/documentation\/alamofire\/httpheader\/value","title":"let value: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpheader\/defaultacceptencoding","title":"static let defaultAcceptEncoding: HTTPHeader","type":"property"},{"path":"\/documentation\/alamofire\/httpheader\/defaultacceptlanguage","title":"static let defaultAcceptLanguage: HTTPHeader","type":"property"},{"path":"\/documentation\/alamofire\/httpheader\/defaultuseragent","title":"static let defaultUserAgent: HTTPHeader","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpheader\/accept(_:)","title":"static func accept(String) -> HTTPHeader","type":"method"},{"path":"\/documentation\/alamofire\/httpheader\/acceptcharset(_:)","title":"static func acceptCharset(String) -> HTTPHeader","type":"method"},{"path":"\/documentation\/alamofire\/httpheader\/acceptencoding(_:)","title":"static func acceptEncoding(String) -> HTTPHeader","type":"method"},{"path":"\/documentation\/alamofire\/httpheader\/acceptlanguage(_:)","title":"static func acceptLanguage(String) -> HTTPHeader","type":"method"},{"path":"\/documentation\/alamofire\/httpheader\/authorization(_:)","title":"static func authorization(String) -> HTTPHeader","type":"method"},{"path":"\/documentation\/alamofire\/httpheader\/authorization(bearertoken:)","title":"static func authorization(bearerToken: String) -> HTTPHeader","type":"method"},{"path":"\/documentation\/alamofire\/httpheader\/authorization(username:password:)","title":"static func authorization(username: String, password: String) -> HTTPHeader","type":"method"},{"path":"\/documentation\/alamofire\/httpheader\/contentdisposition(_:)","title":"static func contentDisposition(String) -> HTTPHeader","type":"method"},{"path":"\/documentation\/alamofire\/httpheader\/contenttype(_:)","title":"static func contentType(String) -> HTTPHeader","type":"method"},{"path":"\/documentation\/alamofire\/httpheader\/useragent(_:)","title":"static func userAgent(String) -> HTTPHeader","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpheader\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/alamofire\/httpheader\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpheader\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/alamofire\/httpheader\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/httpheader","title":"HTTPHeader","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpheaders\/init()","title":"init()","type":"init"},{"path":"\/documentation\/alamofire\/httpheaders\/init(_:)-2e95f","title":"init([String : String])","type":"init"},{"path":"\/documentation\/alamofire\/httpheaders\/init(_:)-5uywy","title":"init([HTTPHeader])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpheaders\/dictionary","title":"var dictionary: [String : String]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpheaders\/add(_:)","title":"func add(HTTPHeader)","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/add(name:value:)","title":"func add(name: String, value: String)","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/remove(name:)","title":"func remove(name: String)","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/sort()","title":"func sort()","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/sorted()","title":"func sorted() -> HTTPHeaders","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/update(_:)","title":"func update(HTTPHeader)","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/update(name:value:)","title":"func update(name: String, value: String)","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/value(for:)","title":"func value(for: String) -> String?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpheaders\/subscript(_:)-4sqh6","title":"subscript(String) -> String?","type":"subscript"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpheaders\/default","title":"static let `default`: HTTPHeaders","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpheaders\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/alamofire\/httpheaders\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/alamofire\/httpheaders\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/alamofire\/httpheaders\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/alamofire\/httpheaders\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/alamofire\/httpheaders\/startindex","title":"var startIndex: Int","type":"property"},{"path":"\/documentation\/alamofire\/httpheaders\/underestimatedcount-54ksg","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpheaders\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/firstrange(of:)","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/index(after:)","title":"func index(after: Int) -> Int","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/map(_:)-9885q","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpheaders\/subscript(_:)-4y23i","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/alamofire\/httpheaders\/subscript(_:)-72gx9","title":"subscript(Int) -> HTTPHeader","type":"subscript"},{"path":"\/documentation\/alamofire\/httpheaders\/subscript(_:)-8pn4u","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/alamofire\/httpheaders\/subscript(_:)-9axtt","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"}],"path":"\/documentation\/alamofire\/httpheaders\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpheaders\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/alamofire\/httpheaders\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpheaders\/init(arrayliteral:)","title":"init(arrayLiteral: HTTPHeader...)","type":"init"}],"path":"\/documentation\/alamofire\/httpheaders\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpheaders\/init(dictionaryliteral:)","title":"init(dictionaryLiteral: (String, String)...)","type":"init"}],"path":"\/documentation\/alamofire\/httpheaders\/expressiblebydictionaryliteral-implementations","title":"ExpressibleByDictionaryLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpheaders\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/alamofire\/httpheaders\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/alamofire\/httpheaders\/underestimatedcount-6zqr9","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpheaders\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/flatmap(_:)-1uhtf","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/flatmap(_:)-51xin","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/makeiterator()","title":"func makeIterator() -> IndexingIterator<[HTTPHeader]>","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/map(_:)-3if5y","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/sorted(using:)-24lyy","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/sorted(using:)-4xclm","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/httpheaders\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/alamofire\/httpheaders\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/httpheaders","title":"HTTPHeaders","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpmethod\/init(rawvalue:)","title":"init(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpmethod\/rawvalue","title":"let rawValue: String","type":"property"},{"path":"\/documentation\/alamofire\/httpmethod\/supportsmultipart","title":"var supportsMultipart: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpmethod\/connect","title":"static let connect: HTTPMethod","type":"property"},{"path":"\/documentation\/alamofire\/httpmethod\/delete","title":"static let delete: HTTPMethod","type":"property"},{"path":"\/documentation\/alamofire\/httpmethod\/get","title":"static let get: HTTPMethod","type":"property"},{"path":"\/documentation\/alamofire\/httpmethod\/head","title":"static let head: HTTPMethod","type":"property"},{"path":"\/documentation\/alamofire\/httpmethod\/options","title":"static let options: HTTPMethod","type":"property"},{"path":"\/documentation\/alamofire\/httpmethod\/patch","title":"static let patch: HTTPMethod","type":"property"},{"path":"\/documentation\/alamofire\/httpmethod\/post","title":"static let post: HTTPMethod","type":"property"},{"path":"\/documentation\/alamofire\/httpmethod\/put","title":"static let put: HTTPMethod","type":"property"},{"path":"\/documentation\/alamofire\/httpmethod\/query","title":"static let query: HTTPMethod","type":"property"},{"path":"\/documentation\/alamofire\/httpmethod\/trace","title":"static let trace: HTTPMethod","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpmethod\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/alamofire\/httpmethod\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpmethod\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/httpmethod\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/alamofire\/httpmethod\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/httpmethod","title":"HTTPMethod","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/jsonencoding\/init(options:)","title":"init(options: JSONSerialization.WritingOptions)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/jsonencoding\/options","title":"let options: JSONSerialization.WritingOptions","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/jsonencoding\/encode(_:with:)","title":"func encode(URLRequestConvertible, with: Parameters?) throws -> URLRequest","type":"method"},{"path":"\/documentation\/alamofire\/jsonencoding\/encode(_:withjsonobject:)","title":"func encode(URLRequestConvertible, withJSONObject: Any?) throws -> URLRequest","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/jsonencoding\/default","title":"static var `default`: JSONEncoding","type":"property"},{"path":"\/documentation\/alamofire\/jsonencoding\/prettyprinted","title":"static var prettyPrinted: JSONEncoding","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/jsonencoding\/error\/invalidjsonobject","title":"case invalidJSONObject","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/jsonencoding\/error\/localizeddescription-5ymw9","title":"var localizedDescription: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/alamofire\/jsonencoding\/error\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/alamofire\/jsonencoding\/error\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/jsonencoding\/error\/asaferror","title":"var asAFError: AFError?","type":"property"},{"path":"\/documentation\/alamofire\/jsonencoding\/error\/localizeddescription-8xfes","title":"var localizedDescription: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/jsonencoding\/error\/asaferror(orfailwith:file:line:)","title":"func asAFError(orFailWith: () -> String, file: StaticString, line: UInt) -> AFError","type":"method"}],"path":"\/documentation\/alamofire\/jsonencoding\/error\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/jsonencoding\/error","title":"JSONEncoding.Error","type":"enum"}],"path":"\/documentation\/alamofire\/jsonencoding","title":"JSONEncoding","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/passthroughpreprocessor\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/passthroughpreprocessor\/preprocess(_:)","title":"func preprocess(Data) throws -> Data","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/passthroughpreprocessor\/passthrough","title":"static var passthrough: PassthroughPreprocessor","type":"property"}],"path":"\/documentation\/alamofire\/passthroughpreprocessor\/datapreprocessor-implementations","title":"DataPreprocessor Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/passthroughpreprocessor","title":"PassthroughPreprocessor","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/passthroughstreamserializer\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/passthroughstreamserializer\/serialize(_:)","title":"func serialize(Data) throws -> Data","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/passthroughstreamserializer\/passthrough","title":"static var passthrough: PassthroughStreamSerializer","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/passthroughstreamserializer\/decodable(of:decoder:datapreprocessor:)","title":"static func decodable<T>(of: T.Type, decoder: DataDecoder, dataPreprocessor: DataPreprocessor) -> Self","type":"method"}],"path":"\/documentation\/alamofire\/passthroughstreamserializer\/datastreamserializer-implementations","title":"DataStreamSerializer Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/passthroughstreamserializer","title":"PassthroughStreamSerializer","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/redirector\/init(behavior:)","title":"init(behavior: Behavior)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/redirector\/behavior-swift.property","title":"let behavior: Behavior","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/redirector\/donotfollow-2a42a","title":"static let doNotFollow: Redirector","type":"property"},{"path":"\/documentation\/alamofire\/redirector\/follow-ker6","title":"static let follow: Redirector","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/redirector\/behavior-swift.enum\/donotfollow","title":"case doNotFollow","type":"case"},{"path":"\/documentation\/alamofire\/redirector\/behavior-swift.enum\/follow","title":"case follow","type":"case"},{"path":"\/documentation\/alamofire\/redirector\/behavior-swift.enum\/modify(_:)","title":"case modify((URLSessionTask, URLRequest, HTTPURLResponse) -> URLRequest?)","type":"case"}],"path":"\/documentation\/alamofire\/redirector\/behavior-swift.enum","title":"Redirector.Behavior","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/redirector\/task(_:willberedirectedto:for:completion:)","title":"func task(URLSessionTask, willBeRedirectedTo: URLRequest, for: HTTPURLResponse, completion: (URLRequest?) -> Void)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/redirector\/donotfollow-747qf","title":"static var doNotFollow: Redirector","type":"property"},{"path":"\/documentation\/alamofire\/redirector\/follow-i737","title":"static var follow: Redirector","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/redirector\/modify(using:)","title":"static func modify(using: (URLSessionTask, URLRequest, HTTPURLResponse) -> URLRequest?) -> Redirector","type":"method"}],"path":"\/documentation\/alamofire\/redirector\/redirecthandler-implementations","title":"RedirectHandler Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/redirector","title":"Redirector","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/requestadapterstate\/requestid","title":"let requestID: UUID","type":"property"},{"path":"\/documentation\/alamofire\/requestadapterstate\/session","title":"let session: Session","type":"property"}],"path":"\/documentation\/alamofire\/requestadapterstate","title":"RequestAdapterState","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/responsecacher\/init(behavior:)","title":"init(behavior: Behavior)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/responsecacher\/behavior-swift.property","title":"let behavior: Behavior","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/responsecacher\/cache-17hwf","title":"static let cache: ResponseCacher","type":"property"},{"path":"\/documentation\/alamofire\/responsecacher\/donotcache-7gxiw","title":"static let doNotCache: ResponseCacher","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/responsecacher\/behavior-swift.enum\/cache","title":"case cache","type":"case"},{"path":"\/documentation\/alamofire\/responsecacher\/behavior-swift.enum\/donotcache","title":"case doNotCache","type":"case"},{"path":"\/documentation\/alamofire\/responsecacher\/behavior-swift.enum\/modify(_:)","title":"case modify((URLSessionDataTask, CachedURLResponse) -> CachedURLResponse?)","type":"case"}],"path":"\/documentation\/alamofire\/responsecacher\/behavior-swift.enum","title":"ResponseCacher.Behavior","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/responsecacher\/datatask(_:willcacheresponse:completion:)","title":"func dataTask(URLSessionDataTask, willCacheResponse: CachedURLResponse, completion: (CachedURLResponse?) -> Void)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/responsecacher\/cache-3cz73","title":"static var cache: ResponseCacher","type":"property"},{"path":"\/documentation\/alamofire\/responsecacher\/donotcache-7a8bm","title":"static var doNotCache: ResponseCacher","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/responsecacher\/modify(using:)","title":"static func modify(using: ((URLSessionDataTask, CachedURLResponse) -> CachedURLResponse?)) -> ResponseCacher","type":"method"}],"path":"\/documentation\/alamofire\/responsecacher\/cachedresponsehandler-implementations","title":"CachedResponseHandler Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/responsecacher","title":"ResponseCacher","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/streamof\/iterator\/next()","title":"func next() async -> Element?","type":"method"}],"path":"\/documentation\/alamofire\/streamof\/iterator","title":"StreamOf.Iterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/streamof\/makeasynciterator()","title":"func makeAsyncIterator() -> Iterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/streamof\/asynciterator","title":"StreamOf.AsyncIterator","type":"typealias"},{"path":"\/documentation\/alamofire\/streamof\/bufferingpolicy","title":"StreamOf.BufferingPolicy","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/streamof\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/alamofire\/streamof\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/alamofire\/streamof\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/streamof\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/streamof\/compactmap(_:)-4si0s","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/alamofire\/streamof\/compactmap(_:)-882uq","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/alamofire\/streamof\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/streamof\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/alamofire\/streamof\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/alamofire\/streamof\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/alamofire\/streamof\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/alamofire\/streamof\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/alamofire\/streamof\/flatmap(_:)-3awvz","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/alamofire\/streamof\/flatmap(_:)-7ai4o","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/alamofire\/streamof\/map(_:)-3uwol","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/alamofire\/streamof\/map(_:)-8r9pu","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/alamofire\/streamof\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/alamofire\/streamof\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/alamofire\/streamof\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/alamofire\/streamof\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/alamofire\/streamof\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/alamofire\/streamof\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/alamofire\/streamof\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/alamofire\/streamof\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/alamofire\/streamof\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/streamof","title":"StreamOf","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/stringstreamserializer\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/stringstreamserializer\/serialize(_:)","title":"func serialize(Data) throws -> String","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/stringstreamserializer\/string","title":"static var string: StringStreamSerializer","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/stringstreamserializer\/decodable(of:decoder:datapreprocessor:)","title":"static func decodable<T>(of: T.Type, decoder: DataDecoder, dataPreprocessor: DataPreprocessor) -> Self","type":"method"}],"path":"\/documentation\/alamofire\/stringstreamserializer\/datastreamserializer-implementations","title":"DataStreamSerializer Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/stringstreamserializer","title":"StringStreamSerializer","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencoding\/init(destination:arrayencoding:boolencoding:)","title":"init(destination: Destination, arrayEncoding: ArrayEncoding, boolEncoding: BoolEncoding)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencoding\/arrayencoding-swift.property","title":"let arrayEncoding: ArrayEncoding","type":"property"},{"path":"\/documentation\/alamofire\/urlencoding\/boolencoding-swift.property","title":"let boolEncoding: BoolEncoding","type":"property"},{"path":"\/documentation\/alamofire\/urlencoding\/destination-swift.property","title":"let destination: Destination","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencoding\/encode(_:with:)","title":"func encode(URLRequestConvertible, with: Parameters?) throws -> URLRequest","type":"method"},{"path":"\/documentation\/alamofire\/urlencoding\/escape(_:)","title":"func escape(String) -> String","type":"method"},{"path":"\/documentation\/alamofire\/urlencoding\/querycomponents(fromkey:value:)","title":"func queryComponents(fromKey: String, value: Any) -> [(String, String)]","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencoding\/default","title":"static var `default`: URLEncoding","type":"property"},{"path":"\/documentation\/alamofire\/urlencoding\/httpbody","title":"static var httpBody: URLEncoding","type":"property"},{"path":"\/documentation\/alamofire\/urlencoding\/querystring","title":"static var queryString: URLEncoding","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencoding\/arrayencoding-swift.enum\/brackets","title":"case brackets","type":"case"},{"path":"\/documentation\/alamofire\/urlencoding\/arrayencoding-swift.enum\/indexinbrackets","title":"case indexInBrackets","type":"case"},{"path":"\/documentation\/alamofire\/urlencoding\/arrayencoding-swift.enum\/nobrackets","title":"case noBrackets","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencoding\/arrayencoding-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/alamofire\/urlencoding\/arrayencoding-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/urlencoding\/arrayencoding-swift.enum","title":"URLEncoding.ArrayEncoding","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencoding\/boolencoding-swift.enum\/literal","title":"case literal","type":"case"},{"path":"\/documentation\/alamofire\/urlencoding\/boolencoding-swift.enum\/numeric","title":"case numeric","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencoding\/boolencoding-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/alamofire\/urlencoding\/boolencoding-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/urlencoding\/boolencoding-swift.enum","title":"URLEncoding.BoolEncoding","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencoding\/destination-swift.enum\/httpbody","title":"case httpBody","type":"case"},{"path":"\/documentation\/alamofire\/urlencoding\/destination-swift.enum\/methoddependent","title":"case methodDependent","type":"case"},{"path":"\/documentation\/alamofire\/urlencoding\/destination-swift.enum\/querystring","title":"case queryString","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlencoding\/destination-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/alamofire\/urlencoding\/destination-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/urlencoding\/destination-swift.enum","title":"URLEncoding.Destination","type":"enum"}],"path":"\/documentation\/alamofire\/urlencoding","title":"URLEncoding","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlresponseserializer\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlresponseserializer\/serializedownload(request:response:fileurl:error:)","title":"func serializeDownload(request: URLRequest?, response: HTTPURLResponse?, fileURL: URL?, error: Error?) throws -> URL","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/urlresponseserializer\/url","title":"static var url: URLResponseSerializer","type":"property"}],"path":"\/documentation\/alamofire\/urlresponseserializer\/downloadresponseserializerprotocol-implementations","title":"DownloadResponseSerializerProtocol Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/urlresponseserializer","title":"URLResponseSerializer","type":"struct"},{"title":"Variables","type":"groupMarker"},{"path":"\/documentation\/alamofire\/af","title":"let AF: Session","type":"var"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/afdataresponse","title":"AFDataResponse","type":"typealias"},{"path":"\/documentation\/alamofire\/afdownloadresponse","title":"AFDownloadResponse","type":"typealias"},{"path":"\/documentation\/alamofire\/afresult","title":"AFResult","type":"typealias"},{"path":"\/documentation\/alamofire\/adapthandler","title":"AdaptHandler","type":"typealias"},{"path":"\/documentation\/alamofire\/disabledevaluator","title":"DisabledEvaluator","type":"typealias"},{"path":"\/documentation\/alamofire\/parameters","title":"Parameters","type":"typealias"},{"path":"\/documentation\/alamofire\/retryhandler","title":"RetryHandler","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/aferror\/unexpectedinputstreamlength\/bytesexpected","title":"var bytesExpected: UInt64","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/unexpectedinputstreamlength\/bytesread","title":"var bytesRead: UInt64","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/aferror\/unexpectedinputstreamlength\/asaferror","title":"var asAFError: AFError?","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/unexpectedinputstreamlength\/localizeddescription","title":"var localizedDescription: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/aferror\/unexpectedinputstreamlength\/asaferror(orfailwith:file:line:)","title":"func asAFError(orFailWith: () -> String, file: StaticString, line: UInt) -> AFError","type":"method"}],"path":"\/documentation\/alamofire\/aferror\/unexpectedinputstreamlength\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/aferror\/unexpectedinputstreamlength","title":"AFError.UnexpectedInputStreamLength","type":"struct"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/aferror\/createurlrequestfailed(error:)","title":"case createURLRequestFailed(error: Error)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/createuploadablefailed(error:)","title":"case createUploadableFailed(error: Error)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/downloadedfilemovefailed(error:source:destination:)","title":"case downloadedFileMoveFailed(error: Error, source: URL, destination: URL)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/explicitlycancelled","title":"case explicitlyCancelled","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/invalidurl(url:)","title":"case invalidURL(url: URLConvertible)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/multipartencodingfailed(reason:)","title":"case multipartEncodingFailed(reason: MultipartEncodingFailureReason)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/parameterencoderfailed(reason:)","title":"case parameterEncoderFailed(reason: ParameterEncoderFailureReason)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/parameterencodingfailed(reason:)","title":"case parameterEncodingFailed(reason: ParameterEncodingFailureReason)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/requestadaptationfailed(error:)","title":"case requestAdaptationFailed(error: Error)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/requestretryfailed(retryerror:originalerror:)","title":"case requestRetryFailed(retryError: Error, originalError: Error)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/responseserializationfailed(reason:)","title":"case responseSerializationFailed(reason: ResponseSerializationFailureReason)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/responsevalidationfailed(reason:)","title":"case responseValidationFailed(reason: ResponseValidationFailureReason)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/servertrustevaluationfailed(reason:)","title":"case serverTrustEvaluationFailed(reason: ServerTrustFailureReason)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/sessiondeinitialized","title":"case sessionDeinitialized","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/sessioninvalidated(error:)","title":"case sessionInvalidated(error: Error?)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/sessiontaskfailed(error:)","title":"case sessionTaskFailed(error: Error)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/urlrequestvalidationfailed(reason:)","title":"case urlRequestValidationFailed(reason: URLRequestValidationFailureReason)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/aferror\/acceptablecontenttypes","title":"var acceptableContentTypes: [String]?","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/destinationurl","title":"var destinationURL: URL?","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/downloadresumedata","title":"var downloadResumeData: Data?","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/failedstringencoding","title":"var failedStringEncoding: String.Encoding?","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/iscreateurlrequesterror","title":"var isCreateURLRequestError: Bool","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/iscreateuploadableerror","title":"var isCreateUploadableError: Bool","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/isdownloadedfilemoveerror","title":"var isDownloadedFileMoveError: Bool","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/isexplicitlycancellederror","title":"var isExplicitlyCancelledError: Bool","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/isinvalidurlerror","title":"var isInvalidURLError: Bool","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/ismultipartencodingerror","title":"var isMultipartEncodingError: Bool","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/isparameterencodererror","title":"var isParameterEncoderError: Bool","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/isparameterencodingerror","title":"var isParameterEncodingError: Bool","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/isrequestadaptationerror","title":"var isRequestAdaptationError: Bool","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/isrequestretryerror","title":"var isRequestRetryError: Bool","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/isresponseserializationerror","title":"var isResponseSerializationError: Bool","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/isresponsevalidationerror","title":"var isResponseValidationError: Bool","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/isservertrustevaluationerror","title":"var isServerTrustEvaluationError: Bool","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/issessiondeinitializederror","title":"var isSessionDeinitializedError: Bool","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/issessioninvalidatederror","title":"var isSessionInvalidatedError: Bool","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/issessiontaskerror","title":"var isSessionTaskError: Bool","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/responsecode","title":"var responseCode: Int?","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/responsecontenttype","title":"var responseContentType: String?","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/sourceurl","title":"var sourceURL: URL?","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/underlyingerror","title":"var underlyingError: Error?","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/url","title":"var url: URL?","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/urlconvertible","title":"var urlConvertible: URLConvertible?","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/aferror\/multipartencodingfailurereason\/bodypartfileisdirectory(at:)","title":"case bodyPartFileIsDirectory(at: URL)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/multipartencodingfailurereason\/bodypartfilenotreachable(at:)","title":"case bodyPartFileNotReachable(at: URL)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/multipartencodingfailurereason\/bodypartfilenotreachablewitherror(aturl:error:)","title":"case bodyPartFileNotReachableWithError(atURL: URL, error: Error)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/multipartencodingfailurereason\/bodypartfilesizenotavailable(at:)","title":"case bodyPartFileSizeNotAvailable(at: URL)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/multipartencodingfailurereason\/bodypartfilesizequeryfailedwitherror(forurl:error:)","title":"case bodyPartFileSizeQueryFailedWithError(forURL: URL, error: Error)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/multipartencodingfailurereason\/bodypartfilenameinvalid(in:)","title":"case bodyPartFilenameInvalid(in: URL)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/multipartencodingfailurereason\/bodypartinputstreamcreationfailed(for:)","title":"case bodyPartInputStreamCreationFailed(for: URL)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/multipartencodingfailurereason\/bodyparturlinvalid(url:)","title":"case bodyPartURLInvalid(url: URL)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/multipartencodingfailurereason\/inputstreamreadfailed(error:)","title":"case inputStreamReadFailed(error: Error)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/multipartencodingfailurereason\/outputstreamcreationfailed(for:)","title":"case outputStreamCreationFailed(for: URL)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/multipartencodingfailurereason\/outputstreamfilealreadyexists(at:)","title":"case outputStreamFileAlreadyExists(at: URL)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/multipartencodingfailurereason\/outputstreamurlinvalid(url:)","title":"case outputStreamURLInvalid(url: URL)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/multipartencodingfailurereason\/outputstreamwritefailed(error:)","title":"case outputStreamWriteFailed(error: Error)","type":"case"}],"path":"\/documentation\/alamofire\/aferror\/multipartencodingfailurereason","title":"AFError.MultipartEncodingFailureReason","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/aferror\/parameterencoderfailurereason\/encoderfailed(error:)","title":"case encoderFailed(error: Error)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/parameterencoderfailurereason\/missingrequiredcomponent(_:)","title":"case missingRequiredComponent(RequiredComponent)","type":"case"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/aferror\/parameterencoderfailurereason\/requiredcomponent\/httpmethod(rawvalue:)","title":"case httpMethod(rawValue: String)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/parameterencoderfailurereason\/requiredcomponent\/url","title":"case url","type":"case"}],"path":"\/documentation\/alamofire\/aferror\/parameterencoderfailurereason\/requiredcomponent","title":"AFError.ParameterEncoderFailureReason.RequiredComponent","type":"enum"}],"path":"\/documentation\/alamofire\/aferror\/parameterencoderfailurereason","title":"AFError.ParameterEncoderFailureReason","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/aferror\/parameterencodingfailurereason\/customencodingfailed(error:)","title":"case customEncodingFailed(error: Error)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/parameterencodingfailurereason\/jsonencodingfailed(error:)","title":"case jsonEncodingFailed(error: Error)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/parameterencodingfailurereason\/missingurl","title":"case missingURL","type":"case"}],"path":"\/documentation\/alamofire\/aferror\/parameterencodingfailurereason","title":"AFError.ParameterEncodingFailureReason","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/aferror\/responseserializationfailurereason\/customserializationfailed(error:)","title":"case customSerializationFailed(error: Error)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/responseserializationfailurereason\/decodingfailed(error:)","title":"case decodingFailed(error: Error)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/responseserializationfailurereason\/inputdatanilorzerolength","title":"case inputDataNilOrZeroLength","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/responseserializationfailurereason\/inputfilenil","title":"case inputFileNil","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/responseserializationfailurereason\/inputfilereadfailed(at:)","title":"case inputFileReadFailed(at: URL)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/responseserializationfailurereason\/invalidemptyresponse(type:)","title":"case invalidEmptyResponse(type: String)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/responseserializationfailurereason\/jsonserializationfailed(error:)","title":"case jsonSerializationFailed(error: Error)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/responseserializationfailurereason\/stringserializationfailed(encoding:)","title":"case stringSerializationFailed(encoding: String.Encoding)","type":"case"}],"path":"\/documentation\/alamofire\/aferror\/responseserializationfailurereason","title":"AFError.ResponseSerializationFailureReason","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/aferror\/responsevalidationfailurereason\/customvalidationfailed(error:)","title":"case customValidationFailed(error: Error)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/responsevalidationfailurereason\/datafilenil","title":"case dataFileNil","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/responsevalidationfailurereason\/datafilereadfailed(at:)","title":"case dataFileReadFailed(at: URL)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/responsevalidationfailurereason\/missingcontenttype(acceptablecontenttypes:)","title":"case missingContentType(acceptableContentTypes: [String])","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/responsevalidationfailurereason\/unacceptablecontenttype(acceptablecontenttypes:responsecontenttype:)","title":"case unacceptableContentType(acceptableContentTypes: [String], responseContentType: String)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/responsevalidationfailurereason\/unacceptablestatuscode(code:)","title":"case unacceptableStatusCode(code: Int)","type":"case"}],"path":"\/documentation\/alamofire\/aferror\/responsevalidationfailurereason","title":"AFError.ResponseValidationFailureReason","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/aferror\/servertrustfailurereason\/output\/host","title":"let host: String","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/servertrustfailurereason\/output\/result","title":"let result: SecTrustResultType","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/servertrustfailurereason\/output\/status","title":"let status: OSStatus","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/servertrustfailurereason\/output\/trust","title":"let trust: SecTrust","type":"property"}],"path":"\/documentation\/alamofire\/aferror\/servertrustfailurereason\/output","title":"AFError.ServerTrustFailureReason.Output","type":"struct"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/aferror\/servertrustfailurereason\/certificatepinningfailed(host:trust:pinnedcertificates:servercertificates:)","title":"case certificatePinningFailed(host: String, trust: SecTrust, pinnedCertificates: [SecCertificate], serverCertificates: [SecCertificate])","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/servertrustfailurereason\/customevaluationfailed(error:)","title":"case customEvaluationFailed(error: Error)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/servertrustfailurereason\/defaultevaluationfailed(output:)","title":"case defaultEvaluationFailed(output: Output)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/servertrustfailurereason\/hostvalidationfailed(output:)","title":"case hostValidationFailed(output: Output)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/servertrustfailurereason\/nocertificatesfound","title":"case noCertificatesFound","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/servertrustfailurereason\/nopublickeysfound","title":"case noPublicKeysFound","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/servertrustfailurereason\/norequiredevaluator(host:)","title":"case noRequiredEvaluator(host: String)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/servertrustfailurereason\/policyapplicationfailed(trust:policy:status:)","title":"case policyApplicationFailed(trust: SecTrust, policy: SecPolicy, status: OSStatus)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/servertrustfailurereason\/publickeypinningfailed(host:trust:pinnedkeys:serverkeys:)","title":"case publicKeyPinningFailed(host: String, trust: SecTrust, pinnedKeys: [SecKey], serverKeys: [SecKey])","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/servertrustfailurereason\/revocationcheckfailed(output:options:)","title":"case revocationCheckFailed(output: Output, options: RevocationTrustEvaluator.Options)","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/servertrustfailurereason\/revocationpolicycreationfailed","title":"case revocationPolicyCreationFailed","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/servertrustfailurereason\/settinganchorcertificatesfailed(status:certificates:)","title":"case settingAnchorCertificatesFailed(status: OSStatus, certificates: [SecCertificate])","type":"case"},{"path":"\/documentation\/alamofire\/aferror\/servertrustfailurereason\/trustevaluationfailed(error:)","title":"case trustEvaluationFailed(error: Error?)","type":"case"}],"path":"\/documentation\/alamofire\/aferror\/servertrustfailurereason","title":"AFError.ServerTrustFailureReason","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/aferror\/urlrequestvalidationfailurereason\/bodydataingetrequest(_:)","title":"case bodyDataInGETRequest(Data)","type":"case"}],"path":"\/documentation\/alamofire\/aferror\/urlrequestvalidationfailurereason","title":"AFError.URLRequestValidationFailureReason","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/aferror\/asaferror","title":"var asAFError: AFError?","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/localizeddescription","title":"var localizedDescription: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/aferror\/asaferror(orfailwith:file:line:)","title":"func asAFError(orFailWith: () -> String, file: StaticString, line: UInt) -> AFError","type":"method"}],"path":"\/documentation\/alamofire\/aferror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/aferror\/errordescription-2l5tq","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/errordescription-978of","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/alamofire\/aferror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/alamofire\/aferror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/aferror","title":"AFError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/authenticationerror\/excessiverefresh","title":"case excessiveRefresh","type":"case"},{"path":"\/documentation\/alamofire\/authenticationerror\/missingcredential","title":"case missingCredential","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/alamofire\/authenticationerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/alamofire\/authenticationerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/alamofire\/authenticationerror\/asaferror","title":"var asAFError: AFError?","type":"property"},{"path":"\/documentation\/alamofire\/authenticationerror\/localizeddescription","title":"var localizedDescription: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/alamofire\/authenticationerror\/asaferror(orfailwith:file:line:)","title":"func asAFError(orFailWith: () -> String, file: StaticString, line: UInt) -> AFError","type":"method"}],"path":"\/documentation\/alamofire\/authenticationerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/alamofire\/authenticationerror","title":"AuthenticationError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/alamofire\/retryresult\/donotretry","title":"case doNotRetry","type":"case"},{"path":"\/documentation\/alamofire\/retryresult\/donotretrywitherror(_:)","title":"case doNotRetryWithError(Error)","type":"case"},{"path":"\/documentation\/alamofire\/retryresult\/retry","title":"case retry","type":"case"},{"path":"\/documentation\/alamofire\/retryresult\/retrywithdelay(_:)","title":"case retryWithDelay(TimeInterval)","type":"case"}],"path":"\/documentation\/alamofire\/retryresult","title":"RetryResult","type":"enum"}],"path":"\/documentation\/alamofire","title":"Alamofire","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/errorkit\/error\/==(_:_:)","title":"static func == (Error, Error) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/errorkit\/error\/init(fileid:filepath:file:function:line:column:message:)","title":"init(fileID: String, filePath: String, file: String, function: String, line: Int, column: Int, message: String?)","type":"init"},{"path":"\/documentation\/errorkit\/error\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/errorkit\/error\/description","title":"var description: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/errorkit\/error\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/errorkit\/error\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/errorkit\/error\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/errorkit\/error\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/errorkit\/error\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/errorkit\/error","title":"Error","type":"class"},{"path":"\/documentation\/errorkit\/indexoutofrangeerror","title":"IndexOutOfRangeError","type":"class"},{"path":"\/documentation\/errorkit\/instantiateerror","title":"InstantiateError","type":"class"},{"path":"\/documentation\/errorkit\/nilerror","title":"NilError","type":"class"},{"path":"\/documentation\/errorkit\/notfounderror","title":"NotFoundError","type":"class"},{"path":"\/documentation\/errorkit\/typecastingerror","title":"TypeCastingError","type":"class"},{"path":"\/documentation\/errorkit\/unauthorizederror","title":"UnauthorizedError","type":"class"},{"path":"\/documentation\/errorkit\/unconfigurederror","title":"UnconfiguredError","type":"class"},{"path":"\/documentation\/errorkit\/unimplementederror","title":"UnimplementedError","type":"class"},{"path":"\/documentation\/errorkit\/unknownerror","title":"UnknownError","type":"class"},{"path":"\/documentation\/errorkit\/unsupportederror","title":"UnsupportedError","type":"class"},{"path":"\/documentation\/errorkit\/validationerror","title":"ValidationError","type":"class"}],"path":"\/documentation\/errorkit","title":"ErrorKit","type":"module"},{"children":[{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/logging\/loghandler\/loglevel","title":"var logLevel: Logger.Level","type":"property"},{"path":"\/documentation\/logging\/loghandler\/metadata","title":"var metadata: Logger.Metadata","type":"property"},{"children":[{"children":[{"path":"\/documentation\/logging\/loghandler\/metadataprovider-7hq13","title":"var metadataProvider: Logger.MetadataProvider?","type":"property"}],"title":"LogHandler Implementations","type":"groupMarker"}],"path":"\/documentation\/logging\/loghandler\/metadataprovider-1vq31","title":"var metadataProvider: Logger.MetadataProvider?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/logging\/loghandler\/log(level:message:metadata:file:function:line:)-1xdau","title":"func log(level: Logging.Logger.Level, message: Logging.Logger.Message, metadata: Logging.Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"}],"title":"LogHandler Implementations","type":"groupMarker"}],"path":"\/documentation\/logging\/loghandler\/log(level:message:metadata:file:function:line:)-89rya","title":"func log(level: Logging.Logger.Level, message: Logging.Logger.Message, metadata: Logging.Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/logging\/loghandler\/log(level:message:metadata:source:file:function:line:)-69pez","title":"func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, source: String, file: String, function: String, line: UInt)","type":"method"}],"title":"LogHandler Implementations","type":"groupMarker"}],"path":"\/documentation\/logging\/loghandler\/log(level:message:metadata:source:file:function:line:)-8kgt7","title":"func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, source: String, file: String, function: String, line: UInt)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/logging\/loghandler\/subscript(metadatakey:)","title":"subscript(metadataKey _: String) -> Logger.Metadata.Value?","type":"subscript"}],"path":"\/documentation\/logging\/loghandler","title":"LogHandler","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/message\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/message\/description","title":"var description: String","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/message\/stringliteraltype","title":"Logger.Message.StringLiteralType","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/message\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/logging\/logger\/message\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/message\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/logging\/logger\/message\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/message\/init(stringinterpolation:)","title":"init(stringInterpolation: DefaultStringInterpolation)","type":"init"}],"path":"\/documentation\/logging\/logger\/message\/expressiblebystringinterpolation-implementations","title":"ExpressibleByStringInterpolation Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/message\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/logging\/logger\/message\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/logging\/logger\/message","title":"Logger.Message","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadataprovider-swift.struct\/init(_:)","title":"init(() -> Metadata)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadataprovider-swift.struct\/get()","title":"func get() -> Metadata","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadataprovider-swift.struct\/multiplex(_:)","title":"static func multiplex([Logger.MetadataProvider]) -> Logger.MetadataProvider?","type":"method"}],"path":"\/documentation\/logging\/logger\/metadataprovider-swift.struct","title":"Logger.MetadataProvider","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/init(label:)","title":"init(label: String)","type":"init"},{"path":"\/documentation\/logging\/logger\/init(label:factory:)-6iktu","title":"init(label: String, factory: (String, Logger.MetadataProvider?) -> LogHandler)","type":"init"},{"path":"\/documentation\/logging\/logger\/init(label:factory:)-9uiy2","title":"init(label: String, factory: (String) -> LogHandler)","type":"init"},{"path":"\/documentation\/logging\/logger\/init(label:metadataprovider:)","title":"init(label: String, metadataProvider: MetadataProvider)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/label","title":"let label: String","type":"property"},{"path":"\/documentation\/logging\/logger\/loglevel","title":"var logLevel: Logger.Level","type":"property"},{"path":"\/documentation\/logging\/logger\/metadataprovider-swift.property","title":"var metadataProvider: Logger.MetadataProvider?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/critical(_:metadata:file:function:line:)","title":"func critical(() -> Logger.Message, metadata: () -> Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/critical(_:metadata:source:file:function:line:)","title":"func critical(() -> Logger.Message, metadata: () -> Logger.Metadata?, source: () -> String?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/debug(_:metadata:file:function:line:)","title":"func debug(() -> Logger.Message, metadata: () -> Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/debug(_:metadata:source:file:function:line:)","title":"func debug(() -> Logger.Message, metadata: () -> Logger.Metadata?, source: () -> String?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/error(_:metadata:file:function:line:)","title":"func error(() -> Logger.Message, metadata: () -> Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/error(_:metadata:source:file:function:line:)","title":"func error(() -> Logger.Message, metadata: () -> Logger.Metadata?, source: () -> String?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/info(_:metadata:file:function:line:)","title":"func info(() -> Logger.Message, metadata: () -> Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/info(_:metadata:source:file:function:line:)","title":"func info(() -> Logger.Message, metadata: () -> Logger.Metadata?, source: () -> String?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/log(level:_:metadata:file:function:line:)","title":"func log(level: Logger.Level, () -> Logger.Message, metadata: () -> Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/log(level:_:metadata:source:file:function:line:)","title":"func log(level: Logger.Level, () -> Logger.Message, metadata: () -> Logger.Metadata?, source: () -> String?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/notice(_:metadata:file:function:line:)","title":"func notice(() -> Logger.Message, metadata: () -> Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/notice(_:metadata:source:file:function:line:)","title":"func notice(() -> Logger.Message, metadata: () -> Logger.Metadata?, source: () -> String?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/trace(_:metadata:file:function:line:)","title":"func trace(() -> Logger.Message, metadata: () -> Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/trace(_:metadata:source:file:function:line:)","title":"func trace(() -> Logger.Message, metadata: () -> Logger.Metadata?, source: () -> String?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/warning(_:metadata:file:function:line:)","title":"func warning(() -> Logger.Message, metadata: () -> Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/logging\/logger\/warning(_:metadata:source:file:function:line:)","title":"func warning(() -> Logger.Message, metadata: () -> Logger.Metadata?, source: () -> String?, file: String, function: String, line: UInt)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/subscript(metadatakey:)","title":"subscript(metadataKey _: String) -> Logger.Metadata.Value?","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadata","title":"Logger.Metadata","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/level\/critical","title":"case critical","type":"case"},{"path":"\/documentation\/logging\/logger\/level\/debug","title":"case debug","type":"case"},{"path":"\/documentation\/logging\/logger\/level\/error","title":"case error","type":"case"},{"path":"\/documentation\/logging\/logger\/level\/info","title":"case info","type":"case"},{"path":"\/documentation\/logging\/logger\/level\/notice","title":"case notice","type":"case"},{"path":"\/documentation\/logging\/logger\/level\/trace","title":"case trace","type":"case"},{"path":"\/documentation\/logging\/logger\/level\/warning","title":"case warning","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/level\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/level\/'...(_:)-181cj","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/logging\/logger\/level\/'...(_:)-9337t","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/logging\/logger\/level\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/logging\/logger\/level\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/logging\/logger\/level\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/logging\/logger\/level\/_(_:_:)-88op7","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/logging\/logger\/level\/_(_:_:)-8ts75","title":"static func < (Logger.Level, Logger.Level) -> Bool","type":"op"},{"path":"\/documentation\/logging\/logger\/level\/_=(_:_:)-27ncb","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/logging\/logger\/level\/_=(_:_:)-50v7s","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/logging\/logger\/level\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/level\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/logging\/logger\/level\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/level\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/level\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/level\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"path":"\/documentation\/logging\/logger\/level\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/logging\/logger\/level\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/logging\/logger\/level","title":"Logger.Level","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/array(_:)","title":"case array([Metadata.Value])","type":"case"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/dictionary(_:)","title":"case dictionary(Metadata)","type":"case"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/string(_:)","title":"case string(String)","type":"case"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/stringconvertible(_:)","title":"case stringConvertible(CustomStringConvertible & Sendable)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/logging\/logger\/metadatavalue\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/==(_:_:)","title":"static func == (Logger.Metadata.Value, Logger.Metadata.Value) -> Bool","type":"op"}],"path":"\/documentation\/logging\/logger\/metadatavalue\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/init(arrayliteral:)","title":"init(arrayLiteral: Logger.Metadata.Value...)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/arrayliteralelement","title":"Logger.MetadataValue.ArrayLiteralElement","type":"typealias"}],"path":"\/documentation\/logging\/logger\/metadatavalue\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/init(dictionaryliteral:)","title":"init(dictionaryLiteral: (String, Logger.Metadata.Value)...)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/key","title":"Logger.MetadataValue.Key","type":"typealias"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/value","title":"Logger.MetadataValue.Value","type":"typealias"}],"path":"\/documentation\/logging\/logger\/metadatavalue\/expressiblebydictionaryliteral-implementations","title":"ExpressibleByDictionaryLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/logging\/logger\/metadatavalue\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/init(stringinterpolation:)","title":"init(stringInterpolation: DefaultStringInterpolation)","type":"init"}],"path":"\/documentation\/logging\/logger\/metadatavalue\/expressiblebystringinterpolation-implementations","title":"ExpressibleByStringInterpolation Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/stringliteraltype","title":"Logger.MetadataValue.StringLiteralType","type":"typealias"}],"path":"\/documentation\/logging\/logger\/metadatavalue\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/logger\/metadatavalue\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/logging\/logger\/metadatavalue\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/logging\/logger\/metadatavalue","title":"Logger.MetadataValue","type":"enum"}],"path":"\/documentation\/logging\/logger","title":"Logger","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/multiplexloghandler\/init(_:)","title":"init([LogHandler])","type":"init"},{"path":"\/documentation\/logging\/multiplexloghandler\/init(_:metadataprovider:)","title":"init([LogHandler], metadataProvider: Logger.MetadataProvider?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/logging\/multiplexloghandler\/loglevel","title":"var logLevel: Logger.Level","type":"property"},{"path":"\/documentation\/logging\/multiplexloghandler\/metadata","title":"var metadata: Logger.Metadata","type":"property"},{"path":"\/documentation\/logging\/multiplexloghandler\/metadataprovider-1jyhr","title":"var metadataProvider: Logger.MetadataProvider?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/logging\/multiplexloghandler\/log(level:message:metadata:source:file:function:line:)","title":"func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, source: String, file: String, function: String, line: UInt)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/logging\/multiplexloghandler\/subscript(metadatakey:)","title":"subscript(metadataKey _: Logger.Metadata.Key) -> Logger.Metadata.Value?","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/logging\/multiplexloghandler\/metadataprovider-4fbkm","title":"var metadataProvider: Logger.MetadataProvider?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/logging\/multiplexloghandler\/log(level:message:metadata:file:function:line:)","title":"func log(level: Logging.Logger.Level, message: Logging.Logger.Message, metadata: Logging.Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"}],"path":"\/documentation\/logging\/multiplexloghandler\/loghandler-implementations","title":"LogHandler Implementations","type":"symbol"}],"path":"\/documentation\/logging\/multiplexloghandler","title":"MultiplexLogHandler","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/logging\/streamloghandler\/loglevel","title":"var logLevel: Logger.Level","type":"property"},{"path":"\/documentation\/logging\/streamloghandler\/metadata","title":"var metadata: Logger.Metadata","type":"property"},{"path":"\/documentation\/logging\/streamloghandler\/metadataprovider-7jrzy","title":"var metadataProvider: Logger.MetadataProvider?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/logging\/streamloghandler\/log(level:message:metadata:source:file:function:line:)","title":"func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, source: String, file: String, function: String, line: UInt)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/logging\/streamloghandler\/subscript(metadatakey:)","title":"subscript(metadataKey _: String) -> Logger.Metadata.Value?","type":"subscript"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/logging\/streamloghandler\/standarderror(label:)","title":"static func standardError(label: String) -> StreamLogHandler","type":"method"},{"path":"\/documentation\/logging\/streamloghandler\/standarderror(label:metadataprovider:)","title":"static func standardError(label: String, metadataProvider: Logger.MetadataProvider?) -> StreamLogHandler","type":"method"},{"path":"\/documentation\/logging\/streamloghandler\/standardoutput(label:)","title":"static func standardOutput(label: String) -> StreamLogHandler","type":"method"},{"path":"\/documentation\/logging\/streamloghandler\/standardoutput(label:metadataprovider:)","title":"static func standardOutput(label: String, metadataProvider: Logger.MetadataProvider?) -> StreamLogHandler","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/logging\/streamloghandler\/metadataprovider-6i10q","title":"var metadataProvider: Logger.MetadataProvider?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/logging\/streamloghandler\/log(level:message:metadata:file:function:line:)","title":"func log(level: Logging.Logger.Level, message: Logging.Logger.Message, metadata: Logging.Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"}],"path":"\/documentation\/logging\/streamloghandler\/loghandler-implementations","title":"LogHandler Implementations","type":"symbol"}],"path":"\/documentation\/logging\/streamloghandler","title":"StreamLogHandler","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/logging\/swiftlognooploghandler\/init()","title":"init()","type":"init"},{"path":"\/documentation\/logging\/swiftlognooploghandler\/init(_:)","title":"init(String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/logging\/swiftlognooploghandler\/loglevel","title":"var logLevel: Logger.Level","type":"property"},{"path":"\/documentation\/logging\/swiftlognooploghandler\/metadata","title":"var metadata: Logger.Metadata","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/logging\/swiftlognooploghandler\/log(level:message:metadata:file:function:line:)","title":"func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, file: String, function: String, line: UInt)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/logging\/swiftlognooploghandler\/subscript(metadatakey:)","title":"subscript(metadataKey _: String) -> Logger.Metadata.Value?","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/logging\/swiftlognooploghandler\/metadataprovider","title":"var metadataProvider: Logger.MetadataProvider?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/logging\/swiftlognooploghandler\/log(level:message:metadata:source:file:function:line:)","title":"func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?, source: String, file: String, function: String, line: UInt)","type":"method"}],"path":"\/documentation\/logging\/swiftlognooploghandler\/loghandler-implementations","title":"LogHandler Implementations","type":"symbol"}],"path":"\/documentation\/logging\/swiftlognooploghandler","title":"SwiftLogNoOpLogHandler","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/logging\/loggingsystem\/metadataprovider","title":"static var metadataProvider: Logger.MetadataProvider?","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/logging\/loggingsystem\/bootstrap(_:)","title":"static func bootstrap((String) -> LogHandler)","type":"method"},{"path":"\/documentation\/logging\/loggingsystem\/bootstrap(_:metadataprovider:)","title":"static func bootstrap((String, Logger.MetadataProvider?) -> LogHandler, metadataProvider: Logger.MetadataProvider?)","type":"method"}],"path":"\/documentation\/logging\/loggingsystem","title":"LoggingSystem","type":"enum"}],"path":"\/documentation\/logging","title":"Logging","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/moya\/cancellabletoken\/init(action:)","title":"init(action: () -> Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/cancellabletoken\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/moya\/cancellabletoken\/iscancelled","title":"var isCancelled: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/moya\/cancellabletoken\/cancel()","title":"func cancel()","type":"method"}],"path":"\/documentation\/moya\/cancellabletoken","title":"CancellableToken","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/moya\/credentialsplugin\/init(credentialsclosure:)","title":"init(credentialsClosure: CredentialClosure)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/moya\/credentialsplugin\/willsend(_:target:)","title":"func willSend(RequestType, target: TargetType)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/moya\/credentialsplugin\/credentialclosure","title":"CredentialsPlugin.CredentialClosure","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/moya\/credentialsplugin\/didreceive(_:target:)","title":"func didReceive(Result<Moya.Response, MoyaError>, target: TargetType)","type":"method"},{"path":"\/documentation\/moya\/credentialsplugin\/prepare(_:target:)","title":"func prepare(URLRequest, target: TargetType) -> URLRequest","type":"method"},{"path":"\/documentation\/moya\/credentialsplugin\/process(_:target:)","title":"func process(Result<Moya.Response, MoyaError>, target: TargetType) -> Result<Moya.Response, MoyaError>","type":"method"}],"path":"\/documentation\/moya\/credentialsplugin\/plugintype-implementations","title":"PluginType Implementations","type":"symbol"}],"path":"\/documentation\/moya\/credentialsplugin","title":"CredentialsPlugin","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/moya\/endpoint\/init(url:sampleresponseclosure:method:task:httpheaderfields:)","title":"init(url: String, sampleResponseClosure: SampleResponseClosure, method: Moya.Method, task: Task, httpHeaderFields: [String : String]?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/endpoint\/httpheaderfields","title":"let httpHeaderFields: [String : String]?","type":"property"},{"path":"\/documentation\/moya\/endpoint\/method","title":"let method: Moya.Method","type":"property"},{"path":"\/documentation\/moya\/endpoint\/sampleresponseclosure-swift.property","title":"let sampleResponseClosure: SampleResponseClosure","type":"property"},{"path":"\/documentation\/moya\/endpoint\/task","title":"let task: Task","type":"property"},{"path":"\/documentation\/moya\/endpoint\/url","title":"let url: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/moya\/endpoint\/adding(newhttpheaderfields:)","title":"func adding(newHTTPHeaderFields: [String : String]) -> Endpoint","type":"method"},{"path":"\/documentation\/moya\/endpoint\/replacing(task:)","title":"func replacing(task: Task) -> Endpoint","type":"method"},{"path":"\/documentation\/moya\/endpoint\/urlrequest()","title":"func urlRequest() throws -> URLRequest","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/moya\/endpoint\/sampleresponseclosure-swift.typealias","title":"Endpoint.SampleResponseClosure","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/moya\/endpoint\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/moya\/endpoint\/==(_:_:)","title":"static func == (Endpoint, Endpoint) -> Bool","type":"op"}],"path":"\/documentation\/moya\/endpoint\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/moya\/endpoint\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/moya\/endpoint\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/moya\/endpoint","title":"Endpoint","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/moya\/moyaprovider\/init(endpointclosure:requestclosure:stubclosure:callbackqueue:session:plugins:trackinflights:)","title":"init(endpointClosure: EndpointClosure, requestClosure: RequestClosure, stubClosure: StubClosure, callbackQueue: DispatchQueue?, session: Session, plugins: [PluginType], trackInflights: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/moyaprovider\/endpointclosure-swift.property","title":"let endpointClosure: EndpointClosure","type":"property"},{"path":"\/documentation\/moya\/moyaprovider\/inflightrequests","title":"var inflightRequests: [Endpoint : [Moya.Completion]]","type":"property"},{"path":"\/documentation\/moya\/moyaprovider\/plugins","title":"let plugins: [PluginType]","type":"property"},{"path":"\/documentation\/moya\/moyaprovider\/requestclosure-swift.property","title":"let requestClosure: RequestClosure","type":"property"},{"path":"\/documentation\/moya\/moyaprovider\/session","title":"let session: Session","type":"property"},{"path":"\/documentation\/moya\/moyaprovider\/stubclosure-swift.property","title":"let stubClosure: StubClosure","type":"property"},{"path":"\/documentation\/moya\/moyaprovider\/trackinflights","title":"let trackInflights: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/moya\/moyaprovider\/cancelcompletion(_:target:)","title":"func cancelCompletion(Moya.Completion, target: Target)","type":"method"},{"path":"\/documentation\/moya\/moyaprovider\/createstubfunction(_:fortarget:withcompletion:endpoint:plugins:request:)","title":"func createStubFunction(CancellableToken, forTarget: Target, withCompletion: Moya.Completion, endpoint: Endpoint, plugins: [PluginType], request: URLRequest) -> (() -> Void)","type":"method"},{"path":"\/documentation\/moya\/moyaprovider\/endpoint(_:)","title":"func endpoint(Target) -> Endpoint","type":"method"},{"path":"\/documentation\/moya\/moyaprovider\/notifypluginsofimpendingstub(for:target:)","title":"func notifyPluginsOfImpendingStub(for: URLRequest, target: Target) -> URLRequest","type":"method"},{"path":"\/documentation\/moya\/moyaprovider\/request(_:callbackqueue:progress:completion:)","title":"func request(Target, callbackQueue: DispatchQueue?, progress: ProgressBlock?, completion: Completion) -> Cancellable","type":"method"},{"path":"\/documentation\/moya\/moyaprovider\/requestnormal(_:callbackqueue:progress:completion:)","title":"func requestNormal(Target, callbackQueue: DispatchQueue?, progress: Moya.ProgressBlock?, completion: Moya.Completion) -> Cancellable","type":"method"},{"path":"\/documentation\/moya\/moyaprovider\/stubrequest(_:request:callbackqueue:completion:endpoint:stubbehavior:)","title":"func stubRequest(Target, request: URLRequest, callbackQueue: DispatchQueue?, completion: Moya.Completion, endpoint: Endpoint, stubBehavior: Moya.StubBehavior) -> CancellableToken","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/moya\/moyaprovider\/endpointclosure-swift.typealias","title":"MoyaProvider.EndpointClosure","type":"typealias"},{"path":"\/documentation\/moya\/moyaprovider\/requestclosure-swift.typealias","title":"MoyaProvider.RequestClosure","type":"typealias"},{"path":"\/documentation\/moya\/moyaprovider\/requestresultclosure","title":"MoyaProvider.RequestResultClosure","type":"typealias"},{"path":"\/documentation\/moya\/moyaprovider\/stubclosure-swift.typealias","title":"MoyaProvider.StubClosure","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/moya\/moyaprovider\/defaultalamofiresession()","title":"class func defaultAlamofireSession() -> Session","type":"method"},{"path":"\/documentation\/moya\/moyaprovider\/defaultendpointmapping(for:)","title":"class func defaultEndpointMapping(for: Target) -> Endpoint","type":"method"},{"path":"\/documentation\/moya\/moyaprovider\/defaultrequestmapping(for:closure:)","title":"class func defaultRequestMapping(for: Endpoint, closure: RequestResultClosure)","type":"method"},{"path":"\/documentation\/moya\/moyaprovider\/delayedstub(_:)","title":"class func delayedStub(TimeInterval) -> (Target) -> Moya.StubBehavior","type":"method"},{"path":"\/documentation\/moya\/moyaprovider\/immediatelystub(_:)","title":"class func immediatelyStub(Target) -> Moya.StubBehavior","type":"method"},{"path":"\/documentation\/moya\/moyaprovider\/neverstub(_:)","title":"class func neverStub(Target) -> Moya.StubBehavior","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/moyaprovider\/rx-swift.property","title":"var rx: Reactive<Self>","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/moyaprovider\/rx-swift.type.property","title":"static var rx: Reactive<Self>.Type","type":"property"}],"path":"\/documentation\/moya\/moyaprovider\/reactivecompatible-implementations","title":"ReactiveCompatible Implementations","type":"symbol"}],"path":"\/documentation\/moya\/moyaprovider","title":"MoyaProvider","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/moya\/networkactivityplugin\/init(networkactivityclosure:)","title":"init(networkActivityClosure: NetworkActivityClosure)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/moya\/networkactivityplugin\/didreceive(_:target:)","title":"func didReceive(Result<Moya.Response, MoyaError>, target: TargetType)","type":"method"},{"path":"\/documentation\/moya\/networkactivityplugin\/willsend(_:target:)","title":"func willSend(RequestType, target: TargetType)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/moya\/networkactivityplugin\/networkactivityclosure","title":"NetworkActivityPlugin.NetworkActivityClosure","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/moya\/networkactivityplugin\/prepare(_:target:)","title":"func prepare(URLRequest, target: TargetType) -> URLRequest","type":"method"},{"path":"\/documentation\/moya\/networkactivityplugin\/process(_:target:)","title":"func process(Result<Moya.Response, MoyaError>, target: TargetType) -> Result<Moya.Response, MoyaError>","type":"method"}],"path":"\/documentation\/moya\/networkactivityplugin\/plugintype-implementations","title":"PluginType Implementations","type":"symbol"}],"path":"\/documentation\/moya\/networkactivityplugin","title":"NetworkActivityPlugin","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/formatter-swift.struct\/init(entry:requestdata:responsedata:)","title":"init(entry: EntryFormatterType, requestData: DataFormatterType, responseData: DataFormatterType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/formatter-swift.struct\/entry","title":"var entry: EntryFormatterType","type":"property"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/formatter-swift.struct\/requestdata","title":"var requestData: DataFormatterType","type":"property"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/formatter-swift.struct\/responsedata","title":"var responseData: DataFormatterType","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/formatter-swift.struct\/dataformattertype","title":"NetworkLoggerPlugin.Configuration.Formatter.DataFormatterType","type":"typealias"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/formatter-swift.struct\/entryformattertype","title":"NetworkLoggerPlugin.Configuration.Formatter.EntryFormatterType","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/formatter-swift.struct\/defaultdataformatter(_:)","title":"static func defaultDataFormatter(Data) -> String","type":"method"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/formatter-swift.struct\/defaultentryformatter(identifier:message:target:)","title":"static func defaultEntryFormatter(identifier: String, message: String, target: TargetType) -> String","type":"method"}],"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/formatter-swift.struct","title":"NetworkLoggerPlugin.Configuration.Formatter","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/init(rawvalue:)","title":"init(rawValue: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/rawvalue","title":"let rawValue: Int","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/default","title":"static let `default`: LogOptions","type":"property"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/errorresponsebody","title":"static let errorResponseBody: LogOptions","type":"property"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/formatrequestascurl","title":"static let formatRequestAscURL: LogOptions","type":"property"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/requestbody","title":"static let requestBody: LogOptions","type":"property"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/requestheaders","title":"static let requestHeaders: LogOptions","type":"property"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/requestmethod","title":"static let requestMethod: LogOptions","type":"property"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/successresponsebody","title":"static let successResponseBody: LogOptions","type":"property"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/verbose","title":"static let verbose: LogOptions","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.struct","title":"NetworkLoggerPlugin.Configuration.LogOptions","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/init(formatter:output:logoptions:)","title":"init(formatter: Formatter, output: OutputType, logOptions: LogOptions)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/formatter-swift.property","title":"var formatter: Formatter","type":"property"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/logoptions-swift.property","title":"var logOptions: LogOptions","type":"property"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/output","title":"var output: OutputType","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/outputtype","title":"NetworkLoggerPlugin.Configuration.OutputType","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct\/defaultoutput(target:items:)","title":"static func defaultOutput(target: TargetType, items: [String])","type":"method"}],"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.struct","title":"NetworkLoggerPlugin.Configuration","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/moya\/networkloggerplugin\/init(configuration:)","title":"init(configuration: Configuration)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/networkloggerplugin\/configuration-swift.property","title":"var configuration: Configuration","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/networkloggerplugin\/default","title":"class var `default`: NetworkLoggerPlugin","type":"property"},{"path":"\/documentation\/moya\/networkloggerplugin\/verbose","title":"class var verbose: NetworkLoggerPlugin","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/moya\/networkloggerplugin\/didreceive(_:target:)","title":"func didReceive(Result<Moya.Response, MoyaError>, target: TargetType)","type":"method"},{"path":"\/documentation\/moya\/networkloggerplugin\/prepare(_:target:)","title":"func prepare(URLRequest, target: TargetType) -> URLRequest","type":"method"},{"path":"\/documentation\/moya\/networkloggerplugin\/process(_:target:)","title":"func process(Result<Moya.Response, MoyaError>, target: TargetType) -> Result<Moya.Response, MoyaError>","type":"method"},{"path":"\/documentation\/moya\/networkloggerplugin\/willsend(_:target:)","title":"func willSend(RequestType, target: TargetType)","type":"method"}],"path":"\/documentation\/moya\/networkloggerplugin\/plugintype-implementations","title":"PluginType Implementations","type":"symbol"}],"path":"\/documentation\/moya\/networkloggerplugin","title":"NetworkLoggerPlugin","type":"class"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/moya\/response\/==(_:_:)","title":"static func == (Response, Response) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/moya\/response\/init(statuscode:data:request:response:)","title":"init(statusCode: Int, data: Data, request: URLRequest?, response: HTTPURLResponse?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/response\/data","title":"let data: Data","type":"property"},{"path":"\/documentation\/moya\/response\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/moya\/response\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/moya\/response\/request","title":"let request: URLRequest?","type":"property"},{"path":"\/documentation\/moya\/response\/response","title":"let response: HTTPURLResponse?","type":"property"},{"path":"\/documentation\/moya\/response\/statuscode","title":"let statusCode: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/moya\/response\/filter(statuscode:)","title":"func filter(statusCode: Int) throws -> Response","type":"method"},{"path":"\/documentation\/moya\/response\/filter(statuscodes:)","title":"func filter<R>(statusCodes: R) throws -> Response","type":"method"},{"path":"\/documentation\/moya\/response\/filtersuccessfulstatusandredirectcodes()","title":"func filterSuccessfulStatusAndRedirectCodes() throws -> Response","type":"method"},{"path":"\/documentation\/moya\/response\/filtersuccessfulstatuscodes()","title":"func filterSuccessfulStatusCodes() throws -> Response","type":"method"},{"path":"\/documentation\/moya\/response\/map(_:atkeypath:using:failsonemptydata:)","title":"func map<D>(D.Type, atKeyPath: String?, using: JSONDecoder, failsOnEmptyData: Bool) throws -> D","type":"method"},{"path":"\/documentation\/moya\/response\/mapimage()","title":"func mapImage() throws -> Image","type":"method"},{"path":"\/documentation\/moya\/response\/mapjson(failsonemptydata:)","title":"func mapJSON(failsOnEmptyData: Bool) throws -> Any","type":"method"},{"path":"\/documentation\/moya\/response\/mapstring(atkeypath:)","title":"func mapString(atKeyPath: String?) throws -> String","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/moya\/response\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/moya\/response\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/moya\/response","title":"Response","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/accesstokenauthorizable\/authorizationtype","title":"var authorizationType: AuthorizationType?","type":"property"}],"path":"\/documentation\/moya\/accesstokenauthorizable","title":"AccessTokenAuthorizable","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/cancellable\/iscancelled","title":"var isCancelled: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/moya\/cancellable\/cancel()","title":"func cancel()","type":"method"}],"path":"\/documentation\/moya\/cancellable","title":"Cancellable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/moya\/moyaprovidertype\/target","title":"Target","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/moya\/moyaprovidertype\/request(_:callbackqueue:progress:completion:)","title":"func request(Target, callbackQueue: DispatchQueue?, progress: Moya.ProgressBlock?, completion: Moya.Completion) -> Cancellable","type":"method"}],"path":"\/documentation\/moya\/moyaprovidertype","title":"MoyaProviderType","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/moya\/plugintype\/didreceive(_:target:)-c6fc","title":"func didReceive(Result<Moya.Response, MoyaError>, target: TargetType)","type":"method"}],"title":"PluginType Implementations","type":"groupMarker"}],"path":"\/documentation\/moya\/plugintype\/didreceive(_:target:)-62sec","title":"func didReceive(Result<Moya.Response, MoyaError>, target: TargetType)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/moya\/plugintype\/prepare(_:target:)-958eh","title":"func prepare(URLRequest, target: TargetType) -> URLRequest","type":"method"}],"title":"PluginType Implementations","type":"groupMarker"}],"path":"\/documentation\/moya\/plugintype\/prepare(_:target:)-1jgmf","title":"func prepare(URLRequest, target: TargetType) -> URLRequest","type":"method"},{"children":[{"children":[{"path":"\/documentation\/moya\/plugintype\/process(_:target:)-1qbvp","title":"func process(Result<Moya.Response, MoyaError>, target: TargetType) -> Result<Moya.Response, MoyaError>","type":"method"}],"title":"PluginType Implementations","type":"groupMarker"}],"path":"\/documentation\/moya\/plugintype\/process(_:target:)-9dtlo","title":"func process(Result<Moya.Response, MoyaError>, target: TargetType) -> Result<Moya.Response, MoyaError>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/moya\/plugintype\/willsend(_:target:)-9zegl","title":"func willSend(RequestType, target: TargetType)","type":"method"}],"title":"PluginType Implementations","type":"groupMarker"}],"path":"\/documentation\/moya\/plugintype\/willsend(_:target:)-26e7e","title":"func willSend(RequestType, target: TargetType)","type":"method"}],"path":"\/documentation\/moya\/plugintype","title":"PluginType","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/requesttype\/request","title":"var request: URLRequest?","type":"property"},{"path":"\/documentation\/moya\/requesttype\/sessionheaders","title":"var sessionHeaders: [String : String]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/moya\/requesttype\/authenticate(username:password:persistence:)","title":"func authenticate(username: String, password: String, persistence: URLCredential.Persistence) -> Self","type":"method"},{"path":"\/documentation\/moya\/requesttype\/authenticate(with:)","title":"func authenticate(with: URLCredential) -> Self","type":"method"},{"path":"\/documentation\/moya\/requesttype\/curldescription(calling:)","title":"func cURLDescription(calling: (String) -> Void) -> Self","type":"method"}],"path":"\/documentation\/moya\/requesttype","title":"RequestType","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/targettype\/baseurl","title":"var baseURL: URL","type":"property"},{"path":"\/documentation\/moya\/targettype\/headers","title":"var headers: [String : String]?","type":"property"},{"path":"\/documentation\/moya\/targettype\/method","title":"var method: Moya.Method","type":"property"},{"path":"\/documentation\/moya\/targettype\/path","title":"var path: String","type":"property"},{"children":[{"children":[{"path":"\/documentation\/moya\/targettype\/sampledata-1py6s","title":"var sampleData: Data","type":"property"}],"title":"TargetType Implementations","type":"groupMarker"}],"path":"\/documentation\/moya\/targettype\/sampledata-bwx0","title":"var sampleData: Data","type":"property"},{"path":"\/documentation\/moya\/targettype\/task","title":"var task: Task","type":"property"},{"children":[{"children":[{"path":"\/documentation\/moya\/targettype\/validationtype-8zaog","title":"var validationType: ValidationType","type":"property"}],"title":"TargetType Implementations","type":"groupMarker"}],"path":"\/documentation\/moya\/targettype\/validationtype-2k9a3","title":"var validationType: ValidationType","type":"property"}],"path":"\/documentation\/moya\/targettype","title":"TargetType","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/moya\/accesstokenplugin\/init(tokenclosure:)","title":"init(tokenClosure: TokenClosure)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/accesstokenplugin\/tokenclosure-swift.property","title":"let tokenClosure: TokenClosure","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/moya\/accesstokenplugin\/prepare(_:target:)","title":"func prepare(URLRequest, target: TargetType) -> URLRequest","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/moya\/accesstokenplugin\/tokenclosure-swift.typealias","title":"AccessTokenPlugin.TokenClosure","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/moya\/accesstokenplugin\/didreceive(_:target:)","title":"func didReceive(Result<Moya.Response, MoyaError>, target: TargetType)","type":"method"},{"path":"\/documentation\/moya\/accesstokenplugin\/process(_:target:)","title":"func process(Result<Moya.Response, MoyaError>, target: TargetType) -> Result<Moya.Response, MoyaError>","type":"method"},{"path":"\/documentation\/moya\/accesstokenplugin\/willsend(_:target:)","title":"func willSend(RequestType, target: TargetType)","type":"method"}],"path":"\/documentation\/moya\/accesstokenplugin\/plugintype-implementations","title":"PluginType Implementations","type":"symbol"}],"path":"\/documentation\/moya\/accesstokenplugin","title":"AccessTokenPlugin","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/moya\/multipartformdata\/init(provider:name:filename:mimetype:)","title":"init(provider: FormDataProvider, name: String, fileName: String?, mimeType: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/multipartformdata\/filename","title":"let fileName: String?","type":"property"},{"path":"\/documentation\/moya\/multipartformdata\/mimetype","title":"let mimeType: String?","type":"property"},{"path":"\/documentation\/moya\/multipartformdata\/name","title":"let name: String","type":"property"},{"path":"\/documentation\/moya\/multipartformdata\/provider","title":"let provider: FormDataProvider","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/moya\/multipartformdata\/formdataprovider\/data(_:)","title":"case data(Foundation.Data)","type":"case"},{"path":"\/documentation\/moya\/multipartformdata\/formdataprovider\/file(_:)","title":"case file(URL)","type":"case"},{"path":"\/documentation\/moya\/multipartformdata\/formdataprovider\/stream(_:_:)","title":"case stream(InputStream, UInt64)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/moya\/multipartformdata\/formdataprovider\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/moya\/multipartformdata\/formdataprovider\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/moya\/multipartformdata\/formdataprovider","title":"MultipartFormData.FormDataProvider","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/moya\/multipartformdata\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/moya\/multipartformdata\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/moya\/multipartformdata","title":"MultipartFormData","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/moya\/progressresponse\/init(progress:response:)","title":"init(progress: Progress?, response: Response?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/progressresponse\/completed","title":"var completed: Bool","type":"property"},{"path":"\/documentation\/moya\/progressresponse\/progress","title":"var progress: Double","type":"property"},{"path":"\/documentation\/moya\/progressresponse\/progressobject","title":"let progressObject: Progress?","type":"property"},{"path":"\/documentation\/moya\/progressresponse\/response","title":"let response: Response?","type":"property"}],"path":"\/documentation\/moya\/progressresponse","title":"ProgressResponse","type":"struct"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/moya\/convertresponsetoresult(_:request:data:error:)","title":"func convertResponseToResult(HTTPURLResponse?, request: URLRequest?, data: Data?, error: Swift.Error?) -> Result<Moya.Response, MoyaError>","type":"func"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/moya\/completion","title":"Completion","type":"typealias"},{"path":"\/documentation\/moya\/downloaddestination","title":"DownloadDestination","type":"typealias"},{"path":"\/documentation\/moya\/image","title":"Image","type":"typealias"},{"path":"\/documentation\/moya\/imagetype","title":"ImageType","type":"typealias"},{"path":"\/documentation\/moya\/jsonencoding","title":"JSONEncoding","type":"typealias"},{"path":"\/documentation\/moya\/method","title":"Method","type":"typealias"},{"path":"\/documentation\/moya\/parameterencoding","title":"ParameterEncoding","type":"typealias"},{"path":"\/documentation\/moya\/progressblock","title":"ProgressBlock","type":"typealias"},{"path":"\/documentation\/moya\/requestinterceptor","title":"RequestInterceptor","type":"typealias"},{"path":"\/documentation\/moya\/requestmultipartformdata","title":"RequestMultipartFormData","type":"typealias"},{"path":"\/documentation\/moya\/session","title":"Session","type":"typealias"},{"path":"\/documentation\/moya\/urlencoding","title":"URLEncoding","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/moya\/authorizationtype\/basic","title":"case basic","type":"case"},{"path":"\/documentation\/moya\/authorizationtype\/bearer","title":"case bearer","type":"case"},{"path":"\/documentation\/moya\/authorizationtype\/custom(_:)","title":"case custom(String)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/authorizationtype\/value","title":"var value: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/moya\/authorizationtype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/moya\/authorizationtype\/==(_:_:)","title":"static func == (AuthorizationType, AuthorizationType) -> Bool","type":"op"}],"path":"\/documentation\/moya\/authorizationtype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/moya\/authorizationtype","title":"AuthorizationType","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/moya\/endpointsampleresponse\/networkerror(_:)","title":"case networkError(NSError)","type":"case"},{"path":"\/documentation\/moya\/endpointsampleresponse\/networkresponse(_:_:)","title":"case networkResponse(Int, Data)","type":"case"},{"path":"\/documentation\/moya\/endpointsampleresponse\/response(_:_:)","title":"case response(HTTPURLResponse, Data)","type":"case"}],"path":"\/documentation\/moya\/endpointsampleresponse","title":"EndpointSampleResponse","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/moya\/moyaerror\/encodablemapping(_:)","title":"case encodableMapping(Swift.Error)","type":"case"},{"path":"\/documentation\/moya\/moyaerror\/imagemapping(_:)","title":"case imageMapping(Response)","type":"case"},{"path":"\/documentation\/moya\/moyaerror\/jsonmapping(_:)","title":"case jsonMapping(Response)","type":"case"},{"path":"\/documentation\/moya\/moyaerror\/objectmapping(_:_:)","title":"case objectMapping(Swift.Error, Response)","type":"case"},{"path":"\/documentation\/moya\/moyaerror\/parameterencoding(_:)","title":"case parameterEncoding(Swift.Error)","type":"case"},{"path":"\/documentation\/moya\/moyaerror\/requestmapping(_:)","title":"case requestMapping(String)","type":"case"},{"path":"\/documentation\/moya\/moyaerror\/statuscode(_:)","title":"case statusCode(Response)","type":"case"},{"path":"\/documentation\/moya\/moyaerror\/stringmapping(_:)","title":"case stringMapping(Response)","type":"case"},{"path":"\/documentation\/moya\/moyaerror\/underlying(_:_:)","title":"case underlying(Swift.Error, Response?)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/moyaerror\/response","title":"var response: Moya.Response?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/moyaerror\/errorcode","title":"var errorCode: Int","type":"property"},{"path":"\/documentation\/moya\/moyaerror\/erroruserinfo-2ux34","title":"var errorUserInfo: [String : Any]","type":"property"},{"path":"\/documentation\/moya\/moyaerror\/erroruserinfo-8quez","title":"var errorUserInfo: [String : Any]","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/moyaerror\/errordomain","title":"static var errorDomain: String","type":"property"}],"path":"\/documentation\/moya\/moyaerror\/customnserror-implementations","title":"CustomNSError Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/moyaerror\/asaferror","title":"var asAFError: AFError?","type":"property"},{"path":"\/documentation\/moya\/moyaerror\/localizeddescription","title":"var localizedDescription: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/moya\/moyaerror\/asaferror(orfailwith:file:line:)","title":"func asAFError(orFailWith: () -> String, file: StaticString, line: UInt) -> AFError","type":"method"}],"path":"\/documentation\/moya\/moyaerror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/moyaerror\/errordescription-53xph","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/moya\/moyaerror\/errordescription-wyji","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/moya\/moyaerror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/moya\/moyaerror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/moya\/moyaerror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/moya\/moyaerror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/moya\/moyaerror","title":"MoyaError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/moya\/multitarget\/target(_:)","title":"case target(TargetType)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/moya\/multitarget\/init(_:)","title":"init(TargetType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/multitarget\/baseurl","title":"var baseURL: URL","type":"property"},{"path":"\/documentation\/moya\/multitarget\/headers","title":"var headers: [String : String]?","type":"property"},{"path":"\/documentation\/moya\/multitarget\/method","title":"var method: Moya.Method","type":"property"},{"path":"\/documentation\/moya\/multitarget\/path","title":"var path: String","type":"property"},{"path":"\/documentation\/moya\/multitarget\/sampledata-7x79g","title":"var sampleData: Data","type":"property"},{"path":"\/documentation\/moya\/multitarget\/target","title":"var target: TargetType","type":"property"},{"path":"\/documentation\/moya\/multitarget\/task","title":"var task: Task","type":"property"},{"path":"\/documentation\/moya\/multitarget\/validationtype-7ijr9","title":"var validationType: ValidationType","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/multitarget\/authorizationtype","title":"var authorizationType: AuthorizationType?","type":"property"}],"path":"\/documentation\/moya\/multitarget\/accesstokenauthorizable-implementations","title":"AccessTokenAuthorizable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/moya\/multitarget\/sampledata-1gqag","title":"var sampleData: Data","type":"property"},{"path":"\/documentation\/moya\/multitarget\/validationtype-8ewrb","title":"var validationType: ValidationType","type":"property"}],"path":"\/documentation\/moya\/multitarget\/targettype-implementations","title":"TargetType Implementations","type":"symbol"}],"path":"\/documentation\/moya\/multitarget","title":"MultiTarget","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/moya\/networkactivitychangetype\/began","title":"case began","type":"case"},{"path":"\/documentation\/moya\/networkactivitychangetype\/ended","title":"case ended","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/moya\/networkactivitychangetype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/moya\/networkactivitychangetype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/moya\/networkactivitychangetype","title":"NetworkActivityChangeType","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/moya\/stubbehavior\/delayed(seconds:)","title":"case delayed(seconds: TimeInterval)","type":"case"},{"path":"\/documentation\/moya\/stubbehavior\/immediate","title":"case immediate","type":"case"},{"path":"\/documentation\/moya\/stubbehavior\/never","title":"case never","type":"case"}],"path":"\/documentation\/moya\/stubbehavior","title":"StubBehavior","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/moya\/task\/downloaddestination(_:)","title":"case downloadDestination(DownloadDestination)","type":"case"},{"path":"\/documentation\/moya\/task\/downloadparameters(parameters:encoding:destination:)","title":"case downloadParameters(parameters: [String : Any], encoding: ParameterEncoding, destination: DownloadDestination)","type":"case"},{"path":"\/documentation\/moya\/task\/requestcompositedata(bodydata:urlparameters:)","title":"case requestCompositeData(bodyData: Data, urlParameters: [String : Any])","type":"case"},{"path":"\/documentation\/moya\/task\/requestcompositeparameters(bodyparameters:bodyencoding:urlparameters:)","title":"case requestCompositeParameters(bodyParameters: [String : Any], bodyEncoding: ParameterEncoding, urlParameters: [String : Any])","type":"case"},{"path":"\/documentation\/moya\/task\/requestcustomjsonencodable(_:encoder:)","title":"case requestCustomJSONEncodable(Encodable, encoder: JSONEncoder)","type":"case"},{"path":"\/documentation\/moya\/task\/requestdata(_:)","title":"case requestData(Data)","type":"case"},{"path":"\/documentation\/moya\/task\/requestjsonencodable(_:)","title":"case requestJSONEncodable(Encodable)","type":"case"},{"path":"\/documentation\/moya\/task\/requestparameters(parameters:encoding:)","title":"case requestParameters(parameters: [String : Any], encoding: ParameterEncoding)","type":"case"},{"path":"\/documentation\/moya\/task\/requestplain","title":"case requestPlain","type":"case"},{"path":"\/documentation\/moya\/task\/uploadcompositemultipart(_:urlparameters:)","title":"case uploadCompositeMultipart([MultipartFormData], urlParameters: [String : Any])","type":"case"},{"path":"\/documentation\/moya\/task\/uploadfile(_:)","title":"case uploadFile(URL)","type":"case"},{"path":"\/documentation\/moya\/task\/uploadmultipart(_:)","title":"case uploadMultipart([MultipartFormData])","type":"case"}],"path":"\/documentation\/moya\/task","title":"Task","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/moya\/validationtype\/customcodes(_:)","title":"case customCodes([Int])","type":"case"},{"path":"\/documentation\/moya\/validationtype\/none","title":"case none","type":"case"},{"path":"\/documentation\/moya\/validationtype\/successandredirectcodes","title":"case successAndRedirectCodes","type":"case"},{"path":"\/documentation\/moya\/validationtype\/successcodes","title":"case successCodes","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/moya\/validationtype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/moya\/validationtype\/==(_:_:)","title":"static func == (ValidationType, ValidationType) -> Bool","type":"op"}],"path":"\/documentation\/moya\/validationtype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/moya\/validationtype","title":"ValidationType","type":"enum"}],"path":"\/documentation\/moya","title":"Moya","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/opggtestapiprovider\/download(url:)","title":"func download(url: URL) -> Single<URL>","type":"method"},{"path":"\/documentation\/opggtestapikit\/opggtestapiprovider\/download(url:completionhandler:)","title":"func download(url: URL, completionHandler: (Result<URL, Swift.Error>) -> Void) -> Disposable","type":"method"},{"path":"\/documentation\/opggtestapikit\/opggtestapiprovider\/request(target:mappabletype:)","title":"func request<T>(target: OPGGTestAPI, mappableType: T.Type) -> Single<T>","type":"method"},{"path":"\/documentation\/opggtestapikit\/opggtestapiprovider\/request(target:mappabletype:completionhandler:)","title":"func request<T>(target: OPGGTestAPI, mappableType: T.Type, completionHandler: (Result<T, Swift.Error>) -> Void) -> Disposable","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/opggtestapiprovider\/shared","title":"static let shared: OPGGTestAPIProvider","type":"property"}],"path":"\/documentation\/opggtestapikit\/opggtestapiprovider","title":"OPGGTestAPIProvider","type":"class"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/game\/champion-swift.property","title":"var champion: Champion","type":"property"},{"path":"\/documentation\/opggtestapikit\/game\/createdate","title":"var createDate: Date","type":"property"},{"path":"\/documentation\/opggtestapikit\/game\/gameid","title":"var gameID: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/game\/gamelength","title":"var gameLength: TimeInterval","type":"property"},{"path":"\/documentation\/opggtestapikit\/game\/gametype","title":"var gameType: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/game\/iswin","title":"var isWin: Bool","type":"property"},{"path":"\/documentation\/opggtestapikit\/game\/items","title":"var items: [Item]","type":"property"},{"path":"\/documentation\/opggtestapikit\/game\/mmr","title":"var mmr: Int?","type":"property"},{"path":"\/documentation\/opggtestapikit\/game\/needrenew","title":"var needRenew: Bool","type":"property"},{"path":"\/documentation\/opggtestapikit\/game\/peak","title":"var peak: [URL]","type":"property"},{"path":"\/documentation\/opggtestapikit\/game\/spells","title":"var spells: [Spell]","type":"property"},{"path":"\/documentation\/opggtestapikit\/game\/stats","title":"var stats: Stats","type":"property"},{"path":"\/documentation\/opggtestapikit\/game\/summonerid","title":"var summonerID: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/game\/summonername","title":"var summonerName: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/game\/tierrankshort","title":"var tierRankShort: String","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/game\/champion-swift.typealias","title":"Game.Champion","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/game\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/opggtestapikit\/game\/decodable-implementations","title":"Decodable Implementations","type":"symbol"}],"path":"\/documentation\/opggtestapikit\/game","title":"Game","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/gamechampion\/imageurl","title":"var imageURL: URL","type":"property"},{"path":"\/documentation\/opggtestapikit\/gamechampion\/level","title":"var level: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/gamechampion\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/opggtestapikit\/gamechampion\/decodable-implementations","title":"Decodable Implementations","type":"symbol"}],"path":"\/documentation\/opggtestapikit\/gamechampion","title":"GameChampion","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/general\/assist","title":"var assist: Int","type":"property"},{"path":"\/documentation\/opggtestapikit\/general\/contributionforkillrate","title":"var contributionForKillRate: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/general\/cs","title":"var cs: Int","type":"property"},{"path":"\/documentation\/opggtestapikit\/general\/cspermin","title":"var csPerMin: Double","type":"property"},{"path":"\/documentation\/opggtestapikit\/general\/death","title":"var death: Int","type":"property"},{"path":"\/documentation\/opggtestapikit\/general\/goldearned","title":"var goldEarned: Int","type":"property"},{"path":"\/documentation\/opggtestapikit\/general\/kdastring","title":"var kdaString: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/general\/kill","title":"var kill: Int","type":"property"},{"path":"\/documentation\/opggtestapikit\/general\/largestmultikillstring","title":"var largestMultiKillString: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/general\/opscorebadge","title":"var opScoreBadge: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/general\/totaldamagedealttochampions","title":"var totalDamageDealtToChampions: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/general\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/opggtestapikit\/general\/decodable-implementations","title":"Decodable Implementations","type":"symbol"}],"path":"\/documentation\/opggtestapikit\/general","title":"General","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/item\/imageurl","title":"var imageURL: URL","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/item\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/opggtestapikit\/item\/decodable-implementations","title":"Decodable Implementations","type":"symbol"}],"path":"\/documentation\/opggtestapikit\/item","title":"Item","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/ladderrank\/rank","title":"var rank: Int","type":"property"},{"path":"\/documentation\/opggtestapikit\/ladderrank\/rankpercentoftop","title":"var rankPercentOfTop: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/ladderrank\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/opggtestapikit\/ladderrank\/decodable-implementations","title":"Decodable Implementations","type":"symbol"}],"path":"\/documentation\/opggtestapikit\/ladderrank","title":"LadderRank","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/league\/hasresults","title":"var hasResults: Bool","type":"property"},{"path":"\/documentation\/opggtestapikit\/league\/losses","title":"var losses: Int","type":"property"},{"path":"\/documentation\/opggtestapikit\/league\/tierrank","title":"var tierRank: TierRank","type":"property"},{"path":"\/documentation\/opggtestapikit\/league\/wins","title":"var wins: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/league\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/opggtestapikit\/league\/decodable-implementations","title":"Decodable Implementations","type":"symbol"}],"path":"\/documentation\/opggtestapikit\/league","title":"League","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/matchchampion\/assists","title":"var assists: Int","type":"property"},{"path":"\/documentation\/opggtestapikit\/matchchampion\/deaths","title":"var deaths: Int","type":"property"},{"path":"\/documentation\/opggtestapikit\/matchchampion\/games","title":"var games: Int","type":"property"},{"path":"\/documentation\/opggtestapikit\/matchchampion\/id","title":"var id: Int","type":"property"},{"path":"\/documentation\/opggtestapikit\/matchchampion\/imageurl","title":"var imageURL: URL","type":"property"},{"path":"\/documentation\/opggtestapikit\/matchchampion\/key","title":"var key: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/matchchampion\/kills","title":"var kills: Int","type":"property"},{"path":"\/documentation\/opggtestapikit\/matchchampion\/losses","title":"var losses: Int","type":"property"},{"path":"\/documentation\/opggtestapikit\/matchchampion\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/matchchampion\/wins","title":"var wins: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/matchchampion\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/opggtestapikit\/matchchampion\/decodable-implementations","title":"Decodable Implementations","type":"symbol"}],"path":"\/documentation\/opggtestapikit\/matchchampion","title":"MatchChampion","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/matches\/champions","title":"var champions: [Champion]","type":"property"},{"path":"\/documentation\/opggtestapikit\/matches\/games","title":"var games: [Game]","type":"property"},{"path":"\/documentation\/opggtestapikit\/matches\/positions","title":"var positions: [Position]","type":"property"},{"path":"\/documentation\/opggtestapikit\/matches\/summary","title":"var summary: Summary","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/matches\/champion","title":"Matches.Champion","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/matches\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/opggtestapikit\/matches\/decodable-implementations","title":"Decodable Implementations","type":"symbol"}],"path":"\/documentation\/opggtestapikit\/matches","title":"Matches","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/position\/games","title":"var games: Int","type":"property"},{"path":"\/documentation\/opggtestapikit\/position\/losses","title":"var losses: Int","type":"property"},{"path":"\/documentation\/opggtestapikit\/position\/position","title":"var position: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/position\/positionname","title":"var positionName: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/position\/wins","title":"var wins: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/position\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/opggtestapikit\/position\/decodable-implementations","title":"Decodable Implementations","type":"symbol"}],"path":"\/documentation\/opggtestapikit\/position","title":"Position","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/spell\/imageurl","title":"var imageURL: URL","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/spell\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/opggtestapikit\/spell\/decodable-implementations","title":"Decodable Implementations","type":"symbol"}],"path":"\/documentation\/opggtestapikit\/spell","title":"Spell","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/stats\/general","title":"var general: General","type":"property"},{"path":"\/documentation\/opggtestapikit\/stats\/ward","title":"var ward: Ward","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/stats\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/opggtestapikit\/stats\/decodable-implementations","title":"Decodable Implementations","type":"symbol"}],"path":"\/documentation\/opggtestapikit\/stats","title":"Stats","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/summary\/assists","title":"var assists: Int","type":"property"},{"path":"\/documentation\/opggtestapikit\/summary\/deaths","title":"var deaths: Int","type":"property"},{"path":"\/documentation\/opggtestapikit\/summary\/kills","title":"var kills: Int","type":"property"},{"path":"\/documentation\/opggtestapikit\/summary\/losses","title":"var losses: Int","type":"property"},{"path":"\/documentation\/opggtestapikit\/summary\/wins","title":"var wins: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/summary\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/opggtestapikit\/summary\/decodable-implementations","title":"Decodable Implementations","type":"symbol"}],"path":"\/documentation\/opggtestapikit\/summary","title":"Summary","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/summoner\/ladderrank","title":"var ladderRank: LadderRank","type":"property"},{"path":"\/documentation\/opggtestapikit\/summoner\/leagues","title":"var leagues: [League]","type":"property"},{"path":"\/documentation\/opggtestapikit\/summoner\/level","title":"var level: Int","type":"property"},{"path":"\/documentation\/opggtestapikit\/summoner\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/summoner\/previoustiers","title":"var previousTiers: [Tier]","type":"property"},{"path":"\/documentation\/opggtestapikit\/summoner\/profilebackgroundimageurl","title":"var profileBackgroundImageURL: URL","type":"property"},{"path":"\/documentation\/opggtestapikit\/summoner\/profileborderimageurl","title":"var profileBorderImageURL: URL","type":"property"},{"path":"\/documentation\/opggtestapikit\/summoner\/profileimageurl","title":"var profileImageURL: URL","type":"property"},{"path":"\/documentation\/opggtestapikit\/summoner\/url","title":"var url: URL","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/summoner\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/opggtestapikit\/summoner\/decodable-implementations","title":"Decodable Implementations","type":"symbol"}],"path":"\/documentation\/opggtestapikit\/summoner","title":"Summoner","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/tier\/division","title":"var division: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/tier\/imageurl","title":"var imageURL: URL","type":"property"},{"path":"\/documentation\/opggtestapikit\/tier\/lp","title":"var lp: Int","type":"property"},{"path":"\/documentation\/opggtestapikit\/tier\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/tier\/season","title":"var season: Int","type":"property"},{"path":"\/documentation\/opggtestapikit\/tier\/shortstring","title":"var shortString: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/tier\/string","title":"var string: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/tier\/tier","title":"var tier: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/tier\/tierdivision","title":"var tierDivision: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/tier\/tierrankpoint","title":"var tierRankPoint: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/tier\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/opggtestapikit\/tier\/decodable-implementations","title":"Decodable Implementations","type":"symbol"}],"path":"\/documentation\/opggtestapikit\/tier","title":"Tier","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/tierrank\/division","title":"var division: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/tierrank\/imageurl","title":"var imageURL: URL","type":"property"},{"path":"\/documentation\/opggtestapikit\/tierrank\/lp","title":"var lp: Int","type":"property"},{"path":"\/documentation\/opggtestapikit\/tierrank\/name","title":"var name: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/tierrank\/shortstring","title":"var shortString: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/tierrank\/string","title":"var string: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/tierrank\/tier","title":"var tier: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/tierrank\/tierdivision","title":"var tierDivision: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/tierrank\/tierrankpoint","title":"var tierRankPoint: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/tierrank\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/opggtestapikit\/tierrank\/decodable-implementations","title":"Decodable Implementations","type":"symbol"}],"path":"\/documentation\/opggtestapikit\/tierrank","title":"TierRank","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/ward\/sightwardsbought","title":"var sightWardsBought: Int","type":"property"},{"path":"\/documentation\/opggtestapikit\/ward\/visionwardsbought","title":"var visionWardsBought: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/ward\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/opggtestapikit\/ward\/decodable-implementations","title":"Decodable Implementations","type":"symbol"}],"path":"\/documentation\/opggtestapikit\/ward","title":"Ward","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/opggtestapi\/matches(name:lastmatch:)","title":"case matches(name: String, lastMatch: TimeInterval?)","type":"case"},{"path":"\/documentation\/opggtestapikit\/opggtestapi\/summoner(name:)","title":"case summoner(name: String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/opggtestapikit\/opggtestapi\/baseurl","title":"var baseURL: URL","type":"property"},{"path":"\/documentation\/opggtestapikit\/opggtestapi\/headers","title":"var headers: [String : String]?","type":"property"},{"path":"\/documentation\/opggtestapikit\/opggtestapi\/method","title":"var method: Moya.Method","type":"property"},{"path":"\/documentation\/opggtestapikit\/opggtestapi\/path","title":"var path: String","type":"property"},{"path":"\/documentation\/opggtestapikit\/opggtestapi\/sampledata-2ensy","title":"var sampleData: Data","type":"property"},{"path":"\/documentation\/opggtestapikit\/opggtestapi\/sampledata-8utfq","title":"var sampleData: Data","type":"property"},{"path":"\/documentation\/opggtestapikit\/opggtestapi\/task","title":"var task: Task","type":"property"},{"path":"\/documentation\/opggtestapikit\/opggtestapi\/validationtype","title":"var validationType: ValidationType","type":"property"}],"path":"\/documentation\/opggtestapikit\/opggtestapi\/targettype-implementations","title":"TargetType Implementations","type":"symbol"}],"path":"\/documentation\/opggtestapikit\/opggtestapi","title":"OPGGTestAPI","type":"enum"}],"path":"\/documentation\/opggtestapikit","title":"OPGGTestAPIKit","type":"module"},{"path":"\/documentation\/rxmoya","title":"RxMoya","type":"module"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rxswift\/asyncsubject\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/asyncsubject\/hasobservers","title":"var hasObservers: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/asyncsubject\/asobserver()","title":"func asObserver() -> AsyncSubject<Element>","type":"method"},{"path":"\/documentation\/rxswift\/asyncsubject\/on(_:)","title":"func on(Event<Element>)","type":"method"},{"path":"\/documentation\/rxswift\/asyncsubject\/subscribe(_:)","title":"func subscribe<Observer>(Observer) -> Disposable","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/rxswift\/asyncsubject\/subjectobservertype","title":"AsyncSubject.SubjectObserverType","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/asyncsubject\/mapobserver(_:)","title":"func mapObserver<Result>((Result) throws -> Element) -> AnyObserver<Result>","type":"method"},{"path":"\/documentation\/rxswift\/asyncsubject\/oncompleted()","title":"func onCompleted()","type":"method"},{"path":"\/documentation\/rxswift\/asyncsubject\/onerror(_:)","title":"func onError(Swift.Error)","type":"method"},{"path":"\/documentation\/rxswift\/asyncsubject\/onnext(_:)","title":"func onNext(Element)","type":"method"}],"path":"\/documentation\/rxswift\/asyncsubject\/observertype-implementations","title":"ObserverType Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/asyncsubject","title":"AsyncSubject","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rxswift\/behaviorsubject\/init(value:)","title":"init(value: Element)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/behaviorsubject\/hasobservers","title":"var hasObservers: Bool","type":"property"},{"path":"\/documentation\/rxswift\/behaviorsubject\/isdisposed","title":"var isDisposed: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/behaviorsubject\/asobserver()","title":"func asObserver() -> BehaviorSubject<Element>","type":"method"},{"path":"\/documentation\/rxswift\/behaviorsubject\/dispose()","title":"func dispose()","type":"method"},{"path":"\/documentation\/rxswift\/behaviorsubject\/on(_:)","title":"func on(Event<Element>)","type":"method"},{"path":"\/documentation\/rxswift\/behaviorsubject\/subscribe(_:)","title":"func subscribe<Observer>(Observer) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/behaviorsubject\/value()","title":"func value() throws -> Element","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/rxswift\/behaviorsubject\/subjectobservertype","title":"BehaviorSubject.SubjectObserverType","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/behaviorsubject\/disposed(by:)","title":"func disposed(by: DisposeBag)","type":"method"}],"path":"\/documentation\/rxswift\/behaviorsubject\/disposable-implementations","title":"Disposable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/behaviorsubject\/mapobserver(_:)","title":"func mapObserver<Result>((Result) throws -> Element) -> AnyObserver<Result>","type":"method"},{"path":"\/documentation\/rxswift\/behaviorsubject\/oncompleted()","title":"func onCompleted()","type":"method"},{"path":"\/documentation\/rxswift\/behaviorsubject\/onerror(_:)","title":"func onError(Swift.Error)","type":"method"},{"path":"\/documentation\/rxswift\/behaviorsubject\/onnext(_:)","title":"func onNext(Element)","type":"method"}],"path":"\/documentation\/rxswift\/behaviorsubject\/observertype-implementations","title":"ObserverType Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/behaviorsubject","title":"BehaviorSubject","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rxswift\/booleandisposable\/init()","title":"init()","type":"init"},{"path":"\/documentation\/rxswift\/booleandisposable\/init(isdisposed:)","title":"init(isDisposed: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/booleandisposable\/isdisposed","title":"var isDisposed: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/booleandisposable\/dispose()","title":"func dispose()","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/booleandisposable\/disposed(by:)","title":"func disposed(by: DisposeBag)","type":"method"}],"path":"\/documentation\/rxswift\/booleandisposable\/disposable-implementations","title":"Disposable Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/booleandisposable","title":"BooleanDisposable","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"path":"\/documentation\/rxswift\/compositedisposable\/disposekey","title":"CompositeDisposable.DisposeKey","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rxswift\/compositedisposable\/init()","title":"init()","type":"init"},{"path":"\/documentation\/rxswift\/compositedisposable\/init(_:_:)","title":"init(Disposable, Disposable)","type":"init"},{"path":"\/documentation\/rxswift\/compositedisposable\/init(_:_:_:)","title":"init(Disposable, Disposable, Disposable)","type":"init"},{"path":"\/documentation\/rxswift\/compositedisposable\/init(_:_:_:_:_:)","title":"init(Disposable, Disposable, Disposable, Disposable, Disposable...)","type":"init"},{"path":"\/documentation\/rxswift\/compositedisposable\/init(disposables:)","title":"init(disposables: [Disposable])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/compositedisposable\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/rxswift\/compositedisposable\/isdisposed","title":"var isDisposed: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/compositedisposable\/dispose()","title":"func dispose()","type":"method"},{"path":"\/documentation\/rxswift\/compositedisposable\/insert(_:)","title":"func insert(Disposable) -> DisposeKey?","type":"method"},{"path":"\/documentation\/rxswift\/compositedisposable\/remove(for:)","title":"func remove(for: DisposeKey)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/compositedisposable\/disposed(by:)","title":"func disposed(by: DisposeBag)","type":"method"}],"path":"\/documentation\/rxswift\/compositedisposable\/disposable-implementations","title":"Disposable Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/compositedisposable","title":"CompositeDisposable","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rxswift\/concurrentdispatchqueuescheduler\/init(qos:leeway:)","title":"init(qos: DispatchQoS, leeway: DispatchTimeInterval)","type":"init"},{"path":"\/documentation\/rxswift\/concurrentdispatchqueuescheduler\/init(queue:leeway:)","title":"init(queue: DispatchQueue, leeway: DispatchTimeInterval)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/concurrentdispatchqueuescheduler\/now","title":"var now: Date","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/concurrentdispatchqueuescheduler\/schedule(_:action:)","title":"func schedule<StateType>(StateType, action: (StateType) -> Disposable) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/concurrentdispatchqueuescheduler\/scheduleperiodic(_:startafter:period:action:)-8mcx5","title":"func schedulePeriodic<StateType>(StateType, startAfter: RxTimeInterval, period: RxTimeInterval, action: (StateType) -> StateType) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/concurrentdispatchqueuescheduler\/schedulerelative(_:duetime:action:)","title":"func scheduleRelative<StateType>(StateType, dueTime: RxTimeInterval, action: (StateType) -> Disposable) -> Disposable","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/rxswift\/concurrentdispatchqueuescheduler\/time","title":"ConcurrentDispatchQueueScheduler.Time","type":"typealias"},{"path":"\/documentation\/rxswift\/concurrentdispatchqueuescheduler\/timeinterval","title":"ConcurrentDispatchQueueScheduler.TimeInterval","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/concurrentdispatchqueuescheduler\/schedulerecursive(_:action:)","title":"func scheduleRecursive<State>(State, action: (_ state: State, _ recurse: (State) -> Void) -> Void) -> Disposable","type":"method"}],"path":"\/documentation\/rxswift\/concurrentdispatchqueuescheduler\/immediateschedulertype-implementations","title":"ImmediateSchedulerType Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/concurrentdispatchqueuescheduler\/scheduleperiodic(_:startafter:period:action:)-1wr9p","title":"func schedulePeriodic<StateType>(StateType, startAfter: RxTimeInterval, period: RxTimeInterval, action: (StateType) -> StateType) -> Disposable","type":"method"}],"path":"\/documentation\/rxswift\/concurrentdispatchqueuescheduler\/schedulertype-implementations","title":"SchedulerType Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/concurrentdispatchqueuescheduler","title":"ConcurrentDispatchQueueScheduler","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/concurrentmainscheduler\/now","title":"var now: Date","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/concurrentmainscheduler\/schedule(_:action:)","title":"func schedule<StateType>(StateType, action: (StateType) -> Disposable) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/concurrentmainscheduler\/scheduleperiodic(_:startafter:period:action:)-9e5fw","title":"func schedulePeriodic<StateType>(StateType, startAfter: RxTimeInterval, period: RxTimeInterval, action: (StateType) -> StateType) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/concurrentmainscheduler\/schedulerelative(_:duetime:action:)","title":"func scheduleRelative<StateType>(StateType, dueTime: RxTimeInterval, action: (StateType) -> Disposable) -> Disposable","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/rxswift\/concurrentmainscheduler\/time","title":"ConcurrentMainScheduler.Time","type":"typealias"},{"path":"\/documentation\/rxswift\/concurrentmainscheduler\/timeinterval","title":"ConcurrentMainScheduler.TimeInterval","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/concurrentmainscheduler\/instance","title":"static let instance: ConcurrentMainScheduler","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/concurrentmainscheduler\/schedulerecursive(_:action:)","title":"func scheduleRecursive<State>(State, action: (_ state: State, _ recurse: (State) -> Void) -> Void) -> Disposable","type":"method"}],"path":"\/documentation\/rxswift\/concurrentmainscheduler\/immediateschedulertype-implementations","title":"ImmediateSchedulerType Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/concurrentmainscheduler\/scheduleperiodic(_:startafter:period:action:)-2ayb1","title":"func schedulePeriodic<StateType>(StateType, startAfter: RxTimeInterval, period: RxTimeInterval, action: (StateType) -> StateType) -> Disposable","type":"method"}],"path":"\/documentation\/rxswift\/concurrentmainscheduler\/schedulertype-implementations","title":"SchedulerType Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/concurrentmainscheduler","title":"ConcurrentMainScheduler","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/connectableobservable\/connect()","title":"func connect() -> Disposable","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/connectableobservable\/refcount()","title":"func refCount() -> Observable<Element>","type":"method"}],"path":"\/documentation\/rxswift\/connectableobservable\/connectableobservabletype-implementations","title":"ConnectableObservableType Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/connectableobservable","title":"ConnectableObservable","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/currentthreadscheduler\/schedule(_:action:)","title":"func schedule<StateType>(StateType, action: (StateType) -> Disposable) -> Disposable","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/currentthreadscheduler\/instance","title":"static let instance: CurrentThreadScheduler","type":"property"},{"path":"\/documentation\/rxswift\/currentthreadscheduler\/isschedulerequired","title":"static var isScheduleRequired: Bool","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/currentthreadscheduler\/schedulerecursive(_:action:)","title":"func scheduleRecursive<State>(State, action: (_ state: State, _ recurse: (State) -> Void) -> Void) -> Disposable","type":"method"}],"path":"\/documentation\/rxswift\/currentthreadscheduler\/immediateschedulertype-implementations","title":"ImmediateSchedulerType Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/currentthreadscheduler","title":"CurrentThreadScheduler","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/disposebag\/disposablebuilder\/buildblock(_:)","title":"static func buildBlock(Disposable...) -> [Disposable]","type":"method"}],"path":"\/documentation\/rxswift\/disposebag\/disposablebuilder","title":"DisposeBag.DisposableBuilder","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rxswift\/disposebag\/init()","title":"init()","type":"init"},{"path":"\/documentation\/rxswift\/disposebag\/init(builder:)","title":"init(builder: () -> [Disposable])","type":"init"},{"path":"\/documentation\/rxswift\/disposebag\/init(disposing:)-3dbv8","title":"init(disposing: [Disposable])","type":"init"},{"path":"\/documentation\/rxswift\/disposebag\/init(disposing:)-5003j","title":"init(disposing: Disposable...)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/disposebag\/insert(_:)-1fqre","title":"func insert(Disposable)","type":"method"},{"path":"\/documentation\/rxswift\/disposebag\/insert(_:)-1n1jh","title":"func insert([Disposable])","type":"method"},{"path":"\/documentation\/rxswift\/disposebag\/insert(_:)-7f7t6","title":"func insert(Disposable...)","type":"method"},{"path":"\/documentation\/rxswift\/disposebag\/insert(builder:)","title":"func insert(builder: () -> [Disposable])","type":"method"}],"path":"\/documentation\/rxswift\/disposebag","title":"DisposeBag","type":"class"},{"path":"\/documentation\/rxswift\/disposebase","title":"DisposeBase","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rxswift\/historicalscheduler\/init(initialclock:)","title":"init(initialClock: RxTime)","type":"init"}],"path":"\/documentation\/rxswift\/historicalscheduler","title":"HistoricalScheduler","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rxswift\/mainscheduler\/init()","title":"init()","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/mainscheduler\/asyncinstance","title":"static let asyncInstance: SerialDispatchQueueScheduler","type":"property"},{"path":"\/documentation\/rxswift\/mainscheduler\/instance","title":"static let instance: MainScheduler","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/mainscheduler\/ensureexecutingonscheduler(errormessage:)","title":"static func ensureExecutingOnScheduler(errorMessage: String?)","type":"method"},{"path":"\/documentation\/rxswift\/mainscheduler\/ensurerunningonmainthread(errormessage:)","title":"static func ensureRunningOnMainThread(errorMessage: String?)","type":"method"}],"path":"\/documentation\/rxswift\/mainscheduler","title":"MainScheduler","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/observable\/asobservable()","title":"func asObservable() -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/subscribe(_:)-4fy","title":"func subscribe<Observer>(Observer) -> Disposable","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/observable\/values","title":"var values: AsyncThrowingStream<Element, Error>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/observable\/asinfallible(onerrorfallbackto:)","title":"func asInfallible(onErrorFallbackTo: Infallible<Element>) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/asinfallible(onerrorjustreturn:)","title":"func asInfallible(onErrorJustReturn: Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/asinfallible(onerrorrecover:)","title":"func asInfallible(onErrorRecover: (Swift.Error) -> Infallible<Element>) -> Infallible<Element>","type":"method"}],"path":"\/documentation\/rxswift\/observable\/observableconvertibletype-implementations","title":"ObservableConvertibleType Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/observable\/amb(_:)","title":"func amb<O2>(O2) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/ascompletable()","title":"func asCompletable() -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/observable\/asmaybe()","title":"func asMaybe() -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/assingle()","title":"func asSingle() -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/buffer(timespan:count:scheduler:)","title":"func buffer(timeSpan: RxTimeInterval, count: Int, scheduler: SchedulerType) -> Observable<[Element]>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/catch(_:)","title":"func `catch`((Swift.Error) throws -> Observable<Element>) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/catchandreturn(_:)","title":"func catchAndReturn(Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/catcherror(_:)","title":"func catchError((Swift.Error) throws -> Observable<Element>) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/catcherrorjustreturn(_:)","title":"func catchErrorJustReturn(Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/compactmap(_:)","title":"func compactMap<Result>((Element) throws -> Result?) -> Observable<Result>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/concat()","title":"func concat() -> Observable<Element.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/concat(_:)","title":"func concat<Source>(Source) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/concatmap(_:)","title":"func concatMap<Source>((Element) throws -> Source) -> Observable<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/debounce(_:scheduler:)","title":"func debounce(RxTimeInterval, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/debug(_:trimoutput:file:line:function:)","title":"func debug(String?, trimOutput: Bool, file: String, line: UInt, function: String) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/decode(type:decoder:)","title":"func decode<Item, Decoder>(type: Item.Type, decoder: Decoder) -> Observable<Item>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/delay(_:scheduler:)","title":"func delay(RxTimeInterval, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/delaysubscription(_:scheduler:)","title":"func delaySubscription(RxTimeInterval, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/dematerialize()","title":"func dematerialize() -> Observable<Element.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/distinctuntilchanged()","title":"func distinctUntilChanged() -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/distinctuntilchanged(_:)","title":"func distinctUntilChanged((Element, Element) throws -> Bool) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/distinctuntilchanged(_:comparer:)","title":"func distinctUntilChanged<K>((Element) throws -> K, comparer: (K, K) throws -> Bool) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/distinctuntilchanged(at:)","title":"func distinctUntilChanged<Property>(at: KeyPath<Element, Property>) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/do(onnext:afternext:onerror:aftererror:oncompleted:aftercompleted:onsubscribe:onsubscribed:ondispose:)","title":"func `do`(onNext: ((Element) throws -> Void)?, afterNext: ((Element) throws -> Void)?, onError: ((Swift.Error) throws -> Void)?, afterError: ((Swift.Error) throws -> Void)?, onCompleted: (() throws -> Void)?, afterCompleted: (() throws -> Void)?, onSubscribe: (() -> Void)?, onSubscribed: (() -> Void)?, onDispose: (() -> Void)?) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/element(at:)","title":"func element(at: Int) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/elementat(_:)","title":"func elementAt(Int) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/enumerated()","title":"func enumerated() -> Observable<(index: Int, element: Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/filter(_:)","title":"func filter((Element) throws -> Bool) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/first()","title":"func first() -> Single<Element?>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/flatmap(_:)","title":"func flatMap<Source>((Element) throws -> Source) -> Observable<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/flatmapfirst(_:)","title":"func flatMapFirst<Source>((Element) throws -> Source) -> Observable<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/flatmaplatest(_:)-7gisi","title":"func flatMapLatest<Source>((Element) throws -> Source) -> Observable<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/flatmaplatest(_:)-7shyy","title":"func flatMapLatest<Source>((Element) throws -> Source) -> Infallible<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Element) throws -> Key) -> Observable<GroupedObservable<Key, Element>>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/ifempty(default:)","title":"func ifEmpty(default: Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/ifempty(switchto:)","title":"func ifEmpty(switchTo: Observable<Element>) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/ignoreelements()","title":"func ignoreElements() -> Observable<Never>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/map(_:)","title":"func map<Result>((Element) throws -> Result) -> Observable<Result>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/materialize()","title":"func materialize() -> Observable<Event<Element>>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/merge()","title":"func merge() -> Observable<Element.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/merge(maxconcurrent:)","title":"func merge(maxConcurrent: Int) -> Observable<Element.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/multicast(_:)","title":"func multicast<Subject>(Subject) -> ConnectableObservable<Subject.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/multicast(_:selector:)","title":"func multicast<Subject, Result>(() throws -> Subject, selector: (Observable<Subject.Element>) throws -> Observable<Result>) -> Observable<Result>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/multicast(makesubject:)","title":"func multicast<Subject>(makeSubject: () -> Subject) -> ConnectableObservable<Subject.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/observe(on:)","title":"func observe(on: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/observeon(_:)","title":"func observeOn(ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/publish()","title":"func publish() -> ConnectableObservable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/reduce(_:accumulator:)","title":"func reduce<A>(A, accumulator: (A, Element) throws -> A) -> Observable<A>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/reduce(_:accumulator:mapresult:)","title":"func reduce<A, Result>(A, accumulator: (A, Element) throws -> A, mapResult: (A) throws -> Result) -> Observable<Result>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/replay(_:)","title":"func replay(Int) -> ConnectableObservable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/replayall()","title":"func replayAll() -> ConnectableObservable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/retry()","title":"func retry() -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/retry(_:)","title":"func retry(Int) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/retry(when:)-388jb","title":"func retry<TriggerObservable, Error>(when: (Observable<Error>) -> TriggerObservable) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/retry(when:)-6guuf","title":"func retry<TriggerObservable>(when: (Observable<Swift.Error>) -> TriggerObservable) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/retrywhen(_:)-46cvh","title":"func retryWhen<TriggerObservable>((Observable<Swift.Error>) -> TriggerObservable) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/retrywhen(_:)-5kwlx","title":"func retryWhen<TriggerObservable, Error>((Observable<Error>) -> TriggerObservable) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/sample(_:defaultvalue:)","title":"func sample<Source>(Source, defaultValue: Element?) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/scan(_:accumulator:)","title":"func scan<A>(A, accumulator: (A, Element) throws -> A) -> Observable<A>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/scan(into:accumulator:)","title":"func scan<A>(into: A, accumulator: (inout A, Element) throws -> Void) -> Observable<A>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/share(replay:scope:)","title":"func share(replay: Int, scope: SubjectLifetimeScope) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/single()","title":"func single() -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/single(_:)","title":"func single((Element) throws -> Bool) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/skip(_:)","title":"func skip(Int) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/skip(_:scheduler:)","title":"func skip(RxTimeInterval, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/skip(until:)","title":"func skip<Source>(until: Source) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/skip(while:)","title":"func skip(while: (Element) throws -> Bool) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/skipuntil(_:)","title":"func skipUntil<Source>(Source) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/skipwhile(_:)","title":"func skipWhile((Element) throws -> Bool) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/startwith(_:)","title":"func startWith(Element...) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/subscribe(_:)-8v9zj","title":"func subscribe((Event<Element>) -> Void) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/observable\/subscribe(on:)","title":"func subscribe(on: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/subscribe(onnext:onerror:oncompleted:ondisposed:)","title":"func subscribe(onNext: ((Element) -> Void)?, onError: ((Swift.Error) -> Void)?, onCompleted: (() -> Void)?, onDisposed: (() -> Void)?) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/observable\/subscribe(with:onnext:onerror:oncompleted:ondisposed:)","title":"func subscribe<Object>(with: Object, onNext: ((Object, Element) -> Void)?, onError: ((Object, Swift.Error) -> Void)?, onCompleted: ((Object) -> Void)?, onDisposed: ((Object) -> Void)?) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/observable\/subscribeon(_:)","title":"func subscribeOn(ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/switchlatest()","title":"func switchLatest() -> Observable<Element.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/take(_:)","title":"func take(Int) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/take(_:scheduler:)","title":"func take(RxTimeInterval, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/take(for:scheduler:)","title":"func take(for: RxTimeInterval, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/take(until:)","title":"func take<Source>(until: Source) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/take(until:behavior:)","title":"func take(until: (Element) throws -> Bool, behavior: TakeBehavior) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/take(while:behavior:)","title":"func take(while: (Element) throws -> Bool, behavior: TakeBehavior) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/takelast(_:)","title":"func takeLast(Int) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/takeuntil(_:)","title":"func takeUntil<Source>(Source) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/takeuntil(_:predicate:)","title":"func takeUntil(TakeBehavior, predicate: (Element) throws -> Bool) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/takewhile(_:)","title":"func takeWhile((Element) throws -> Bool) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/throttle(_:latest:scheduler:)","title":"func throttle(RxTimeInterval, latest: Bool, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/timeout(_:other:scheduler:)","title":"func timeout<Source>(RxTimeInterval, other: Source, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/timeout(_:scheduler:)","title":"func timeout(RxTimeInterval, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/toarray()","title":"func toArray() -> Single<[Element]>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/window(timespan:count:scheduler:)","title":"func window(timeSpan: RxTimeInterval, count: Int, scheduler: SchedulerType) -> Observable<Observable<Element>>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/withlatestfrom(_:)","title":"func withLatestFrom<Source>(Source) -> Observable<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/withlatestfrom(_:resultselector:)","title":"func withLatestFrom<Source, ResultType>(Source, resultSelector: (Element, Source.Element) throws -> ResultType) -> Observable<ResultType>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/withunretained(_:)","title":"func withUnretained<Object>(Object) -> Observable<(Object, Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/withunretained(_:resultselector:)","title":"func withUnretained<Object, Out>(Object, resultSelector: (Object, Element) -> Out) -> Observable<Out>","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/observable\/catch(sequence:)","title":"static func `catch`<Sequence>(sequence: Sequence) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/combinelatest(_:)","title":"static func combineLatest<Collection>(Collection) -> Observable<[Element]>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/combinelatest(_:_:)","title":"static func combineLatest<O1, O2>(O1, O2) -> Observable<(O1.Element, O2.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/combinelatest(_:_:_:)","title":"static func combineLatest<O1, O2, O3>(O1, O2, O3) -> Observable<(O1.Element, O2.Element, O3.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/combinelatest(_:_:_:_:)","title":"static func combineLatest<O1, O2, O3, O4>(O1, O2, O3, O4) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/combinelatest(_:_:_:_:_:)","title":"static func combineLatest<O1, O2, O3, O4, O5>(O1, O2, O3, O4, O5) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element, O5.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/combinelatest(_:_:_:_:_:_:)","title":"static func combineLatest<O1, O2, O3, O4, O5, O6>(O1, O2, O3, O4, O5, O6) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/combinelatest(_:_:_:_:_:_:_:)","title":"static func combineLatest<O1, O2, O3, O4, O5, O6, O7>(O1, O2, O3, O4, O5, O6, O7) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/combinelatest(_:_:_:_:_:_:_:_:)","title":"static func combineLatest<O1, O2, O3, O4, O5, O6, O7, O8>(O1, O2, O3, O4, O5, O6, O7, O8) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element, O8.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/combinelatest(_:_:_:_:_:_:_:_:resultselector:)","title":"static func combineLatest<O1, O2, O3, O4, O5, O6, O7, O8>(O1, O2, O3, O4, O5, O6, O7, O8, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element, O8.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/combinelatest(_:_:_:_:_:_:_:resultselector:)","title":"static func combineLatest<O1, O2, O3, O4, O5, O6, O7>(O1, O2, O3, O4, O5, O6, O7, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/combinelatest(_:_:_:_:_:_:resultselector:)","title":"static func combineLatest<O1, O2, O3, O4, O5, O6>(O1, O2, O3, O4, O5, O6, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/combinelatest(_:_:_:_:_:resultselector:)","title":"static func combineLatest<O1, O2, O3, O4, O5>(O1, O2, O3, O4, O5, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/combinelatest(_:_:_:_:resultselector:)","title":"static func combineLatest<O1, O2, O3, O4>(O1, O2, O3, O4, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/combinelatest(_:_:_:resultselector:)","title":"static func combineLatest<O1, O2, O3>(O1, O2, O3, resultSelector: (O1.Element, O2.Element, O3.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/combinelatest(_:_:resultselector:)","title":"static func combineLatest<O1, O2>(O1, O2, resultSelector: (O1.Element, O2.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/combinelatest(_:resultselector:)","title":"static func combineLatest<Collection>(Collection, resultSelector: ([Collection.Element.Element]) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/create(_:)","title":"static func create((AnyObserver<Element>) -> Disposable) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/deferred(_:)","title":"static func deferred(() throws -> Observable<Element>) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/empty()","title":"static func empty() -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/error(_:)","title":"static func error(Swift.Error) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/from(_:scheduler:)-5wcg8","title":"static func from<Sequence>(Sequence, scheduler: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/from(_:scheduler:)-6r45t","title":"static func from([Element], scheduler: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/from(optional:)","title":"static func from(optional: Element?) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/from(optional:scheduler:)","title":"static func from(optional: Element?, scheduler: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/generate(initialstate:condition:scheduler:iterate:)","title":"static func generate(initialState: Element, condition: (Element) throws -> Bool, scheduler: ImmediateSchedulerType, iterate: (Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/interval(_:scheduler:)","title":"static func interval(RxTimeInterval, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/just(_:)","title":"static func just(Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/just(_:scheduler:)","title":"static func just(Element, scheduler: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/merge(_:)-45ftv","title":"static func merge([Observable<Element>]) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/merge(_:)-8cbqu","title":"static func merge(Observable<Element>...) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/merge(_:)-9587h","title":"static func merge<Collection>(Collection) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/never()","title":"static func never() -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/of(_:scheduler:)","title":"static func of(Element..., scheduler: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/range(start:count:scheduler:)","title":"static func range(start: Element, count: Element, scheduler: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/repeatelement(_:scheduler:)","title":"static func repeatElement(Element, scheduler: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/timer(_:period:scheduler:)","title":"static func timer(RxTimeInterval, period: RxTimeInterval?, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/using(_:observablefactory:)","title":"static func using<Resource>(() throws -> Resource, observableFactory: (Resource) throws -> Observable<Element>) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/zip(_:)","title":"static func zip<Collection>(Collection) -> Observable<[Element]>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/zip(_:_:)","title":"static func zip<O1, O2>(O1, O2) -> Observable<(O1.Element, O2.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/zip(_:_:_:)","title":"static func zip<O1, O2, O3>(O1, O2, O3) -> Observable<(O1.Element, O2.Element, O3.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/zip(_:_:_:_:)","title":"static func zip<O1, O2, O3, O4>(O1, O2, O3, O4) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/zip(_:_:_:_:_:)","title":"static func zip<O1, O2, O3, O4, O5>(O1, O2, O3, O4, O5) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element, O5.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/zip(_:_:_:_:_:_:)","title":"static func zip<O1, O2, O3, O4, O5, O6>(O1, O2, O3, O4, O5, O6) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/zip(_:_:_:_:_:_:_:)","title":"static func zip<O1, O2, O3, O4, O5, O6, O7>(O1, O2, O3, O4, O5, O6, O7) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/zip(_:_:_:_:_:_:_:_:)","title":"static func zip<O1, O2, O3, O4, O5, O6, O7, O8>(O1, O2, O3, O4, O5, O6, O7, O8) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element, O8.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/zip(_:_:_:_:_:_:_:_:resultselector:)","title":"static func zip<O1, O2, O3, O4, O5, O6, O7, O8>(O1, O2, O3, O4, O5, O6, O7, O8, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element, O8.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/zip(_:_:_:_:_:_:_:resultselector:)","title":"static func zip<O1, O2, O3, O4, O5, O6, O7>(O1, O2, O3, O4, O5, O6, O7, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/zip(_:_:_:_:_:_:resultselector:)","title":"static func zip<O1, O2, O3, O4, O5, O6>(O1, O2, O3, O4, O5, O6, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/zip(_:_:_:_:_:resultselector:)","title":"static func zip<O1, O2, O3, O4, O5>(O1, O2, O3, O4, O5, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/zip(_:_:_:_:resultselector:)","title":"static func zip<O1, O2, O3, O4>(O1, O2, O3, O4, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/zip(_:_:_:resultselector:)","title":"static func zip<O1, O2, O3>(O1, O2, O3, resultSelector: (O1.Element, O2.Element, O3.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/zip(_:_:resultselector:)","title":"static func zip<O1, O2>(O1, O2, resultSelector: (O1.Element, O2.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observable\/zip(_:resultselector:)","title":"static func zip<Collection>(Collection, resultSelector: ([Collection.Element.Element]) throws -> Element) -> Observable<Element>","type":"method"}],"path":"\/documentation\/rxswift\/observable\/observabletype-implementations","title":"ObservableType Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/observable","title":"Observable","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rxswift\/operationqueuescheduler\/init(operationqueue:queuepriority:)","title":"init(operationQueue: OperationQueue, queuePriority: Operation.QueuePriority)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/operationqueuescheduler\/operationqueue","title":"let operationQueue: OperationQueue","type":"property"},{"path":"\/documentation\/rxswift\/operationqueuescheduler\/queuepriority","title":"let queuePriority: Operation.QueuePriority","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/operationqueuescheduler\/schedule(_:action:)","title":"func schedule<StateType>(StateType, action: (StateType) -> Disposable) -> Disposable","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/operationqueuescheduler\/schedulerecursive(_:action:)","title":"func scheduleRecursive<State>(State, action: (_ state: State, _ recurse: (State) -> Void) -> Void) -> Disposable","type":"method"}],"path":"\/documentation\/rxswift\/operationqueuescheduler\/immediateschedulertype-implementations","title":"ImmediateSchedulerType Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/operationqueuescheduler","title":"OperationQueueScheduler","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rxswift\/publishsubject\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/publishsubject\/hasobservers","title":"var hasObservers: Bool","type":"property"},{"path":"\/documentation\/rxswift\/publishsubject\/isdisposed","title":"var isDisposed: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/publishsubject\/asobserver()","title":"func asObserver() -> PublishSubject<Element>","type":"method"},{"path":"\/documentation\/rxswift\/publishsubject\/dispose()","title":"func dispose()","type":"method"},{"path":"\/documentation\/rxswift\/publishsubject\/on(_:)","title":"func on(Event<Element>)","type":"method"},{"path":"\/documentation\/rxswift\/publishsubject\/subscribe(_:)","title":"func subscribe<Observer>(Observer) -> Disposable","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/rxswift\/publishsubject\/subjectobservertype","title":"PublishSubject.SubjectObserverType","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/publishsubject\/disposed(by:)","title":"func disposed(by: DisposeBag)","type":"method"}],"path":"\/documentation\/rxswift\/publishsubject\/disposable-implementations","title":"Disposable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/publishsubject\/mapobserver(_:)","title":"func mapObserver<Result>((Result) throws -> Element) -> AnyObserver<Result>","type":"method"},{"path":"\/documentation\/rxswift\/publishsubject\/oncompleted()","title":"func onCompleted()","type":"method"},{"path":"\/documentation\/rxswift\/publishsubject\/onerror(_:)","title":"func onError(Swift.Error)","type":"method"},{"path":"\/documentation\/rxswift\/publishsubject\/onnext(_:)","title":"func onNext(Element)","type":"method"}],"path":"\/documentation\/rxswift\/publishsubject\/observertype-implementations","title":"ObserverType Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/publishsubject","title":"PublishSubject","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rxswift\/refcountdisposable\/init(disposable:)","title":"init(disposable: Disposable)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/refcountdisposable\/isdisposed","title":"var isDisposed: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/refcountdisposable\/dispose()","title":"func dispose()","type":"method"},{"path":"\/documentation\/rxswift\/refcountdisposable\/retain()","title":"func retain() -> Disposable","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/refcountdisposable\/disposed(by:)","title":"func disposed(by: DisposeBag)","type":"method"}],"path":"\/documentation\/rxswift\/refcountdisposable\/disposable-implementations","title":"Disposable Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/refcountdisposable","title":"RefCountDisposable","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/replaysubject\/hasobservers","title":"var hasObservers: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/replaysubject\/asobserver()","title":"func asObserver() -> ReplaySubject<Element>","type":"method"},{"path":"\/documentation\/rxswift\/replaysubject\/dispose()","title":"func dispose()","type":"method"},{"path":"\/documentation\/rxswift\/replaysubject\/on(_:)","title":"func on(Event<Element>)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/rxswift\/replaysubject\/subjectobservertype","title":"ReplaySubject.SubjectObserverType","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/replaysubject\/create(buffersize:)","title":"static func create(bufferSize: Int) -> ReplaySubject<Element>","type":"method"},{"path":"\/documentation\/rxswift\/replaysubject\/createunbounded()","title":"static func createUnbounded() -> ReplaySubject<Element>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/replaysubject\/disposed(by:)","title":"func disposed(by: DisposeBag)","type":"method"}],"path":"\/documentation\/rxswift\/replaysubject\/disposable-implementations","title":"Disposable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/replaysubject\/mapobserver(_:)","title":"func mapObserver<Result>((Result) throws -> Element) -> AnyObserver<Result>","type":"method"},{"path":"\/documentation\/rxswift\/replaysubject\/oncompleted()","title":"func onCompleted()","type":"method"},{"path":"\/documentation\/rxswift\/replaysubject\/onerror(_:)","title":"func onError(Swift.Error)","type":"method"},{"path":"\/documentation\/rxswift\/replaysubject\/onnext(_:)","title":"func onNext(Element)","type":"method"}],"path":"\/documentation\/rxswift\/replaysubject\/observertype-implementations","title":"ObserverType Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/replaysubject","title":"ReplaySubject","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rxswift\/scheduleddisposable\/init(scheduler:disposable:)","title":"init(scheduler: ImmediateSchedulerType, disposable: Disposable)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/scheduleddisposable\/isdisposed","title":"var isDisposed: Bool","type":"property"},{"path":"\/documentation\/rxswift\/scheduleddisposable\/scheduler","title":"let scheduler: ImmediateSchedulerType","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/scheduleddisposable\/dispose()","title":"func dispose()","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/scheduleddisposable\/disposed(by:)","title":"func disposed(by: DisposeBag)","type":"method"}],"path":"\/documentation\/rxswift\/scheduleddisposable\/disposable-implementations","title":"Disposable Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/scheduleddisposable","title":"ScheduledDisposable","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rxswift\/serialdispatchqueuescheduler\/init(internalserialqueuename:serialqueueconfiguration:leeway:)","title":"init(internalSerialQueueName: String, serialQueueConfiguration: ((DispatchQueue) -> Void)?, leeway: DispatchTimeInterval)","type":"init"},{"path":"\/documentation\/rxswift\/serialdispatchqueuescheduler\/init(qos:internalserialqueuename:leeway:)","title":"init(qos: DispatchQoS, internalSerialQueueName: String, leeway: DispatchTimeInterval)","type":"init"},{"path":"\/documentation\/rxswift\/serialdispatchqueuescheduler\/init(queue:internalserialqueuename:leeway:)","title":"init(queue: DispatchQueue, internalSerialQueueName: String, leeway: DispatchTimeInterval)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/serialdispatchqueuescheduler\/now","title":"var now: Date","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/serialdispatchqueuescheduler\/schedule(_:action:)","title":"func schedule<StateType>(StateType, action: (StateType) -> Disposable) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/serialdispatchqueuescheduler\/scheduleperiodic(_:startafter:period:action:)-5rzvl","title":"func schedulePeriodic<StateType>(StateType, startAfter: RxTimeInterval, period: RxTimeInterval, action: (StateType) -> StateType) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/serialdispatchqueuescheduler\/schedulerelative(_:duetime:action:)","title":"func scheduleRelative<StateType>(StateType, dueTime: RxTimeInterval, action: (StateType) -> Disposable) -> Disposable","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/rxswift\/serialdispatchqueuescheduler\/time","title":"SerialDispatchQueueScheduler.Time","type":"typealias"},{"path":"\/documentation\/rxswift\/serialdispatchqueuescheduler\/timeinterval","title":"SerialDispatchQueueScheduler.TimeInterval","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/serialdispatchqueuescheduler\/schedulerecursive(_:action:)","title":"func scheduleRecursive<State>(State, action: (_ state: State, _ recurse: (State) -> Void) -> Void) -> Disposable","type":"method"}],"path":"\/documentation\/rxswift\/serialdispatchqueuescheduler\/immediateschedulertype-implementations","title":"ImmediateSchedulerType Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/serialdispatchqueuescheduler\/scheduleperiodic(_:startafter:period:action:)-9tsqv","title":"func schedulePeriodic<StateType>(StateType, startAfter: RxTimeInterval, period: RxTimeInterval, action: (StateType) -> StateType) -> Disposable","type":"method"}],"path":"\/documentation\/rxswift\/serialdispatchqueuescheduler\/schedulertype-implementations","title":"SchedulerType Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/serialdispatchqueuescheduler","title":"SerialDispatchQueueScheduler","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rxswift\/serialdisposable\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/serialdisposable\/disposable","title":"var disposable: Disposable","type":"property"},{"path":"\/documentation\/rxswift\/serialdisposable\/isdisposed","title":"var isDisposed: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/serialdisposable\/dispose()","title":"func dispose()","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/serialdisposable\/disposed(by:)","title":"func disposed(by: DisposeBag)","type":"method"}],"path":"\/documentation\/rxswift\/serialdisposable\/disposable-implementations","title":"Disposable Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/serialdisposable","title":"SerialDisposable","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rxswift\/singleassignmentdisposable\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/singleassignmentdisposable\/isdisposed","title":"var isDisposed: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/singleassignmentdisposable\/dispose()","title":"func dispose()","type":"method"},{"path":"\/documentation\/rxswift\/singleassignmentdisposable\/setdisposable(_:)","title":"func setDisposable(Disposable)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/singleassignmentdisposable\/disposed(by:)","title":"func disposed(by: DisposeBag)","type":"method"}],"path":"\/documentation\/rxswift\/singleassignmentdisposable\/disposable-implementations","title":"Disposable Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/singleassignmentdisposable","title":"SingleAssignmentDisposable","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rxswift\/virtualtimescheduler\/init(initialclock:converter:)","title":"init(initialClock: VirtualTime, converter: Converter)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/virtualtimescheduler\/clock","title":"var clock: VirtualTime","type":"property"},{"path":"\/documentation\/rxswift\/virtualtimescheduler\/now","title":"var now: RxTime","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/virtualtimescheduler\/adjustscheduledtime(_:)","title":"func adjustScheduledTime(VirtualTime) -> VirtualTime","type":"method"},{"path":"\/documentation\/rxswift\/virtualtimescheduler\/advanceto(_:)","title":"func advanceTo(VirtualTime)","type":"method"},{"path":"\/documentation\/rxswift\/virtualtimescheduler\/schedule(_:action:)","title":"func schedule<StateType>(StateType, action: (StateType) -> Disposable) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/virtualtimescheduler\/scheduleabsolutevirtual(_:time:action:)","title":"func scheduleAbsoluteVirtual<StateType>(StateType, time: VirtualTime, action: (StateType) -> Disposable) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/virtualtimescheduler\/schedulerelative(_:duetime:action:)","title":"func scheduleRelative<StateType>(StateType, dueTime: RxTimeInterval, action: (StateType) -> Disposable) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/virtualtimescheduler\/schedulerelativevirtual(_:duetime:action:)","title":"func scheduleRelativeVirtual<StateType>(StateType, dueTime: VirtualTimeInterval, action: (StateType) -> Disposable) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/virtualtimescheduler\/sleep(_:)","title":"func sleep(VirtualTimeInterval)","type":"method"},{"path":"\/documentation\/rxswift\/virtualtimescheduler\/start()","title":"func start()","type":"method"},{"path":"\/documentation\/rxswift\/virtualtimescheduler\/stop()","title":"func stop()","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/rxswift\/virtualtimescheduler\/virtualtime","title":"VirtualTimeScheduler.VirtualTime","type":"typealias"},{"path":"\/documentation\/rxswift\/virtualtimescheduler\/virtualtimeinterval","title":"VirtualTimeScheduler.VirtualTimeInterval","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/virtualtimescheduler\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/rxswift\/virtualtimescheduler\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/virtualtimescheduler\/schedulerecursive(_:action:)","title":"func scheduleRecursive<State>(State, action: (_ state: State, _ recurse: (State) -> Void) -> Void) -> Disposable","type":"method"}],"path":"\/documentation\/rxswift\/virtualtimescheduler\/immediateschedulertype-implementations","title":"ImmediateSchedulerType Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/virtualtimescheduler\/scheduleperiodic(_:startafter:period:action:)","title":"func schedulePeriodic<StateType>(StateType, startAfter: RxTimeInterval, period: RxTimeInterval, action: (StateType) -> StateType) -> Disposable","type":"method"}],"path":"\/documentation\/rxswift\/virtualtimescheduler\/schedulertype-implementations","title":"SchedulerType Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/virtualtimescheduler","title":"VirtualTimeScheduler","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/cancelable\/isdisposed","title":"var isDisposed: Bool","type":"property"}],"path":"\/documentation\/rxswift\/cancelable","title":"Cancelable","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/connectableobservabletype\/connect()","title":"func connect() -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/connectableobservabletype\/refcount()","title":"func refCount() -> Observable<Element>","type":"method"}],"path":"\/documentation\/rxswift\/connectableobservabletype","title":"ConnectableObservableType","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/datadecoder\/decode(_:from:)","title":"func decode<Item>(Item.Type, from: Data) throws -> Item","type":"method"}],"path":"\/documentation\/rxswift\/datadecoder","title":"DataDecoder","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/disposable\/dispose()","title":"func dispose()","type":"method"},{"path":"\/documentation\/rxswift\/disposable\/disposed(by:)","title":"func disposed(by: DisposeBag)","type":"method"}],"path":"\/documentation\/rxswift\/disposable","title":"Disposable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/rxswift\/eventconvertible\/element","title":"Element","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/eventconvertible\/event","title":"var event: Event<Element>","type":"property"}],"path":"\/documentation\/rxswift\/eventconvertible","title":"EventConvertible","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/immediateschedulertype\/schedule(_:action:)","title":"func schedule<StateType>(StateType, action: (StateType) -> Disposable) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/immediateschedulertype\/schedulerecursive(_:action:)","title":"func scheduleRecursive<State>(State, action: (_ state: State, _ recurse: (State) -> Void) -> Void) -> Disposable","type":"method"}],"path":"\/documentation\/rxswift\/immediateschedulertype","title":"ImmediateSchedulerType","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/infallibletype\/values","title":"var values: AsyncStream<Element>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/infallibletype\/compactmap(_:)","title":"func compactMap<Result>((Element) -> Result?) -> Infallible<Result>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/concat(_:)-swift.method","title":"func concat<Source>(Source) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/concatmap(_:)","title":"func concatMap<Source>((Element) -> Source) -> Infallible<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/debounce(_:scheduler:)","title":"func debounce(RxTimeInterval, scheduler: SchedulerType) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/distinctuntilchanged()","title":"func distinctUntilChanged() -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/distinctuntilchanged(_:)-8o0di","title":"func distinctUntilChanged((Element, Element) throws -> Bool) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/distinctuntilchanged(_:)-8pic8","title":"func distinctUntilChanged<Key>((Element) throws -> Key) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/distinctuntilchanged(_:comparer:)","title":"func distinctUntilChanged<K>((Element) throws -> K, comparer: (K, K) throws -> Bool) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/distinctuntilchanged(at:)","title":"func distinctUntilChanged<Property>(at: KeyPath<Element, Property>) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/filter(_:)","title":"func filter((Element) -> Bool) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/flatmap(_:)","title":"func flatMap<Source>((Element) -> Source) -> Infallible<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/flatmapfirst(_:)","title":"func flatMapFirst<Source>((Element) -> Source) -> Infallible<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/flatmaplatest(_:)","title":"func flatMapLatest<Source>((Element) -> Source) -> Infallible<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/map(_:)","title":"func map<Result>((Element) -> Result) -> Infallible<Result>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/scan(_:accumulator:)","title":"func scan<Seed>(Seed, accumulator: (Seed, Element) -> Seed) -> Infallible<Seed>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/scan(into:accumulator:)","title":"func scan<Seed>(into: Seed, accumulator: (inout Seed, Element) -> Void) -> Infallible<Seed>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/share(replay:scope:)","title":"func share(replay: Int, scope: SubjectLifetimeScope) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/skip(until:)","title":"func skip<Source>(until: Source) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/skip(while:)","title":"func skip(while: (Element) throws -> Bool) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/startwith(_:)","title":"func startWith(Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/subscribe(_:)","title":"func subscribe((Event<Element>) -> Void) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/subscribe(onnext:oncompleted:ondisposed:)","title":"func subscribe(onNext: ((Element) -> Void)?, onCompleted: (() -> Void)?, onDisposed: (() -> Void)?) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/subscribe(with:onnext:oncompleted:ondisposed:)","title":"func subscribe<Object>(with: Object, onNext: ((Object, Element) -> Void)?, onCompleted: ((Object) -> Void)?, onDisposed: ((Object) -> Void)?) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/take(_:)","title":"func take(Int) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/take(for:scheduler:)","title":"func take(for: RxTimeInterval, scheduler: SchedulerType) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/take(until:)-3kx32","title":"func take<Source>(until: Source) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/take(until:)-8lwh7","title":"func take<Source>(until: Source) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/take(until:behavior:)","title":"func take(until: (Element) throws -> Bool, behavior: TakeBehavior) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/take(while:behavior:)","title":"func take(while: (Element) throws -> Bool, behavior: TakeBehavior) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/throttle(_:latest:scheduler:)","title":"func throttle(RxTimeInterval, latest: Bool, scheduler: SchedulerType) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/withlatestfrom(_:)","title":"func withLatestFrom<Source>(Source) -> Infallible<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/withlatestfrom(_:resultselector:)","title":"func withLatestFrom<Source, ResultType>(Source, resultSelector: (Element, Source.Element) throws -> ResultType) -> Infallible<ResultType>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/withunretained(_:)","title":"func withUnretained<Object>(Object) -> Infallible<(Object, Element)>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/withunretained(_:resultselector:)","title":"func withUnretained<Object, Out>(Object, resultSelector: (Object, Element) -> Out) -> Infallible<Out>","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/infallibletype\/concat(_:)-swift.type.method-31wnd","title":"static func concat<Collection>(Collection) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/concat(_:)-swift.type.method-4vhch","title":"static func concat<Sequence>(Sequence) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/concat(_:)-swift.type.method-wlho","title":"static func concat(Infallible<Element>...) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/deferred(_:)","title":"static func deferred(() throws -> Infallible<Element>) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/empty()","title":"static func empty() -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/just(_:)","title":"static func just(Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/just(_:scheduler:)","title":"static func just(Element, scheduler: ImmediateSchedulerType) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/merge(_:)-20ex6","title":"static func merge<Collection>(Collection) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/merge(_:)-5k4f0","title":"static func merge([Infallible<Element>]) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/merge(_:)-804f4","title":"static func merge(Infallible<Element>...) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/never()","title":"static func never() -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/zip(_:_:_:_:_:_:_:_:resultselector:)","title":"static func zip<E1, E2, E3, E4, E5, E6, E7, E8>(Infallible<E1>, Infallible<E2>, Infallible<E3>, Infallible<E4>, Infallible<E5>, Infallible<E6>, Infallible<E7>, Infallible<E8>, resultSelector: (E1, E2, E3, E4, E5, E6, E7, E8) throws -> Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/zip(_:_:_:_:_:_:_:resultselector:)","title":"static func zip<E1, E2, E3, E4, E5, E6, E7>(Infallible<E1>, Infallible<E2>, Infallible<E3>, Infallible<E4>, Infallible<E5>, Infallible<E6>, Infallible<E7>, resultSelector: (E1, E2, E3, E4, E5, E6, E7) throws -> Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/zip(_:_:_:_:_:_:resultselector:)","title":"static func zip<E1, E2, E3, E4, E5, E6>(Infallible<E1>, Infallible<E2>, Infallible<E3>, Infallible<E4>, Infallible<E5>, Infallible<E6>, resultSelector: (E1, E2, E3, E4, E5, E6) throws -> Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/zip(_:_:_:_:_:resultselector:)","title":"static func zip<E1, E2, E3, E4, E5>(Infallible<E1>, Infallible<E2>, Infallible<E3>, Infallible<E4>, Infallible<E5>, resultSelector: (E1, E2, E3, E4, E5) throws -> Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/zip(_:_:_:_:resultselector:)","title":"static func zip<E1, E2, E3, E4>(Infallible<E1>, Infallible<E2>, Infallible<E3>, Infallible<E4>, resultSelector: (E1, E2, E3, E4) throws -> Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/zip(_:_:_:resultselector:)","title":"static func zip<E1, E2, E3>(Infallible<E1>, Infallible<E2>, Infallible<E3>, resultSelector: (E1, E2, E3) throws -> Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallibletype\/zip(_:_:resultselector:)","title":"static func zip<E1, E2>(Infallible<E1>, Infallible<E2>, resultSelector: (E1, E2) throws -> Element) -> Infallible<Element>","type":"method"}],"path":"\/documentation\/rxswift\/infallibletype","title":"InfallibleType","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/rxswift\/observableconvertibletype\/element","title":"Element","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/observableconvertibletype\/values","title":"var values: AsyncThrowingStream<Element, Error>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/observableconvertibletype\/asinfallible(onerrorfallbackto:)","title":"func asInfallible(onErrorFallbackTo: Infallible<Element>) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observableconvertibletype\/asinfallible(onerrorjustreturn:)","title":"func asInfallible(onErrorJustReturn: Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observableconvertibletype\/asinfallible(onerrorrecover:)","title":"func asInfallible(onErrorRecover: (Swift.Error) -> Infallible<Element>) -> Infallible<Element>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/rxswift\/observabletype\/asobservable()","title":"func asObservable() -> Observable<Element>","type":"method"}],"title":"ObservableType Implementations","type":"groupMarker"}],"path":"\/documentation\/rxswift\/observableconvertibletype\/asobservable()","title":"func asObservable() -> Observable<Element>","type":"method"}],"path":"\/documentation\/rxswift\/observableconvertibletype","title":"ObservableConvertibleType","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/observabletype\/amb(_:)-swift.method","title":"func amb<O2>(O2) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/ascompletable()","title":"func asCompletable() -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/asmaybe()","title":"func asMaybe() -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/assingle()","title":"func asSingle() -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/buffer(timespan:count:scheduler:)","title":"func buffer(timeSpan: RxTimeInterval, count: Int, scheduler: SchedulerType) -> Observable<[Element]>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/catch(_:)","title":"func `catch`((Swift.Error) throws -> Observable<Element>) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/catchandreturn(_:)","title":"func catchAndReturn(Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/catcherror(_:)-swift.method","title":"func catchError((Swift.Error) throws -> Observable<Element>) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/catcherrorjustreturn(_:)","title":"func catchErrorJustReturn(Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/compactmap(_:)","title":"func compactMap<Result>((Element) throws -> Result?) -> Observable<Result>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/concat()","title":"func concat() -> Observable<Element.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/concat(_:)-swift.method","title":"func concat<Source>(Source) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/concatmap(_:)","title":"func concatMap<Source>((Element) throws -> Source) -> Observable<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/debounce(_:scheduler:)","title":"func debounce(RxTimeInterval, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/debug(_:trimoutput:file:line:function:)","title":"func debug(String?, trimOutput: Bool, file: String, line: UInt, function: String) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/decode(type:decoder:)","title":"func decode<Item, Decoder>(type: Item.Type, decoder: Decoder) -> Observable<Item>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/delay(_:scheduler:)","title":"func delay(RxTimeInterval, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/delaysubscription(_:scheduler:)","title":"func delaySubscription(RxTimeInterval, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/dematerialize()","title":"func dematerialize() -> Observable<Element.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/distinctuntilchanged()","title":"func distinctUntilChanged() -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/distinctuntilchanged(_:)-376dy","title":"func distinctUntilChanged<Key>((Element) throws -> Key) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/distinctuntilchanged(_:)-fqtj","title":"func distinctUntilChanged((Element, Element) throws -> Bool) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/distinctuntilchanged(_:comparer:)","title":"func distinctUntilChanged<K>((Element) throws -> K, comparer: (K, K) throws -> Bool) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/distinctuntilchanged(at:)","title":"func distinctUntilChanged<Property>(at: KeyPath<Element, Property>) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/do(onnext:afternext:onerror:aftererror:oncompleted:aftercompleted:onsubscribe:onsubscribed:ondispose:)","title":"func `do`(onNext: ((Element) throws -> Void)?, afterNext: ((Element) throws -> Void)?, onError: ((Swift.Error) throws -> Void)?, afterError: ((Swift.Error) throws -> Void)?, onCompleted: (() throws -> Void)?, afterCompleted: (() throws -> Void)?, onSubscribe: (() -> Void)?, onSubscribed: (() -> Void)?, onDispose: (() -> Void)?) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/element(at:)","title":"func element(at: Int) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/elementat(_:)","title":"func elementAt(Int) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/enumerated()","title":"func enumerated() -> Observable<(index: Int, element: Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/filter(_:)","title":"func filter((Element) throws -> Bool) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/filter(statuscode:)","title":"func filter(statusCode: Int) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/filter(statuscodes:)","title":"func filter<R>(statusCodes: R) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/filtercompleted()","title":"func filterCompleted() -> Observable<Response>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/filterprogress()","title":"func filterProgress() -> Observable<Double>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/filtersuccessfulstatusandredirectcodes()","title":"func filterSuccessfulStatusAndRedirectCodes() -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/filtersuccessfulstatuscodes()","title":"func filterSuccessfulStatusCodes() -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/first()","title":"func first() -> Single<Element?>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/flatmap(_:)","title":"func flatMap<Source>((Element) throws -> Source) -> Observable<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/flatmapfirst(_:)","title":"func flatMapFirst<Source>((Element) throws -> Source) -> Observable<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/flatmaplatest(_:)-4ctzz","title":"func flatMapLatest<Source>((Element) throws -> Source) -> Infallible<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/flatmaplatest(_:)-r1ts","title":"func flatMapLatest<Source>((Element) throws -> Source) -> Observable<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Element) throws -> Key) -> Observable<GroupedObservable<Key, Element>>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/ifempty(default:)","title":"func ifEmpty(default: Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/ifempty(switchto:)","title":"func ifEmpty(switchTo: Observable<Element>) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/ignoreelements()","title":"func ignoreElements() -> Observable<Never>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/map(_:)","title":"func map<Result>((Element) throws -> Result) -> Observable<Result>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/map(_:atkeypath:using:failsonemptydata:)","title":"func map<D>(D.Type, atKeyPath: String?, using: JSONDecoder, failsOnEmptyData: Bool) -> Observable<D>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/mapimage()","title":"func mapImage() -> Observable<Image>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/mapjson(failsonemptydata:)","title":"func mapJSON(failsOnEmptyData: Bool) -> Observable<Any>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/mapstring(atkeypath:)","title":"func mapString(atKeyPath: String?) -> Observable<String>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/materialize()","title":"func materialize() -> Observable<Event<Element>>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/merge()","title":"func merge() -> Observable<Element.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/merge(maxconcurrent:)","title":"func merge(maxConcurrent: Int) -> Observable<Element.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/multicast(_:)","title":"func multicast<Subject>(Subject) -> ConnectableObservable<Subject.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/multicast(_:selector:)","title":"func multicast<Subject, Result>(() throws -> Subject, selector: (Observable<Subject.Element>) throws -> Observable<Result>) -> Observable<Result>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/multicast(makesubject:)","title":"func multicast<Subject>(makeSubject: () -> Subject) -> ConnectableObservable<Subject.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/observe(on:)","title":"func observe(on: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/observeon(_:)","title":"func observeOn(ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/publish()","title":"func publish() -> ConnectableObservable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/reduce(_:accumulator:)","title":"func reduce<A>(A, accumulator: (A, Element) throws -> A) -> Observable<A>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/reduce(_:accumulator:mapresult:)","title":"func reduce<A, Result>(A, accumulator: (A, Element) throws -> A, mapResult: (A) throws -> Result) -> Observable<Result>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/replay(_:)","title":"func replay(Int) -> ConnectableObservable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/replayall()","title":"func replayAll() -> ConnectableObservable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/retry()","title":"func retry() -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/retry(_:)","title":"func retry(Int) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/retry(when:)-7xgls","title":"func retry<TriggerObservable, Error>(when: (Observable<Error>) -> TriggerObservable) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/retry(when:)-9dup6","title":"func retry<TriggerObservable>(when: (Observable<Swift.Error>) -> TriggerObservable) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/retrywhen(_:)-1uoqy","title":"func retryWhen<TriggerObservable>((Observable<Swift.Error>) -> TriggerObservable) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/retrywhen(_:)-83g7v","title":"func retryWhen<TriggerObservable, Error>((Observable<Error>) -> TriggerObservable) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/sample(_:defaultvalue:)","title":"func sample<Source>(Source, defaultValue: Element?) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/scan(_:accumulator:)","title":"func scan<A>(A, accumulator: (A, Element) throws -> A) -> Observable<A>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/scan(into:accumulator:)","title":"func scan<A>(into: A, accumulator: (inout A, Element) throws -> Void) -> Observable<A>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/share(replay:scope:)","title":"func share(replay: Int, scope: SubjectLifetimeScope) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/single()","title":"func single() -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/single(_:)","title":"func single((Element) throws -> Bool) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/skip(_:)","title":"func skip(Int) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/skip(_:scheduler:)","title":"func skip(RxTimeInterval, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/skip(until:)","title":"func skip<Source>(until: Source) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/skip(while:)","title":"func skip(while: (Element) throws -> Bool) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/skipuntil(_:)","title":"func skipUntil<Source>(Source) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/skipwhile(_:)","title":"func skipWhile((Element) throws -> Bool) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/startwith(_:)","title":"func startWith(Element...) -> Observable<Element>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/rxswift\/observabletype\/subscribe(_:)-7n5rn","title":"func subscribe((Event<Element>) -> Void) -> Disposable","type":"method"}],"title":"ObservableType Implementations","type":"groupMarker"}],"path":"\/documentation\/rxswift\/observabletype\/subscribe(_:)-2q05z","title":"func subscribe<Observer>(Observer) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/subscribe(on:)","title":"func subscribe(on: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/subscribe(onnext:onerror:oncompleted:ondisposed:)","title":"func subscribe(onNext: ((Element) -> Void)?, onError: ((Swift.Error) -> Void)?, onCompleted: (() -> Void)?, onDisposed: (() -> Void)?) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/subscribe(with:onnext:onerror:oncompleted:ondisposed:)","title":"func subscribe<Object>(with: Object, onNext: ((Object, Element) -> Void)?, onError: ((Object, Swift.Error) -> Void)?, onCompleted: ((Object) -> Void)?, onDisposed: ((Object) -> Void)?) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/subscribeon(_:)","title":"func subscribeOn(ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/switchlatest()","title":"func switchLatest() -> Observable<Element.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/take(_:)","title":"func take(Int) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/take(_:scheduler:)","title":"func take(RxTimeInterval, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/take(for:scheduler:)","title":"func take(for: RxTimeInterval, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/take(until:)","title":"func take<Source>(until: Source) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/take(until:behavior:)","title":"func take(until: (Element) throws -> Bool, behavior: TakeBehavior) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/take(while:behavior:)","title":"func take(while: (Element) throws -> Bool, behavior: TakeBehavior) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/takelast(_:)","title":"func takeLast(Int) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/takeuntil(_:)","title":"func takeUntil<Source>(Source) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/takeuntil(_:predicate:)","title":"func takeUntil(TakeBehavior, predicate: (Element) throws -> Bool) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/takewhile(_:)","title":"func takeWhile((Element) throws -> Bool) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/throttle(_:latest:scheduler:)","title":"func throttle(RxTimeInterval, latest: Bool, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/timeout(_:other:scheduler:)","title":"func timeout<Source>(RxTimeInterval, other: Source, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/timeout(_:scheduler:)","title":"func timeout(RxTimeInterval, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/toarray()","title":"func toArray() -> Single<[Element]>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/window(timespan:count:scheduler:)","title":"func window(timeSpan: RxTimeInterval, count: Int, scheduler: SchedulerType) -> Observable<Observable<Element>>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/withlatestfrom(_:)","title":"func withLatestFrom<Source>(Source) -> Observable<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/withlatestfrom(_:resultselector:)","title":"func withLatestFrom<Source, ResultType>(Source, resultSelector: (Element, Source.Element) throws -> ResultType) -> Observable<ResultType>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/withunretained(_:)","title":"func withUnretained<Object>(Object) -> Observable<(Object, Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/withunretained(_:resultselector:)","title":"func withUnretained<Object, Out>(Object, resultSelector: (Object, Element) -> Out) -> Observable<Out>","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/observabletype\/amb(_:)-swift.type.method","title":"static func amb<Sequence>(Sequence) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/catch(sequence:)","title":"static func `catch`<Sequence>(sequence: Sequence) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/catcherror(_:)-swift.type.method","title":"static func catchError<Sequence>(Sequence) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/combinelatest(_:)","title":"static func combineLatest<Collection>(Collection) -> Observable<[Element]>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/combinelatest(_:_:)","title":"static func combineLatest<O1, O2>(O1, O2) -> Observable<(O1.Element, O2.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/combinelatest(_:_:_:)","title":"static func combineLatest<O1, O2, O3>(O1, O2, O3) -> Observable<(O1.Element, O2.Element, O3.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/combinelatest(_:_:_:_:)","title":"static func combineLatest<O1, O2, O3, O4>(O1, O2, O3, O4) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/combinelatest(_:_:_:_:_:)","title":"static func combineLatest<O1, O2, O3, O4, O5>(O1, O2, O3, O4, O5) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element, O5.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/combinelatest(_:_:_:_:_:_:)","title":"static func combineLatest<O1, O2, O3, O4, O5, O6>(O1, O2, O3, O4, O5, O6) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/combinelatest(_:_:_:_:_:_:_:)","title":"static func combineLatest<O1, O2, O3, O4, O5, O6, O7>(O1, O2, O3, O4, O5, O6, O7) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/combinelatest(_:_:_:_:_:_:_:_:)","title":"static func combineLatest<O1, O2, O3, O4, O5, O6, O7, O8>(O1, O2, O3, O4, O5, O6, O7, O8) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element, O8.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/combinelatest(_:_:_:_:_:_:_:_:resultselector:)","title":"static func combineLatest<O1, O2, O3, O4, O5, O6, O7, O8>(O1, O2, O3, O4, O5, O6, O7, O8, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element, O8.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/combinelatest(_:_:_:_:_:_:_:resultselector:)","title":"static func combineLatest<O1, O2, O3, O4, O5, O6, O7>(O1, O2, O3, O4, O5, O6, O7, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/combinelatest(_:_:_:_:_:_:resultselector:)","title":"static func combineLatest<O1, O2, O3, O4, O5, O6>(O1, O2, O3, O4, O5, O6, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/combinelatest(_:_:_:_:_:resultselector:)","title":"static func combineLatest<O1, O2, O3, O4, O5>(O1, O2, O3, O4, O5, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/combinelatest(_:_:_:_:resultselector:)","title":"static func combineLatest<O1, O2, O3, O4>(O1, O2, O3, O4, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/combinelatest(_:_:_:resultselector:)","title":"static func combineLatest<O1, O2, O3>(O1, O2, O3, resultSelector: (O1.Element, O2.Element, O3.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/combinelatest(_:_:resultselector:)","title":"static func combineLatest<O1, O2>(O1, O2, resultSelector: (O1.Element, O2.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/combinelatest(_:resultselector:)","title":"static func combineLatest<Collection>(Collection, resultSelector: ([Collection.Element.Element]) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/concat(_:)-swift.type.method-2rklt","title":"static func concat<Collection>(Collection) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/concat(_:)-swift.type.method-5q66h","title":"static func concat(Observable<Element>...) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/concat(_:)-swift.type.method-75xwl","title":"static func concat<Sequence>(Sequence) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/create(_:)","title":"static func create((AnyObserver<Element>) -> Disposable) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/deferred(_:)","title":"static func deferred(() throws -> Observable<Element>) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/empty()","title":"static func empty() -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/error(_:)","title":"static func error(Swift.Error) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/from(_:scheduler:)-859vv","title":"static func from<Sequence>(Sequence, scheduler: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/from(_:scheduler:)-96ylt","title":"static func from([Element], scheduler: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/from(optional:)","title":"static func from(optional: Element?) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/from(optional:scheduler:)","title":"static func from(optional: Element?, scheduler: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/generate(initialstate:condition:scheduler:iterate:)","title":"static func generate(initialState: Element, condition: (Element) throws -> Bool, scheduler: ImmediateSchedulerType, iterate: (Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/interval(_:scheduler:)","title":"static func interval(RxTimeInterval, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/just(_:)","title":"static func just(Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/just(_:scheduler:)","title":"static func just(Element, scheduler: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/merge(_:)-32pzy","title":"static func merge([Observable<Element>]) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/merge(_:)-3udd4","title":"static func merge(Observable<Element>...) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/merge(_:)-72c01","title":"static func merge<Collection>(Collection) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/never()","title":"static func never() -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/of(_:scheduler:)","title":"static func of(Element..., scheduler: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/range(start:count:scheduler:)","title":"static func range(start: Element, count: Element, scheduler: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/repeatelement(_:scheduler:)","title":"static func repeatElement(Element, scheduler: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/timer(_:period:scheduler:)","title":"static func timer(RxTimeInterval, period: RxTimeInterval?, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/using(_:observablefactory:)","title":"static func using<Resource>(() throws -> Resource, observableFactory: (Resource) throws -> Observable<Element>) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/zip(_:)","title":"static func zip<Collection>(Collection) -> Observable<[Element]>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/zip(_:_:)","title":"static func zip<O1, O2>(O1, O2) -> Observable<(O1.Element, O2.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/zip(_:_:_:)","title":"static func zip<O1, O2, O3>(O1, O2, O3) -> Observable<(O1.Element, O2.Element, O3.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/zip(_:_:_:_:)","title":"static func zip<O1, O2, O3, O4>(O1, O2, O3, O4) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/zip(_:_:_:_:_:)","title":"static func zip<O1, O2, O3, O4, O5>(O1, O2, O3, O4, O5) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element, O5.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/zip(_:_:_:_:_:_:)","title":"static func zip<O1, O2, O3, O4, O5, O6>(O1, O2, O3, O4, O5, O6) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/zip(_:_:_:_:_:_:_:)","title":"static func zip<O1, O2, O3, O4, O5, O6, O7>(O1, O2, O3, O4, O5, O6, O7) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/zip(_:_:_:_:_:_:_:_:)","title":"static func zip<O1, O2, O3, O4, O5, O6, O7, O8>(O1, O2, O3, O4, O5, O6, O7, O8) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element, O8.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/zip(_:_:_:_:_:_:_:_:resultselector:)","title":"static func zip<O1, O2, O3, O4, O5, O6, O7, O8>(O1, O2, O3, O4, O5, O6, O7, O8, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element, O8.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/zip(_:_:_:_:_:_:_:resultselector:)","title":"static func zip<O1, O2, O3, O4, O5, O6, O7>(O1, O2, O3, O4, O5, O6, O7, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/zip(_:_:_:_:_:_:resultselector:)","title":"static func zip<O1, O2, O3, O4, O5, O6>(O1, O2, O3, O4, O5, O6, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/zip(_:_:_:_:_:resultselector:)","title":"static func zip<O1, O2, O3, O4, O5>(O1, O2, O3, O4, O5, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/zip(_:_:_:_:resultselector:)","title":"static func zip<O1, O2, O3, O4>(O1, O2, O3, O4, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/zip(_:_:_:resultselector:)","title":"static func zip<O1, O2, O3>(O1, O2, O3, resultSelector: (O1.Element, O2.Element, O3.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/zip(_:_:resultselector:)","title":"static func zip<O1, O2>(O1, O2, resultSelector: (O1.Element, O2.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observabletype\/zip(_:resultselector:)","title":"static func zip<Collection>(Collection, resultSelector: ([Collection.Element.Element]) throws -> Element) -> Observable<Element>","type":"method"}],"path":"\/documentation\/rxswift\/observabletype","title":"ObservableType","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/rxswift\/observertype\/element","title":"Element","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/observertype\/asobserver()","title":"func asObserver() -> AnyObserver<Element>","type":"method"},{"path":"\/documentation\/rxswift\/observertype\/mapobserver(_:)","title":"func mapObserver<Result>((Result) throws -> Element) -> AnyObserver<Result>","type":"method"},{"path":"\/documentation\/rxswift\/observertype\/on(_:)","title":"func on(Event<Element>)","type":"method"},{"path":"\/documentation\/rxswift\/observertype\/oncompleted()","title":"func onCompleted()","type":"method"},{"path":"\/documentation\/rxswift\/observertype\/onerror(_:)","title":"func onError(Swift.Error)","type":"method"},{"path":"\/documentation\/rxswift\/observertype\/onnext(_:)","title":"func onNext(Element)","type":"method"}],"path":"\/documentation\/rxswift\/observertype","title":"ObserverType","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/element","title":"Element","type":"associatedtype"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/trait","title":"Trait","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/primitivesequence","title":"var primitiveSequence: PrimitiveSequence<Trait, Element>","type":"property"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/value-37mhu","title":"var value: Void","type":"property"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/value-8tige","title":"var value: Element?","type":"property"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/value-ysy8","title":"var value: Element","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/andthen(_:)-2ahh4","title":"func andThen<Element>(Observable<Element>) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/andthen(_:)-2z9a","title":"func andThen<Element>(Single<Element>) -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/andthen(_:)-4uykw","title":"func andThen(Completable) -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/andthen(_:)-9nzti","title":"func andThen<Element>(Maybe<Element>) -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/ascompletable()","title":"func asCompletable() -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/asmaybe()","title":"func asMaybe() -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/catchandreturn(_:)-38lew","title":"func catchAndReturn(Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/catchandreturn(_:)-40rk7","title":"func catchAndReturn(Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/catcherrorjustreturn(_:)-36a8p","title":"func catchErrorJustReturn(Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/catcherrorjustreturn(_:)-6z5al","title":"func catchErrorJustReturn(Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/compactmap(_:)-230l2","title":"func compactMap<Result>((Element) throws -> Result?) -> Maybe<Result>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/compactmap(_:)-6373z","title":"func compactMap<Result>((Element) throws -> Result?) -> Maybe<Result>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/concat(_:)-swift.method","title":"func concat(Completable) -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/do(onerror:aftererror:oncompleted:aftercompleted:onsubscribe:onsubscribed:ondispose:)","title":"func `do`(onError: ((Swift.Error) throws -> Void)?, afterError: ((Swift.Error) throws -> Void)?, onCompleted: (() throws -> Void)?, afterCompleted: (() throws -> Void)?, onSubscribe: (() -> Void)?, onSubscribed: (() -> Void)?, onDispose: (() -> Void)?) -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/do(onnext:afternext:onerror:aftererror:oncompleted:aftercompleted:onsubscribe:onsubscribed:ondispose:)","title":"func `do`(onNext: ((Element) throws -> Void)?, afterNext: ((Element) throws -> Void)?, onError: ((Swift.Error) throws -> Void)?, afterError: ((Swift.Error) throws -> Void)?, onCompleted: (() throws -> Void)?, afterCompleted: (() throws -> Void)?, onSubscribe: (() -> Void)?, onSubscribed: (() -> Void)?, onDispose: (() -> Void)?) -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/do(onsuccess:aftersuccess:onerror:aftererror:onsubscribe:onsubscribed:ondispose:)","title":"func `do`(onSuccess: ((Element) throws -> Void)?, afterSuccess: ((Element) throws -> Void)?, onError: ((Swift.Error) throws -> Void)?, afterError: ((Swift.Error) throws -> Void)?, onSubscribe: (() -> Void)?, onSubscribed: (() -> Void)?, onDispose: (() -> Void)?) -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/filter(_:)-5lt98","title":"func filter((Element) throws -> Bool) -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/filter(_:)-6azqo","title":"func filter((Element) throws -> Bool) -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/flatmap(_:)-32anp","title":"func flatMap<Result>((Element) throws -> Single<Result>) -> Single<Result>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/flatmap(_:)-7jtts","title":"func flatMap<Result>((Element) throws -> Maybe<Result>) -> Maybe<Result>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/flatmapcompletable(_:)","title":"func flatMapCompletable((Element) throws -> Completable) -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/flatmapmaybe(_:)","title":"func flatMapMaybe<Result>((Element) throws -> Maybe<Result>) -> Maybe<Result>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/ifempty(default:)","title":"func ifEmpty(default: Element) -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/ifempty(switchto:)-3biah","title":"func ifEmpty(switchTo: Maybe<Element>) -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/ifempty(switchto:)-4j3gv","title":"func ifEmpty(switchTo: Single<Element>) -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/map(_:)-69psz","title":"func map<Result>((Element) throws -> Result) -> Maybe<Result>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/map(_:)-95n2m","title":"func map<Result>((Element) throws -> Result) -> Single<Result>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/subscribe(_:)-5u7lk","title":"func subscribe((SingleEvent<Element>) -> Void) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/subscribe(_:)-9dbpu","title":"func subscribe((MaybeEvent<Element>) -> Void) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/subscribe(_:)-9lm2x","title":"func subscribe((CompletableEvent) -> Void) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/subscribe(oncompleted:onerror:ondisposed:)","title":"func subscribe(onCompleted: (() -> Void)?, onError: ((Swift.Error) -> Void)?, onDisposed: (() -> Void)?) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/subscribe(onsuccess:onerror:oncompleted:ondisposed:)","title":"func subscribe(onSuccess: ((Element) -> Void)?, onError: ((Swift.Error) -> Void)?, onCompleted: (() -> Void)?, onDisposed: (() -> Void)?) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/subscribe(onsuccess:onerror:ondisposed:)","title":"func subscribe(onSuccess: ((Element) -> Void)?, onError: ((Swift.Error) -> Void), onDisposed: (() -> Void)?) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/subscribe(onsuccess:onfailure:ondisposed:)","title":"func subscribe(onSuccess: ((Element) -> Void)?, onFailure: ((Swift.Error) -> Void)?, onDisposed: (() -> Void)?) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/subscribe(with:oncompleted:onerror:ondisposed:)","title":"func subscribe<Object>(with: Object, onCompleted: ((Object) -> Void)?, onError: ((Object, Swift.Error) -> Void)?, onDisposed: ((Object) -> Void)?) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/subscribe(with:onsuccess:onerror:oncompleted:ondisposed:)","title":"func subscribe<Object>(with: Object, onSuccess: ((Object, Element) -> Void)?, onError: ((Object, Swift.Error) -> Void)?, onCompleted: ((Object) -> Void)?, onDisposed: ((Object) -> Void)?) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/subscribe(with:onsuccess:onfailure:ondisposed:)","title":"func subscribe<Object>(with: Object, onSuccess: ((Object, Element) -> Void)?, onFailure: ((Object, Swift.Error) -> Void)?, onDisposed: ((Object) -> Void)?) -> Disposable","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/completableobserver","title":"PrimitiveSequenceType.CompletableObserver","type":"typealias"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/maybeobserver","title":"PrimitiveSequenceType.MaybeObserver","type":"typealias"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/singleobserver","title":"PrimitiveSequenceType.SingleObserver","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/concat(_:)-swift.type.method-2r3ge","title":"static func concat<Sequence>(Sequence) -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/concat(_:)-swift.type.method-2x6xo","title":"static func concat(Completable...) -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/concat(_:)-swift.type.method-9unfp","title":"static func concat<Collection>(Collection) -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/create(subscribe:)-1xnww","title":"static func create(subscribe: (MaybeObserver) -> Disposable) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/create(subscribe:)-5l8qf","title":"static func create(subscribe: (SingleObserver) -> Disposable) -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/create(subscribe:)-6yu90","title":"static func create(subscribe: (CompletableObserver) -> Disposable) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/empty()-40209","title":"static func empty() -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/empty()-8rq66","title":"static func empty() -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/error(_:)-1xxrn","title":"static func error(Swift.Error) -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/error(_:)-3v2sb","title":"static func error(Swift.Error) -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/error(_:)-9hi4b","title":"static func error(Swift.Error) -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/just(_:)-49zbd","title":"static func just(Element) -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/just(_:)-6yyjo","title":"static func just(Element) -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/just(_:scheduler:)-7dg4l","title":"static func just(Element, scheduler: ImmediateSchedulerType) -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/just(_:scheduler:)-88k3u","title":"static func just(Element, scheduler: ImmediateSchedulerType) -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/never()-1d9en","title":"static func never() -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/never()-330jb","title":"static func never() -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/never()-7fn4s","title":"static func never() -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/timer(_:scheduler:)","title":"static func timer(RxTimeInterval, scheduler: SchedulerType) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:)-2w6cs","title":"static func zip([Completable]) -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:)-30oj2","title":"static func zip(Completable...) -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:)-36sdr","title":"static func zip<Collection>(Collection) -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:)-t05f","title":"static func zip<Collection>(Collection) -> PrimitiveSequence<Trait, [Element]>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:)-6r76f","title":"static func zip<E1, E2>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>) -> PrimitiveSequence<Trait, (E1, E2)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:)-7k36d","title":"static func zip<E1, E2>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>) -> PrimitiveSequence<Trait, (E1, E2)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:_:)-7etvq","title":"static func zip<E1, E2, E3>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>) -> PrimitiveSequence<Trait, (E1, E2, E3)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:_:)-9lk39","title":"static func zip<E1, E2, E3>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>) -> PrimitiveSequence<Trait, (E1, E2, E3)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:_:_:)-2tu2r","title":"static func zip<E1, E2, E3, E4>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>) -> PrimitiveSequence<Trait, (E1, E2, E3, E4)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:_:_:)-8jpb4","title":"static func zip<E1, E2, E3, E4>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>) -> PrimitiveSequence<Trait, (E1, E2, E3, E4)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:_:_:_:)-3zn5t","title":"static func zip<E1, E2, E3, E4, E5>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>) -> PrimitiveSequence<Trait, (E1, E2, E3, E4, E5)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:_:_:_:)-4jv5j","title":"static func zip<E1, E2, E3, E4, E5>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>) -> PrimitiveSequence<Trait, (E1, E2, E3, E4, E5)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:_:_:_:_:)-68dbx","title":"static func zip<E1, E2, E3, E4, E5, E6>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, PrimitiveSequence<Trait, E6>) -> PrimitiveSequence<Trait, (E1, E2, E3, E4, E5, E6)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:_:_:_:_:)-9us3s","title":"static func zip<E1, E2, E3, E4, E5, E6>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, PrimitiveSequence<Trait, E6>) -> PrimitiveSequence<Trait, (E1, E2, E3, E4, E5, E6)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:_:_:_:_:_:)-7prrb","title":"static func zip<E1, E2, E3, E4, E5, E6, E7>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, PrimitiveSequence<Trait, E6>, PrimitiveSequence<Trait, E7>) -> PrimitiveSequence<Trait, (E1, E2, E3, E4, E5, E6, E7)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:_:_:_:_:_:)-9n9d4","title":"static func zip<E1, E2, E3, E4, E5, E6, E7>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, PrimitiveSequence<Trait, E6>, PrimitiveSequence<Trait, E7>) -> PrimitiveSequence<Trait, (E1, E2, E3, E4, E5, E6, E7)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:_:_:_:_:_:_:)-1am31","title":"static func zip<E1, E2, E3, E4, E5, E6, E7, E8>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, PrimitiveSequence<Trait, E6>, PrimitiveSequence<Trait, E7>, PrimitiveSequence<Trait, E8>) -> PrimitiveSequence<Trait, (E1, E2, E3, E4, E5, E6, E7, E8)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:_:_:_:_:_:_:)-1wa5p","title":"static func zip<E1, E2, E3, E4, E5, E6, E7, E8>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, PrimitiveSequence<Trait, E6>, PrimitiveSequence<Trait, E7>, PrimitiveSequence<Trait, E8>) -> PrimitiveSequence<Trait, (E1, E2, E3, E4, E5, E6, E7, E8)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:_:_:_:_:_:_:resultselector:)-2e6eo","title":"static func zip<E1, E2, E3, E4, E5, E6, E7, E8>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, PrimitiveSequence<Trait, E6>, PrimitiveSequence<Trait, E7>, PrimitiveSequence<Trait, E8>, resultSelector: (E1, E2, E3, E4, E5, E6, E7, E8) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:_:_:_:_:_:_:resultselector:)-8chzp","title":"static func zip<E1, E2, E3, E4, E5, E6, E7, E8>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, PrimitiveSequence<Trait, E6>, PrimitiveSequence<Trait, E7>, PrimitiveSequence<Trait, E8>, resultSelector: (E1, E2, E3, E4, E5, E6, E7, E8) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:_:_:_:_:_:resultselector:)-3f9i7","title":"static func zip<E1, E2, E3, E4, E5, E6, E7>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, PrimitiveSequence<Trait, E6>, PrimitiveSequence<Trait, E7>, resultSelector: (E1, E2, E3, E4, E5, E6, E7) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:_:_:_:_:_:resultselector:)-4nrxw","title":"static func zip<E1, E2, E3, E4, E5, E6, E7>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, PrimitiveSequence<Trait, E6>, PrimitiveSequence<Trait, E7>, resultSelector: (E1, E2, E3, E4, E5, E6, E7) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:_:_:_:_:resultselector:)-5mxzc","title":"static func zip<E1, E2, E3, E4, E5, E6>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, PrimitiveSequence<Trait, E6>, resultSelector: (E1, E2, E3, E4, E5, E6) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:_:_:_:_:resultselector:)-6ovym","title":"static func zip<E1, E2, E3, E4, E5, E6>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, PrimitiveSequence<Trait, E6>, resultSelector: (E1, E2, E3, E4, E5, E6) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:_:_:_:resultselector:)-1h7v","title":"static func zip<E1, E2, E3, E4, E5>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, resultSelector: (E1, E2, E3, E4, E5) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:_:_:_:resultselector:)-76fgk","title":"static func zip<E1, E2, E3, E4, E5>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, resultSelector: (E1, E2, E3, E4, E5) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:_:_:resultselector:)-2x6db","title":"static func zip<E1, E2, E3, E4>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, resultSelector: (E1, E2, E3, E4) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:_:_:resultselector:)-5pqs0","title":"static func zip<E1, E2, E3, E4>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, resultSelector: (E1, E2, E3, E4) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:_:resultselector:)-4uet","title":"static func zip<E1, E2, E3>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, resultSelector: (E1, E2, E3) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:_:resultselector:)-8mt0n","title":"static func zip<E1, E2, E3>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, resultSelector: (E1, E2, E3) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:resultselector:)-1xa3s","title":"static func zip<E1, E2>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, resultSelector: (E1, E2) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:_:resultselector:)-jp17","title":"static func zip<E1, E2>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, resultSelector: (E1, E2) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequencetype\/zip(_:resultselector:)","title":"static func zip<Collection, Result>(Collection, resultSelector: ([Element]) throws -> Result) -> PrimitiveSequence<Trait, Result>","type":"method"}],"path":"\/documentation\/rxswift\/primitivesequencetype","title":"PrimitiveSequenceType","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/rxswift\/reactivecompatible\/reactivebase","title":"ReactiveBase","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/rxswift\/reactivecompatible\/rx-swift.property-7mme1","title":"var rx: Reactive<Self>","type":"property"},{"path":"\/documentation\/rxswift\/reactivecompatible\/rx-swift.type.property-gxi9","title":"static var rx: Reactive<Self>.Type","type":"property"}],"title":"ReactiveCompatible Implementations","type":"groupMarker"}],"path":"\/documentation\/rxswift\/reactivecompatible\/rx-swift.property-56tpt","title":"var rx: Reactive<ReactiveBase>","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/rxswift\/reactivecompatible\/rx-swift.property-7mme1","title":"var rx: Reactive<Self>","type":"property"},{"path":"\/documentation\/rxswift\/reactivecompatible\/rx-swift.type.property-gxi9","title":"static var rx: Reactive<Self>.Type","type":"property"}],"title":"ReactiveCompatible Implementations","type":"groupMarker"}],"path":"\/documentation\/rxswift\/reactivecompatible\/rx-swift.type.property-2l9vr","title":"static var rx: Reactive<ReactiveBase>.Type","type":"property"}],"path":"\/documentation\/rxswift\/reactivecompatible","title":"ReactiveCompatible","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/schedulertype\/now","title":"var now: RxTime","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/rxswift\/schedulertype\/scheduleperiodic(_:startafter:period:action:)-70apf","title":"func schedulePeriodic<StateType>(StateType, startAfter: RxTimeInterval, period: RxTimeInterval, action: (StateType) -> StateType) -> Disposable","type":"method"}],"title":"SchedulerType Implementations","type":"groupMarker"}],"path":"\/documentation\/rxswift\/schedulertype\/scheduleperiodic(_:startafter:period:action:)-2k6zq","title":"func schedulePeriodic<StateType>(StateType, startAfter: RxTimeInterval, period: RxTimeInterval, action: (StateType) -> StateType) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/schedulertype\/schedulerelative(_:duetime:action:)","title":"func scheduleRelative<StateType>(StateType, dueTime: RxTimeInterval, action: (StateType) -> Disposable) -> Disposable","type":"method"}],"path":"\/documentation\/rxswift\/schedulertype","title":"SchedulerType","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/rxswift\/subjecttype\/observer","title":"Observer","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/subjecttype\/asobserver()","title":"func asObserver() -> Observer","type":"method"}],"path":"\/documentation\/rxswift\/subjecttype","title":"SubjectType","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/rxswift\/virtualtimeconvertertype\/virtualtimeintervalunit","title":"VirtualTimeIntervalUnit","type":"associatedtype"},{"path":"\/documentation\/rxswift\/virtualtimeconvertertype\/virtualtimeunit","title":"VirtualTimeUnit","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/virtualtimeconvertertype\/comparevirtualtime(_:_:)","title":"func compareVirtualTime(VirtualTimeUnit, VirtualTimeUnit) -> VirtualTimeComparison","type":"method"},{"path":"\/documentation\/rxswift\/virtualtimeconvertertype\/convertfromvirtualtime(_:)","title":"func convertFromVirtualTime(VirtualTimeUnit) -> RxTime","type":"method"},{"path":"\/documentation\/rxswift\/virtualtimeconvertertype\/convertfromvirtualtimeinterval(_:)","title":"func convertFromVirtualTimeInterval(VirtualTimeIntervalUnit) -> TimeInterval","type":"method"},{"path":"\/documentation\/rxswift\/virtualtimeconvertertype\/converttovirtualtime(_:)","title":"func convertToVirtualTime(RxTime) -> VirtualTimeUnit","type":"method"},{"path":"\/documentation\/rxswift\/virtualtimeconvertertype\/converttovirtualtimeinterval(_:)","title":"func convertToVirtualTimeInterval(TimeInterval) -> VirtualTimeIntervalUnit","type":"method"},{"path":"\/documentation\/rxswift\/virtualtimeconvertertype\/offsetvirtualtime(_:offset:)","title":"func offsetVirtualTime(VirtualTimeUnit, offset: VirtualTimeIntervalUnit) -> VirtualTimeUnit","type":"method"}],"path":"\/documentation\/rxswift\/virtualtimeconvertertype","title":"VirtualTimeConverterType","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rxswift\/anyobserver\/init(_:)","title":"init<Observer>(Observer)","type":"init"},{"path":"\/documentation\/rxswift\/anyobserver\/init(eventhandler:)","title":"init(eventHandler: EventHandler)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/anyobserver\/asobserver()","title":"func asObserver() -> AnyObserver<Element>","type":"method"},{"path":"\/documentation\/rxswift\/anyobserver\/on(_:)","title":"func on(Event<Element>)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/rxswift\/anyobserver\/eventhandler","title":"AnyObserver.EventHandler","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/anyobserver\/mapobserver(_:)","title":"func mapObserver<Result>((Result) throws -> Element) -> AnyObserver<Result>","type":"method"},{"path":"\/documentation\/rxswift\/anyobserver\/oncompleted()","title":"func onCompleted()","type":"method"},{"path":"\/documentation\/rxswift\/anyobserver\/onerror(_:)","title":"func onError(Swift.Error)","type":"method"},{"path":"\/documentation\/rxswift\/anyobserver\/onnext(_:)","title":"func onNext(Element)","type":"method"}],"path":"\/documentation\/rxswift\/anyobserver\/observertype-implementations","title":"ObserverType Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/anyobserver","title":"AnyObserver","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rxswift\/binder\/init(_:scheduler:binding:)","title":"init<Target>(Target, scheduler: ImmediateSchedulerType, binding: (Target, Value) -> Void)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/binder\/asobserver()","title":"func asObserver() -> AnyObserver<Value>","type":"method"},{"path":"\/documentation\/rxswift\/binder\/on(_:)","title":"func on(Event<Value>)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/rxswift\/binder\/element","title":"Binder.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/binder\/mapobserver(_:)","title":"func mapObserver<Result>((Result) throws -> Element) -> AnyObserver<Result>","type":"method"},{"path":"\/documentation\/rxswift\/binder\/oncompleted()","title":"func onCompleted()","type":"method"},{"path":"\/documentation\/rxswift\/binder\/onerror(_:)","title":"func onError(Swift.Error)","type":"method"},{"path":"\/documentation\/rxswift\/binder\/onnext(_:)","title":"func onNext(Element)","type":"method"}],"path":"\/documentation\/rxswift\/binder\/observertype-implementations","title":"ObserverType Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/binder","title":"Binder","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/disposables\/create()","title":"static func create() -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/disposables\/create(_:)","title":"static func create([Disposable]) -> Cancelable","type":"method"},{"path":"\/documentation\/rxswift\/disposables\/create(_:_:)","title":"static func create(Disposable, Disposable) -> Cancelable","type":"method"},{"path":"\/documentation\/rxswift\/disposables\/create(_:_:_:)","title":"static func create(Disposable, Disposable, Disposable) -> Cancelable","type":"method"},{"path":"\/documentation\/rxswift\/disposables\/create(_:_:_:_:)","title":"static func create(Disposable, Disposable, Disposable, Disposable...) -> Cancelable","type":"method"},{"path":"\/documentation\/rxswift\/disposables\/create(with:)","title":"static func create(with: () -> Void) -> Cancelable","type":"method"}],"path":"\/documentation\/rxswift\/disposables","title":"Disposables","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rxswift\/groupedobservable\/init(key:source:)","title":"init(key: Key, source: Observable<Element>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/groupedobservable\/key","title":"let key: Key","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/groupedobservable\/asobservable()","title":"func asObservable() -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/subscribe(_:)-4ysjg","title":"func subscribe<Observer>(Observer) -> Disposable","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/groupedobservable\/values","title":"var values: AsyncThrowingStream<Element, Error>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/groupedobservable\/asinfallible(onerrorfallbackto:)","title":"func asInfallible(onErrorFallbackTo: Infallible<Element>) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/asinfallible(onerrorjustreturn:)","title":"func asInfallible(onErrorJustReturn: Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/asinfallible(onerrorrecover:)","title":"func asInfallible(onErrorRecover: (Swift.Error) -> Infallible<Element>) -> Infallible<Element>","type":"method"}],"path":"\/documentation\/rxswift\/groupedobservable\/observableconvertibletype-implementations","title":"ObservableConvertibleType Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/groupedobservable\/amb(_:)","title":"func amb<O2>(O2) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/ascompletable()","title":"func asCompletable() -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/asmaybe()","title":"func asMaybe() -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/assingle()","title":"func asSingle() -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/buffer(timespan:count:scheduler:)","title":"func buffer(timeSpan: RxTimeInterval, count: Int, scheduler: SchedulerType) -> Observable<[Element]>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/catch(_:)","title":"func `catch`((Swift.Error) throws -> Observable<Element>) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/catchandreturn(_:)","title":"func catchAndReturn(Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/catcherror(_:)","title":"func catchError((Swift.Error) throws -> Observable<Element>) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/catcherrorjustreturn(_:)","title":"func catchErrorJustReturn(Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/compactmap(_:)","title":"func compactMap<Result>((Element) throws -> Result?) -> Observable<Result>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/concat()","title":"func concat() -> Observable<Element.Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/concat(_:)","title":"func concat<Source>(Source) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/concatmap(_:)","title":"func concatMap<Source>((Element) throws -> Source) -> Observable<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/debounce(_:scheduler:)","title":"func debounce(RxTimeInterval, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/debug(_:trimoutput:file:line:function:)","title":"func debug(String?, trimOutput: Bool, file: String, line: UInt, function: String) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/decode(type:decoder:)","title":"func decode<Item, Decoder>(type: Item.Type, decoder: Decoder) -> Observable<Item>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/delay(_:scheduler:)","title":"func delay(RxTimeInterval, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/delaysubscription(_:scheduler:)","title":"func delaySubscription(RxTimeInterval, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/dematerialize()","title":"func dematerialize() -> Observable<Element.Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/distinctuntilchanged()","title":"func distinctUntilChanged() -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/distinctuntilchanged(_:)","title":"func distinctUntilChanged((Element, Element) throws -> Bool) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/distinctuntilchanged(_:comparer:)","title":"func distinctUntilChanged<K>((Element) throws -> K, comparer: (K, K) throws -> Bool) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/distinctuntilchanged(at:)","title":"func distinctUntilChanged<Property>(at: KeyPath<Element, Property>) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/do(onnext:afternext:onerror:aftererror:oncompleted:aftercompleted:onsubscribe:onsubscribed:ondispose:)","title":"func `do`(onNext: ((Element) throws -> Void)?, afterNext: ((Element) throws -> Void)?, onError: ((Swift.Error) throws -> Void)?, afterError: ((Swift.Error) throws -> Void)?, onCompleted: (() throws -> Void)?, afterCompleted: (() throws -> Void)?, onSubscribe: (() -> Void)?, onSubscribed: (() -> Void)?, onDispose: (() -> Void)?) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/element(at:)","title":"func element(at: Int) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/elementat(_:)","title":"func elementAt(Int) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/enumerated()","title":"func enumerated() -> Observable<(index: Int, element: Element)>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/filter(_:)","title":"func filter((Element) throws -> Bool) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/first()","title":"func first() -> Single<Element?>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/flatmap(_:)","title":"func flatMap<Source>((Element) throws -> Source) -> Observable<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/flatmapfirst(_:)","title":"func flatMapFirst<Source>((Element) throws -> Source) -> Observable<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/flatmaplatest(_:)-11yrd","title":"func flatMapLatest<Source>((Element) throws -> Source) -> Infallible<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/flatmaplatest(_:)-6q6oq","title":"func flatMapLatest<Source>((Element) throws -> Source) -> Observable<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/groupby(keyselector:)","title":"func groupBy<Key>(keySelector: (Element) throws -> Key) -> Observable<GroupedObservable<Key, Element>>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/ifempty(default:)","title":"func ifEmpty(default: Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/ifempty(switchto:)","title":"func ifEmpty(switchTo: Observable<Element>) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/ignoreelements()","title":"func ignoreElements() -> Observable<Never>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/map(_:)","title":"func map<Result>((Element) throws -> Result) -> Observable<Result>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/materialize()","title":"func materialize() -> Observable<Event<Element>>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/merge()","title":"func merge() -> Observable<Element.Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/merge(maxconcurrent:)","title":"func merge(maxConcurrent: Int) -> Observable<Element.Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/multicast(_:)","title":"func multicast<Subject>(Subject) -> ConnectableObservable<Subject.Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/multicast(_:selector:)","title":"func multicast<Subject, Result>(() throws -> Subject, selector: (Observable<Subject.Element>) throws -> Observable<Result>) -> Observable<Result>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/multicast(makesubject:)","title":"func multicast<Subject>(makeSubject: () -> Subject) -> ConnectableObservable<Subject.Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/observe(on:)","title":"func observe(on: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/observeon(_:)","title":"func observeOn(ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/publish()","title":"func publish() -> ConnectableObservable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/reduce(_:accumulator:)","title":"func reduce<A>(A, accumulator: (A, Element) throws -> A) -> Observable<A>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/reduce(_:accumulator:mapresult:)","title":"func reduce<A, Result>(A, accumulator: (A, Element) throws -> A, mapResult: (A) throws -> Result) -> Observable<Result>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/replay(_:)","title":"func replay(Int) -> ConnectableObservable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/replayall()","title":"func replayAll() -> ConnectableObservable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/retry()","title":"func retry() -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/retry(_:)","title":"func retry(Int) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/retry(when:)-34fc1","title":"func retry<TriggerObservable, Error>(when: (Observable<Error>) -> TriggerObservable) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/retry(when:)-952ag","title":"func retry<TriggerObservable>(when: (Observable<Swift.Error>) -> TriggerObservable) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/retrywhen(_:)-4t6sc","title":"func retryWhen<TriggerObservable, Error>((Observable<Error>) -> TriggerObservable) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/retrywhen(_:)-7oic2","title":"func retryWhen<TriggerObservable>((Observable<Swift.Error>) -> TriggerObservable) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/sample(_:defaultvalue:)","title":"func sample<Source>(Source, defaultValue: Element?) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/scan(_:accumulator:)","title":"func scan<A>(A, accumulator: (A, Element) throws -> A) -> Observable<A>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/scan(into:accumulator:)","title":"func scan<A>(into: A, accumulator: (inout A, Element) throws -> Void) -> Observable<A>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/share(replay:scope:)","title":"func share(replay: Int, scope: SubjectLifetimeScope) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/single()","title":"func single() -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/single(_:)","title":"func single((Element) throws -> Bool) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/skip(_:)","title":"func skip(Int) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/skip(_:scheduler:)","title":"func skip(RxTimeInterval, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/skip(until:)","title":"func skip<Source>(until: Source) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/skip(while:)","title":"func skip(while: (Element) throws -> Bool) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/skipuntil(_:)","title":"func skipUntil<Source>(Source) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/skipwhile(_:)","title":"func skipWhile((Element) throws -> Bool) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/startwith(_:)","title":"func startWith(Element...) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/subscribe(_:)-1sb7d","title":"func subscribe((Event<Element>) -> Void) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/subscribe(on:)","title":"func subscribe(on: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/subscribe(onnext:onerror:oncompleted:ondisposed:)","title":"func subscribe(onNext: ((Element) -> Void)?, onError: ((Swift.Error) -> Void)?, onCompleted: (() -> Void)?, onDisposed: (() -> Void)?) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/subscribe(with:onnext:onerror:oncompleted:ondisposed:)","title":"func subscribe<Object>(with: Object, onNext: ((Object, Element) -> Void)?, onError: ((Object, Swift.Error) -> Void)?, onCompleted: ((Object) -> Void)?, onDisposed: ((Object) -> Void)?) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/subscribeon(_:)","title":"func subscribeOn(ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/switchlatest()","title":"func switchLatest() -> Observable<Element.Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/take(_:)","title":"func take(Int) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/take(_:scheduler:)","title":"func take(RxTimeInterval, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/take(for:scheduler:)","title":"func take(for: RxTimeInterval, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/take(until:)","title":"func take<Source>(until: Source) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/take(until:behavior:)","title":"func take(until: (Element) throws -> Bool, behavior: TakeBehavior) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/take(while:behavior:)","title":"func take(while: (Element) throws -> Bool, behavior: TakeBehavior) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/takelast(_:)","title":"func takeLast(Int) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/takeuntil(_:)","title":"func takeUntil<Source>(Source) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/takeuntil(_:predicate:)","title":"func takeUntil(TakeBehavior, predicate: (Element) throws -> Bool) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/takewhile(_:)","title":"func takeWhile((Element) throws -> Bool) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/throttle(_:latest:scheduler:)","title":"func throttle(RxTimeInterval, latest: Bool, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/timeout(_:other:scheduler:)","title":"func timeout<Source>(RxTimeInterval, other: Source, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/timeout(_:scheduler:)","title":"func timeout(RxTimeInterval, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/toarray()","title":"func toArray() -> Single<[Element]>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/window(timespan:count:scheduler:)","title":"func window(timeSpan: RxTimeInterval, count: Int, scheduler: SchedulerType) -> Observable<Observable<Element>>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/withlatestfrom(_:)","title":"func withLatestFrom<Source>(Source) -> Observable<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/withlatestfrom(_:resultselector:)","title":"func withLatestFrom<Source, ResultType>(Source, resultSelector: (Element, Source.Element) throws -> ResultType) -> Observable<ResultType>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/withunretained(_:)","title":"func withUnretained<Object>(Object) -> Observable<(Object, Element)>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/withunretained(_:resultselector:)","title":"func withUnretained<Object, Out>(Object, resultSelector: (Object, Element) -> Out) -> Observable<Out>","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/groupedobservable\/catch(sequence:)","title":"static func `catch`<Sequence>(sequence: Sequence) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/combinelatest(_:)","title":"static func combineLatest<Collection>(Collection) -> Observable<[Element]>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/combinelatest(_:_:)","title":"static func combineLatest<O1, O2>(O1, O2) -> Observable<(O1.Element, O2.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/combinelatest(_:_:_:)","title":"static func combineLatest<O1, O2, O3>(O1, O2, O3) -> Observable<(O1.Element, O2.Element, O3.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/combinelatest(_:_:_:_:)","title":"static func combineLatest<O1, O2, O3, O4>(O1, O2, O3, O4) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/combinelatest(_:_:_:_:_:)","title":"static func combineLatest<O1, O2, O3, O4, O5>(O1, O2, O3, O4, O5) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element, O5.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/combinelatest(_:_:_:_:_:_:)","title":"static func combineLatest<O1, O2, O3, O4, O5, O6>(O1, O2, O3, O4, O5, O6) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/combinelatest(_:_:_:_:_:_:_:)","title":"static func combineLatest<O1, O2, O3, O4, O5, O6, O7>(O1, O2, O3, O4, O5, O6, O7) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/combinelatest(_:_:_:_:_:_:_:_:)","title":"static func combineLatest<O1, O2, O3, O4, O5, O6, O7, O8>(O1, O2, O3, O4, O5, O6, O7, O8) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element, O8.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/combinelatest(_:_:_:_:_:_:_:_:resultselector:)","title":"static func combineLatest<O1, O2, O3, O4, O5, O6, O7, O8>(O1, O2, O3, O4, O5, O6, O7, O8, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element, O8.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/combinelatest(_:_:_:_:_:_:_:resultselector:)","title":"static func combineLatest<O1, O2, O3, O4, O5, O6, O7>(O1, O2, O3, O4, O5, O6, O7, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/combinelatest(_:_:_:_:_:_:resultselector:)","title":"static func combineLatest<O1, O2, O3, O4, O5, O6>(O1, O2, O3, O4, O5, O6, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/combinelatest(_:_:_:_:_:resultselector:)","title":"static func combineLatest<O1, O2, O3, O4, O5>(O1, O2, O3, O4, O5, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/combinelatest(_:_:_:_:resultselector:)","title":"static func combineLatest<O1, O2, O3, O4>(O1, O2, O3, O4, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/combinelatest(_:_:_:resultselector:)","title":"static func combineLatest<O1, O2, O3>(O1, O2, O3, resultSelector: (O1.Element, O2.Element, O3.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/combinelatest(_:_:resultselector:)","title":"static func combineLatest<O1, O2>(O1, O2, resultSelector: (O1.Element, O2.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/combinelatest(_:resultselector:)","title":"static func combineLatest<Collection>(Collection, resultSelector: ([Collection.Element.Element]) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/create(_:)","title":"static func create((AnyObserver<Element>) -> Disposable) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/deferred(_:)","title":"static func deferred(() throws -> Observable<Element>) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/empty()","title":"static func empty() -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/error(_:)","title":"static func error(Swift.Error) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/from(_:scheduler:)-40o9h","title":"static func from([Element], scheduler: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/from(_:scheduler:)-6j7xd","title":"static func from<Sequence>(Sequence, scheduler: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/from(optional:)","title":"static func from(optional: Element?) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/from(optional:scheduler:)","title":"static func from(optional: Element?, scheduler: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/generate(initialstate:condition:scheduler:iterate:)","title":"static func generate(initialState: Element, condition: (Element) throws -> Bool, scheduler: ImmediateSchedulerType, iterate: (Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/interval(_:scheduler:)","title":"static func interval(RxTimeInterval, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/just(_:)","title":"static func just(Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/just(_:scheduler:)","title":"static func just(Element, scheduler: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/merge(_:)-3tjo4","title":"static func merge([Observable<Element>]) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/merge(_:)-5wltc","title":"static func merge<Collection>(Collection) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/merge(_:)-8bef1","title":"static func merge(Observable<Element>...) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/never()","title":"static func never() -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/of(_:scheduler:)","title":"static func of(Element..., scheduler: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/range(start:count:scheduler:)","title":"static func range(start: Element, count: Element, scheduler: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/repeatelement(_:scheduler:)","title":"static func repeatElement(Element, scheduler: ImmediateSchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/timer(_:period:scheduler:)","title":"static func timer(RxTimeInterval, period: RxTimeInterval?, scheduler: SchedulerType) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/using(_:observablefactory:)","title":"static func using<Resource>(() throws -> Resource, observableFactory: (Resource) throws -> Observable<Element>) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/zip(_:)","title":"static func zip<Collection>(Collection) -> Observable<[Element]>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/zip(_:_:)","title":"static func zip<O1, O2>(O1, O2) -> Observable<(O1.Element, O2.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/zip(_:_:_:)","title":"static func zip<O1, O2, O3>(O1, O2, O3) -> Observable<(O1.Element, O2.Element, O3.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/zip(_:_:_:_:)","title":"static func zip<O1, O2, O3, O4>(O1, O2, O3, O4) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/zip(_:_:_:_:_:)","title":"static func zip<O1, O2, O3, O4, O5>(O1, O2, O3, O4, O5) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element, O5.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/zip(_:_:_:_:_:_:)","title":"static func zip<O1, O2, O3, O4, O5, O6>(O1, O2, O3, O4, O5, O6) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/zip(_:_:_:_:_:_:_:)","title":"static func zip<O1, O2, O3, O4, O5, O6, O7>(O1, O2, O3, O4, O5, O6, O7) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/zip(_:_:_:_:_:_:_:_:)","title":"static func zip<O1, O2, O3, O4, O5, O6, O7, O8>(O1, O2, O3, O4, O5, O6, O7, O8) -> Observable<(O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element, O8.Element)>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/zip(_:_:_:_:_:_:_:_:resultselector:)","title":"static func zip<O1, O2, O3, O4, O5, O6, O7, O8>(O1, O2, O3, O4, O5, O6, O7, O8, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element, O8.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/zip(_:_:_:_:_:_:_:resultselector:)","title":"static func zip<O1, O2, O3, O4, O5, O6, O7>(O1, O2, O3, O4, O5, O6, O7, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element, O7.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/zip(_:_:_:_:_:_:resultselector:)","title":"static func zip<O1, O2, O3, O4, O5, O6>(O1, O2, O3, O4, O5, O6, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element, O6.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/zip(_:_:_:_:_:resultselector:)","title":"static func zip<O1, O2, O3, O4, O5>(O1, O2, O3, O4, O5, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element, O5.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/zip(_:_:_:_:resultselector:)","title":"static func zip<O1, O2, O3, O4>(O1, O2, O3, O4, resultSelector: (O1.Element, O2.Element, O3.Element, O4.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/zip(_:_:_:resultselector:)","title":"static func zip<O1, O2, O3>(O1, O2, O3, resultSelector: (O1.Element, O2.Element, O3.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/zip(_:_:resultselector:)","title":"static func zip<O1, O2>(O1, O2, resultSelector: (O1.Element, O2.Element) throws -> Element) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/groupedobservable\/zip(_:resultselector:)","title":"static func zip<Collection>(Collection, resultSelector: ([Collection.Element.Element]) throws -> Element) -> Observable<Element>","type":"method"}],"path":"\/documentation\/rxswift\/groupedobservable\/observabletype-implementations","title":"ObservableType Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/groupedobservable","title":"GroupedObservable","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/historicalschedulertimeconverter\/comparevirtualtime(_:_:)","title":"func compareVirtualTime(VirtualTimeUnit, VirtualTimeUnit) -> VirtualTimeComparison","type":"method"},{"path":"\/documentation\/rxswift\/historicalschedulertimeconverter\/convertfromvirtualtime(_:)","title":"func convertFromVirtualTime(VirtualTimeUnit) -> RxTime","type":"method"},{"path":"\/documentation\/rxswift\/historicalschedulertimeconverter\/convertfromvirtualtimeinterval(_:)","title":"func convertFromVirtualTimeInterval(VirtualTimeIntervalUnit) -> TimeInterval","type":"method"},{"path":"\/documentation\/rxswift\/historicalschedulertimeconverter\/converttovirtualtime(_:)","title":"func convertToVirtualTime(RxTime) -> VirtualTimeUnit","type":"method"},{"path":"\/documentation\/rxswift\/historicalschedulertimeconverter\/converttovirtualtimeinterval(_:)","title":"func convertToVirtualTimeInterval(TimeInterval) -> VirtualTimeIntervalUnit","type":"method"},{"path":"\/documentation\/rxswift\/historicalschedulertimeconverter\/offsetvirtualtime(_:offset:)","title":"func offsetVirtualTime(VirtualTimeUnit, offset: VirtualTimeIntervalUnit) -> VirtualTimeUnit","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/rxswift\/historicalschedulertimeconverter\/virtualtimeintervalunit","title":"HistoricalSchedulerTimeConverter.VirtualTimeIntervalUnit","type":"typealias"},{"path":"\/documentation\/rxswift\/historicalschedulertimeconverter\/virtualtimeunit","title":"HistoricalSchedulerTimeConverter.VirtualTimeUnit","type":"typealias"}],"path":"\/documentation\/rxswift\/historicalschedulertimeconverter","title":"HistoricalSchedulerTimeConverter","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/infallible\/asobservable()","title":"func asObservable() -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/do(onnext:afternext:oncompleted:aftercompleted:onsubscribe:onsubscribed:ondispose:)","title":"func `do`(onNext: ((Element) throws -> Void)?, afterNext: ((Element) throws -> Void)?, onCompleted: (() throws -> Void)?, afterCompleted: (() throws -> Void)?, onSubscribe: (() -> Void)?, onSubscribed: (() -> Void)?, onDispose: (() -> Void)?) -> Infallible<Element>","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/rxswift\/infallible\/infallibleobserver","title":"Infallible.InfallibleObserver","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/infallible\/combinelatest(_:_:_:_:_:_:_:_:resultselector:)","title":"static func combineLatest<I1, I2, I3, I4, I5, I6, I7, I8>(I1, I2, I3, I4, I5, I6, I7, I8, resultSelector: (I1.Element, I2.Element, I3.Element, I4.Element, I5.Element, I6.Element, I7.Element, I8.Element) throws -> Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/combinelatest(_:_:_:_:_:_:_:resultselector:)","title":"static func combineLatest<I1, I2, I3, I4, I5, I6, I7>(I1, I2, I3, I4, I5, I6, I7, resultSelector: (I1.Element, I2.Element, I3.Element, I4.Element, I5.Element, I6.Element, I7.Element) throws -> Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/combinelatest(_:_:_:_:_:_:resultselector:)","title":"static func combineLatest<I1, I2, I3, I4, I5, I6>(I1, I2, I3, I4, I5, I6, resultSelector: (I1.Element, I2.Element, I3.Element, I4.Element, I5.Element, I6.Element) throws -> Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/combinelatest(_:_:_:_:_:resultselector:)","title":"static func combineLatest<I1, I2, I3, I4, I5>(I1, I2, I3, I4, I5, resultSelector: (I1.Element, I2.Element, I3.Element, I4.Element, I5.Element) throws -> Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/combinelatest(_:_:_:_:resultselector:)","title":"static func combineLatest<I1, I2, I3, I4>(I1, I2, I3, I4, resultSelector: (I1.Element, I2.Element, I3.Element, I4.Element) throws -> Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/combinelatest(_:_:_:resultselector:)","title":"static func combineLatest<I1, I2, I3>(I1, I2, I3, resultSelector: (I1.Element, I2.Element, I3.Element) throws -> Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/combinelatest(_:_:resultselector:)","title":"static func combineLatest<I1, I2>(I1, I2, resultSelector: (I1.Element, I2.Element) throws -> Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/create(subscribe:)","title":"static func create(subscribe: (InfallibleObserver) -> Disposable) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/from(_:scheduler:)-2h9yp","title":"static func from<Sequence>(Sequence, scheduler: ImmediateSchedulerType) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/from(_:scheduler:)-p2y9","title":"static func from([Element], scheduler: ImmediateSchedulerType) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/of(_:scheduler:)","title":"static func of(Element..., scheduler: ImmediateSchedulerType) -> Infallible<Element>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/infallible\/values-3ym2w","title":"var values: AsyncStream<Element>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/infallible\/compactmap(_:)","title":"func compactMap<Result>((Element) -> Result?) -> Infallible<Result>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/concat(_:)","title":"func concat<Source>(Source) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/concatmap(_:)","title":"func concatMap<Source>((Element) -> Source) -> Infallible<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/debounce(_:scheduler:)","title":"func debounce(RxTimeInterval, scheduler: SchedulerType) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/distinctuntilchanged()","title":"func distinctUntilChanged() -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/distinctuntilchanged(_:)","title":"func distinctUntilChanged((Element, Element) throws -> Bool) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/distinctuntilchanged(_:comparer:)","title":"func distinctUntilChanged<K>((Element) throws -> K, comparer: (K, K) throws -> Bool) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/distinctuntilchanged(at:)","title":"func distinctUntilChanged<Property>(at: KeyPath<Element, Property>) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/filter(_:)","title":"func filter((Element) -> Bool) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/flatmap(_:)","title":"func flatMap<Source>((Element) -> Source) -> Infallible<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/flatmapfirst(_:)","title":"func flatMapFirst<Source>((Element) -> Source) -> Infallible<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/flatmaplatest(_:)","title":"func flatMapLatest<Source>((Element) -> Source) -> Infallible<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/map(_:)","title":"func map<Result>((Element) -> Result) -> Infallible<Result>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/scan(_:accumulator:)","title":"func scan<Seed>(Seed, accumulator: (Seed, Element) -> Seed) -> Infallible<Seed>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/scan(into:accumulator:)","title":"func scan<Seed>(into: Seed, accumulator: (inout Seed, Element) -> Void) -> Infallible<Seed>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/share(replay:scope:)","title":"func share(replay: Int, scope: SubjectLifetimeScope) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/skip(until:)","title":"func skip<Source>(until: Source) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/skip(while:)","title":"func skip(while: (Element) throws -> Bool) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/startwith(_:)","title":"func startWith(Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/subscribe(_:)","title":"func subscribe((Event<Element>) -> Void) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/subscribe(onnext:oncompleted:ondisposed:)","title":"func subscribe(onNext: ((Element) -> Void)?, onCompleted: (() -> Void)?, onDisposed: (() -> Void)?) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/subscribe(with:onnext:oncompleted:ondisposed:)","title":"func subscribe<Object>(with: Object, onNext: ((Object, Element) -> Void)?, onCompleted: ((Object) -> Void)?, onDisposed: ((Object) -> Void)?) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/take(_:)","title":"func take(Int) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/take(for:scheduler:)","title":"func take(for: RxTimeInterval, scheduler: SchedulerType) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/take(until:)-7r7wp","title":"func take<Source>(until: Source) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/take(until:)-9t29","title":"func take<Source>(until: Source) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/take(until:behavior:)","title":"func take(until: (Element) throws -> Bool, behavior: TakeBehavior) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/take(while:behavior:)","title":"func take(while: (Element) throws -> Bool, behavior: TakeBehavior) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/throttle(_:latest:scheduler:)","title":"func throttle(RxTimeInterval, latest: Bool, scheduler: SchedulerType) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/withlatestfrom(_:)","title":"func withLatestFrom<Source>(Source) -> Infallible<Source.Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/withlatestfrom(_:resultselector:)","title":"func withLatestFrom<Source, ResultType>(Source, resultSelector: (Element, Source.Element) throws -> ResultType) -> Infallible<ResultType>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/withunretained(_:)","title":"func withUnretained<Object>(Object) -> Infallible<(Object, Element)>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/withunretained(_:resultselector:)","title":"func withUnretained<Object, Out>(Object, resultSelector: (Object, Element) -> Out) -> Infallible<Out>","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/infallible\/deferred(_:)","title":"static func deferred(() throws -> Infallible<Element>) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/empty()","title":"static func empty() -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/just(_:)","title":"static func just(Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/just(_:scheduler:)","title":"static func just(Element, scheduler: ImmediateSchedulerType) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/merge(_:)-2fcyk","title":"static func merge<Collection>(Collection) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/merge(_:)-5qvw4","title":"static func merge(Infallible<Element>...) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/merge(_:)-648nk","title":"static func merge([Infallible<Element>]) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/never()","title":"static func never() -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/zip(_:_:_:_:_:_:_:_:resultselector:)","title":"static func zip<E1, E2, E3, E4, E5, E6, E7, E8>(Infallible<E1>, Infallible<E2>, Infallible<E3>, Infallible<E4>, Infallible<E5>, Infallible<E6>, Infallible<E7>, Infallible<E8>, resultSelector: (E1, E2, E3, E4, E5, E6, E7, E8) throws -> Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/zip(_:_:_:_:_:_:_:resultselector:)","title":"static func zip<E1, E2, E3, E4, E5, E6, E7>(Infallible<E1>, Infallible<E2>, Infallible<E3>, Infallible<E4>, Infallible<E5>, Infallible<E6>, Infallible<E7>, resultSelector: (E1, E2, E3, E4, E5, E6, E7) throws -> Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/zip(_:_:_:_:_:_:resultselector:)","title":"static func zip<E1, E2, E3, E4, E5, E6>(Infallible<E1>, Infallible<E2>, Infallible<E3>, Infallible<E4>, Infallible<E5>, Infallible<E6>, resultSelector: (E1, E2, E3, E4, E5, E6) throws -> Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/zip(_:_:_:_:_:resultselector:)","title":"static func zip<E1, E2, E3, E4, E5>(Infallible<E1>, Infallible<E2>, Infallible<E3>, Infallible<E4>, Infallible<E5>, resultSelector: (E1, E2, E3, E4, E5) throws -> Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/zip(_:_:_:_:resultselector:)","title":"static func zip<E1, E2, E3, E4>(Infallible<E1>, Infallible<E2>, Infallible<E3>, Infallible<E4>, resultSelector: (E1, E2, E3, E4) throws -> Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/zip(_:_:_:resultselector:)","title":"static func zip<E1, E2, E3>(Infallible<E1>, Infallible<E2>, Infallible<E3>, resultSelector: (E1, E2, E3) throws -> Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/zip(_:_:resultselector:)","title":"static func zip<E1, E2>(Infallible<E1>, Infallible<E2>, resultSelector: (E1, E2) throws -> Element) -> Infallible<Element>","type":"method"}],"path":"\/documentation\/rxswift\/infallible\/infallibletype-implementations","title":"InfallibleType Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/infallible\/values-1kr77","title":"var values: AsyncThrowingStream<Element, Error>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/infallible\/asinfallible(onerrorfallbackto:)","title":"func asInfallible(onErrorFallbackTo: Infallible<Element>) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/asinfallible(onerrorjustreturn:)","title":"func asInfallible(onErrorJustReturn: Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/infallible\/asinfallible(onerrorrecover:)","title":"func asInfallible(onErrorRecover: (Swift.Error) -> Infallible<Element>) -> Infallible<Element>","type":"method"}],"path":"\/documentation\/rxswift\/infallible\/observableconvertibletype-implementations","title":"ObservableConvertibleType Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/infallible","title":"Infallible","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/primitivesequence\/catch(_:)","title":"func `catch`((Swift.Error) throws -> PrimitiveSequence<Trait, Element>) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/catcherror(_:)","title":"func catchError((Swift.Error) throws -> PrimitiveSequence<Trait, Element>) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/debug(_:trimoutput:file:line:function:)","title":"func debug(String?, trimOutput: Bool, file: String, line: UInt, function: String) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/delay(_:scheduler:)","title":"func delay(RxTimeInterval, scheduler: SchedulerType) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/delaysubscription(_:scheduler:)","title":"func delaySubscription(RxTimeInterval, scheduler: SchedulerType) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/filter(statuscode:)","title":"func filter(statusCode: Int) -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/filter(statuscodes:)","title":"func filter<R>(statusCodes: R) -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/filtersuccessfulstatusandredirectcodes()","title":"func filterSuccessfulStatusAndRedirectCodes() -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/filtersuccessfulstatuscodes()","title":"func filterSuccessfulStatusCodes() -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/map(_:atkeypath:using:failsonemptydata:)","title":"func map<D>(D.Type, atKeyPath: String?, using: JSONDecoder, failsOnEmptyData: Bool) -> Single<D>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/mapimage()","title":"func mapImage() -> Single<Image>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/mapjson(failsonemptydata:)","title":"func mapJSON(failsOnEmptyData: Bool) -> Single<Any>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/mapstring(atkeypath:)","title":"func mapString(atKeyPath: String?) -> Single<String>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/observe(on:)","title":"func observe(on: ImmediateSchedulerType) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/observeon(_:)","title":"func observeOn(ImmediateSchedulerType) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/retry(_:)","title":"func retry(Int) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/retry(when:)-1avjh","title":"func retry<TriggerObservable>(when: (Observable<Swift.Error>) -> TriggerObservable) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/retry(when:)-5cuc5","title":"func retry<TriggerObservable, Error>(when: (Observable<Error>) -> TriggerObservable) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/retrywhen(_:)-3ua4g","title":"func retryWhen<TriggerObservable>((Observable<Swift.Error>) -> TriggerObservable) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/retrywhen(_:)-q7bu","title":"func retryWhen<TriggerObservable, Error>((Observable<Error>) -> TriggerObservable) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/subscribe(on:)","title":"func subscribe(on: ImmediateSchedulerType) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/subscribeon(_:)","title":"func subscribeOn(ImmediateSchedulerType) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/timeout(_:other:scheduler:)","title":"func timeout(RxTimeInterval, other: PrimitiveSequence<Trait, Element>, scheduler: SchedulerType) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/timeout(_:scheduler:)","title":"func timeout(RxTimeInterval, scheduler: SchedulerType) -> PrimitiveSequence<Trait, Element>","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/primitivesequence\/deferred(_:)","title":"static func deferred(() throws -> PrimitiveSequence<Trait, Element>) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/using(_:primitivesequencefactory:)","title":"static func using<Resource>(() throws -> Resource, primitiveSequenceFactory: (Resource) throws -> PrimitiveSequence<Trait, Element>) -> PrimitiveSequence<Trait, Element>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/primitivesequence\/values","title":"var values: AsyncThrowingStream<Element, Error>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/primitivesequence\/asinfallible(onerrorfallbackto:)","title":"func asInfallible(onErrorFallbackTo: Infallible<Element>) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/asinfallible(onerrorjustreturn:)","title":"func asInfallible(onErrorJustReturn: Element) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/asinfallible(onerrorrecover:)","title":"func asInfallible(onErrorRecover: (Swift.Error) -> Infallible<Element>) -> Infallible<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/asobservable()","title":"func asObservable() -> Observable<Element>","type":"method"}],"path":"\/documentation\/rxswift\/primitivesequence\/observableconvertibletype-implementations","title":"ObservableConvertibleType Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/primitivesequence\/primitivesequence","title":"var primitiveSequence: PrimitiveSequence<Trait, Element>","type":"property"},{"path":"\/documentation\/rxswift\/primitivesequence\/value-21q5u","title":"var value: Void","type":"property"},{"path":"\/documentation\/rxswift\/primitivesequence\/value-9rzlo","title":"var value: Element","type":"property"},{"path":"\/documentation\/rxswift\/primitivesequence\/value-nh0d","title":"var value: Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/primitivesequence\/andthen(_:)-15qsm","title":"func andThen<Element>(Single<Element>) -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/andthen(_:)-31ay6","title":"func andThen(Completable) -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/andthen(_:)-80p6s","title":"func andThen<Element>(Maybe<Element>) -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/andthen(_:)-89e46","title":"func andThen<Element>(Observable<Element>) -> Observable<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/ascompletable()","title":"func asCompletable() -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/asmaybe()","title":"func asMaybe() -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/catchandreturn(_:)-2xshx","title":"func catchAndReturn(Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/catchandreturn(_:)-8b1tk","title":"func catchAndReturn(Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/catcherrorjustreturn(_:)-209wn","title":"func catchErrorJustReturn(Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/catcherrorjustreturn(_:)-8k1oh","title":"func catchErrorJustReturn(Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/compactmap(_:)-71fnw","title":"func compactMap<Result>((Element) throws -> Result?) -> Maybe<Result>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/compactmap(_:)-82fc0","title":"func compactMap<Result>((Element) throws -> Result?) -> Maybe<Result>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/concat(_:)","title":"func concat(Completable) -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/do(onerror:aftererror:oncompleted:aftercompleted:onsubscribe:onsubscribed:ondispose:)","title":"func `do`(onError: ((Swift.Error) throws -> Void)?, afterError: ((Swift.Error) throws -> Void)?, onCompleted: (() throws -> Void)?, afterCompleted: (() throws -> Void)?, onSubscribe: (() -> Void)?, onSubscribed: (() -> Void)?, onDispose: (() -> Void)?) -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/do(onnext:afternext:onerror:aftererror:oncompleted:aftercompleted:onsubscribe:onsubscribed:ondispose:)","title":"func `do`(onNext: ((Element) throws -> Void)?, afterNext: ((Element) throws -> Void)?, onError: ((Swift.Error) throws -> Void)?, afterError: ((Swift.Error) throws -> Void)?, onCompleted: (() throws -> Void)?, afterCompleted: (() throws -> Void)?, onSubscribe: (() -> Void)?, onSubscribed: (() -> Void)?, onDispose: (() -> Void)?) -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/do(onsuccess:aftersuccess:onerror:aftererror:onsubscribe:onsubscribed:ondispose:)","title":"func `do`(onSuccess: ((Element) throws -> Void)?, afterSuccess: ((Element) throws -> Void)?, onError: ((Swift.Error) throws -> Void)?, afterError: ((Swift.Error) throws -> Void)?, onSubscribe: (() -> Void)?, onSubscribed: (() -> Void)?, onDispose: (() -> Void)?) -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/filter(_:)-28tj1","title":"func filter((Element) throws -> Bool) -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/filter(_:)-56q8c","title":"func filter((Element) throws -> Bool) -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/flatmap(_:)-9wj54","title":"func flatMap<Result>((Element) throws -> Single<Result>) -> Single<Result>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/flatmap(_:)-yz9f","title":"func flatMap<Result>((Element) throws -> Maybe<Result>) -> Maybe<Result>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/flatmapcompletable(_:)","title":"func flatMapCompletable((Element) throws -> Completable) -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/flatmapmaybe(_:)","title":"func flatMapMaybe<Result>((Element) throws -> Maybe<Result>) -> Maybe<Result>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/ifempty(default:)","title":"func ifEmpty(default: Element) -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/ifempty(switchto:)-2a4a3","title":"func ifEmpty(switchTo: Single<Element>) -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/ifempty(switchto:)-8xnlp","title":"func ifEmpty(switchTo: Maybe<Element>) -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/map(_:)-54bzh","title":"func map<Result>((Element) throws -> Result) -> Maybe<Result>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/map(_:)-6169o","title":"func map<Result>((Element) throws -> Result) -> Single<Result>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/subscribe(_:)-318sm","title":"func subscribe((CompletableEvent) -> Void) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/subscribe(_:)-3xxz3","title":"func subscribe((SingleEvent<Element>) -> Void) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/subscribe(_:)-7yx9f","title":"func subscribe((MaybeEvent<Element>) -> Void) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/subscribe(oncompleted:onerror:ondisposed:)","title":"func subscribe(onCompleted: (() -> Void)?, onError: ((Swift.Error) -> Void)?, onDisposed: (() -> Void)?) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/subscribe(onsuccess:onerror:oncompleted:ondisposed:)","title":"func subscribe(onSuccess: ((Element) -> Void)?, onError: ((Swift.Error) -> Void)?, onCompleted: (() -> Void)?, onDisposed: (() -> Void)?) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/subscribe(onsuccess:onerror:ondisposed:)","title":"func subscribe(onSuccess: ((Element) -> Void)?, onError: ((Swift.Error) -> Void), onDisposed: (() -> Void)?) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/subscribe(onsuccess:onfailure:ondisposed:)","title":"func subscribe(onSuccess: ((Element) -> Void)?, onFailure: ((Swift.Error) -> Void)?, onDisposed: (() -> Void)?) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/subscribe(with:oncompleted:onerror:ondisposed:)","title":"func subscribe<Object>(with: Object, onCompleted: ((Object) -> Void)?, onError: ((Object, Swift.Error) -> Void)?, onDisposed: ((Object) -> Void)?) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/subscribe(with:onsuccess:onerror:oncompleted:ondisposed:)","title":"func subscribe<Object>(with: Object, onSuccess: ((Object, Element) -> Void)?, onError: ((Object, Swift.Error) -> Void)?, onCompleted: ((Object) -> Void)?, onDisposed: ((Object) -> Void)?) -> Disposable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/subscribe(with:onsuccess:onfailure:ondisposed:)","title":"func subscribe<Object>(with: Object, onSuccess: ((Object, Element) -> Void)?, onFailure: ((Object, Swift.Error) -> Void)?, onDisposed: ((Object) -> Void)?) -> Disposable","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/rxswift\/primitivesequence\/completableobserver","title":"PrimitiveSequence.CompletableObserver","type":"typealias"},{"path":"\/documentation\/rxswift\/primitivesequence\/maybeobserver","title":"PrimitiveSequence.MaybeObserver","type":"typealias"},{"path":"\/documentation\/rxswift\/primitivesequence\/singleobserver","title":"PrimitiveSequence.SingleObserver","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/primitivesequence\/create(subscribe:)-2qkn6","title":"static func create(subscribe: (SingleObserver) -> Disposable) -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/create(subscribe:)-4d6uy","title":"static func create(subscribe: (MaybeObserver) -> Disposable) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/create(subscribe:)-pvgu","title":"static func create(subscribe: (CompletableObserver) -> Disposable) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/empty()-4mwje","title":"static func empty() -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/empty()-inr5","title":"static func empty() -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/error(_:)-5214y","title":"static func error(Swift.Error) -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/error(_:)-5zont","title":"static func error(Swift.Error) -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/error(_:)-616yj","title":"static func error(Swift.Error) -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/just(_:)-2dr9s","title":"static func just(Element) -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/just(_:)-3wpaf","title":"static func just(Element) -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/just(_:scheduler:)-567p","title":"static func just(Element, scheduler: ImmediateSchedulerType) -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/just(_:scheduler:)-5cm0w","title":"static func just(Element, scheduler: ImmediateSchedulerType) -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/never()-4f6u","title":"static func never() -> Maybe<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/never()-6bw0y","title":"static func never() -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/never()-8t7os","title":"static func never() -> Single<Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/timer(_:scheduler:)","title":"static func timer(RxTimeInterval, scheduler: SchedulerType) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:)-1fa98","title":"static func zip(Completable...) -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:)-32gqc","title":"static func zip([Completable]) -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:)-49vl3","title":"static func zip<Collection>(Collection) -> PrimitiveSequence<Trait, [Element]>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:)-791wn","title":"static func zip<Collection>(Collection) -> Completable","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:)-5dfgx","title":"static func zip<E1, E2>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>) -> PrimitiveSequence<Trait, (E1, E2)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:)-9nc80","title":"static func zip<E1, E2>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>) -> PrimitiveSequence<Trait, (E1, E2)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:_:)-4af5e","title":"static func zip<E1, E2, E3>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>) -> PrimitiveSequence<Trait, (E1, E2, E3)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:_:)-5z1fl","title":"static func zip<E1, E2, E3>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>) -> PrimitiveSequence<Trait, (E1, E2, E3)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:_:_:)-3c3s","title":"static func zip<E1, E2, E3, E4>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>) -> PrimitiveSequence<Trait, (E1, E2, E3, E4)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:_:_:)-9u6kd","title":"static func zip<E1, E2, E3, E4>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>) -> PrimitiveSequence<Trait, (E1, E2, E3, E4)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:_:_:_:)-5j5j1","title":"static func zip<E1, E2, E3, E4, E5>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>) -> PrimitiveSequence<Trait, (E1, E2, E3, E4, E5)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:_:_:_:)-vequ","title":"static func zip<E1, E2, E3, E4, E5>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>) -> PrimitiveSequence<Trait, (E1, E2, E3, E4, E5)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:_:_:_:_:)-5jq5w","title":"static func zip<E1, E2, E3, E4, E5, E6>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, PrimitiveSequence<Trait, E6>) -> PrimitiveSequence<Trait, (E1, E2, E3, E4, E5, E6)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:_:_:_:_:)-5n9qb","title":"static func zip<E1, E2, E3, E4, E5, E6>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, PrimitiveSequence<Trait, E6>) -> PrimitiveSequence<Trait, (E1, E2, E3, E4, E5, E6)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:_:_:_:_:_:)-2kn4z","title":"static func zip<E1, E2, E3, E4, E5, E6, E7>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, PrimitiveSequence<Trait, E6>, PrimitiveSequence<Trait, E7>) -> PrimitiveSequence<Trait, (E1, E2, E3, E4, E5, E6, E7)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:_:_:_:_:_:)-336u6","title":"static func zip<E1, E2, E3, E4, E5, E6, E7>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, PrimitiveSequence<Trait, E6>, PrimitiveSequence<Trait, E7>) -> PrimitiveSequence<Trait, (E1, E2, E3, E4, E5, E6, E7)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:_:_:_:_:_:_:)-2sj7c","title":"static func zip<E1, E2, E3, E4, E5, E6, E7, E8>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, PrimitiveSequence<Trait, E6>, PrimitiveSequence<Trait, E7>, PrimitiveSequence<Trait, E8>) -> PrimitiveSequence<Trait, (E1, E2, E3, E4, E5, E6, E7, E8)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:_:_:_:_:_:_:)-7353r","title":"static func zip<E1, E2, E3, E4, E5, E6, E7, E8>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, PrimitiveSequence<Trait, E6>, PrimitiveSequence<Trait, E7>, PrimitiveSequence<Trait, E8>) -> PrimitiveSequence<Trait, (E1, E2, E3, E4, E5, E6, E7, E8)>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:_:_:_:_:_:_:resultselector:)-8ki1a","title":"static func zip<E1, E2, E3, E4, E5, E6, E7, E8>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, PrimitiveSequence<Trait, E6>, PrimitiveSequence<Trait, E7>, PrimitiveSequence<Trait, E8>, resultSelector: (E1, E2, E3, E4, E5, E6, E7, E8) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:_:_:_:_:_:_:resultselector:)-e2rx","title":"static func zip<E1, E2, E3, E4, E5, E6, E7, E8>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, PrimitiveSequence<Trait, E6>, PrimitiveSequence<Trait, E7>, PrimitiveSequence<Trait, E8>, resultSelector: (E1, E2, E3, E4, E5, E6, E7, E8) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:_:_:_:_:_:resultselector:)-8u18g","title":"static func zip<E1, E2, E3, E4, E5, E6, E7>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, PrimitiveSequence<Trait, E6>, PrimitiveSequence<Trait, E7>, resultSelector: (E1, E2, E3, E4, E5, E6, E7) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:_:_:_:_:_:resultselector:)-iime","title":"static func zip<E1, E2, E3, E4, E5, E6, E7>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, PrimitiveSequence<Trait, E6>, PrimitiveSequence<Trait, E7>, resultSelector: (E1, E2, E3, E4, E5, E6, E7) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:_:_:_:_:resultselector:)-4a8fn","title":"static func zip<E1, E2, E3, E4, E5, E6>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, PrimitiveSequence<Trait, E6>, resultSelector: (E1, E2, E3, E4, E5, E6) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:_:_:_:_:resultselector:)-9y4ux","title":"static func zip<E1, E2, E3, E4, E5, E6>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, PrimitiveSequence<Trait, E6>, resultSelector: (E1, E2, E3, E4, E5, E6) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:_:_:_:resultselector:)-54jly","title":"static func zip<E1, E2, E3, E4, E5>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, resultSelector: (E1, E2, E3, E4, E5) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:_:_:_:resultselector:)-6kg7n","title":"static func zip<E1, E2, E3, E4, E5>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, PrimitiveSequence<Trait, E5>, resultSelector: (E1, E2, E3, E4, E5) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:_:_:resultselector:)-3893r","title":"static func zip<E1, E2, E3, E4>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, resultSelector: (E1, E2, E3, E4) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:_:_:resultselector:)-75sfh","title":"static func zip<E1, E2, E3, E4>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, PrimitiveSequence<Trait, E4>, resultSelector: (E1, E2, E3, E4) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:_:resultselector:)-12peq","title":"static func zip<E1, E2, E3>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, resultSelector: (E1, E2, E3) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:_:resultselector:)-8mzzj","title":"static func zip<E1, E2, E3>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, PrimitiveSequence<Trait, E3>, resultSelector: (E1, E2, E3) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:resultselector:)-1g1os","title":"static func zip<E1, E2>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, resultSelector: (E1, E2) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:_:resultselector:)-4abqu","title":"static func zip<E1, E2>(PrimitiveSequence<Trait, E1>, PrimitiveSequence<Trait, E2>, resultSelector: (E1, E2) throws -> Element) -> PrimitiveSequence<Trait, Element>","type":"method"},{"path":"\/documentation\/rxswift\/primitivesequence\/zip(_:resultselector:)","title":"static func zip<Collection, Result>(Collection, resultSelector: ([Element]) throws -> Result) -> PrimitiveSequence<Trait, Result>","type":"method"}],"path":"\/documentation\/rxswift\/primitivesequence\/primitivesequencetype-implementations","title":"PrimitiveSequenceType Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/primitivesequence","title":"PrimitiveSequence","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rxswift\/reactive\/init(_:)","title":"init(Base)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/reactive\/base","title":"let base: Base","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/reactive\/request(_:callbackqueue:)","title":"func request(Base.Target, callbackQueue: DispatchQueue?) -> Single<Response>","type":"method"},{"path":"\/documentation\/rxswift\/reactive\/requestwithprogress(_:callbackqueue:)","title":"func requestWithProgress(Base.Target, callbackQueue: DispatchQueue?) -> Observable<ProgressResponse>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/rxswift\/reactive\/subscript(dynamicmember:)","title":"subscript<Property>(dynamicMember _: ReferenceWritableKeyPath<Base, Property>) -> Binder<Property>","type":"subscript"}],"path":"\/documentation\/rxswift\/reactive","title":"Reactive","type":"struct"},{"title":"Variables","type":"groupMarker"},{"path":"\/documentation\/rxswift\/maxtailrecursivesinkstacksize","title":"var maxTailRecursiveSinkStackSize: Int","type":"var"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/rxswift\/completable","title":"Completable","type":"typealias"},{"path":"\/documentation\/rxswift\/maybe","title":"Maybe","type":"typealias"},{"path":"\/documentation\/rxswift\/rxabstractinteger","title":"RxAbstractInteger","type":"typealias"},{"path":"\/documentation\/rxswift\/rxtime","title":"RxTime","type":"typealias"},{"path":"\/documentation\/rxswift\/rxtimeinterval","title":"RxTimeInterval","type":"typealias"},{"path":"\/documentation\/rxswift\/single","title":"Single","type":"typealias"},{"path":"\/documentation\/rxswift\/singleevent","title":"SingleEvent","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/rxswift\/completableevent\/completed","title":"case completed","type":"case"},{"path":"\/documentation\/rxswift\/completableevent\/error(_:)","title":"case error(Swift.Error)","type":"case"}],"path":"\/documentation\/rxswift\/completableevent","title":"CompletableEvent","type":"enum"},{"path":"\/documentation\/rxswift\/completabletrait","title":"CompletableTrait","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/rxswift\/event\/completed","title":"case completed","type":"case"},{"path":"\/documentation\/rxswift\/event\/error(_:)","title":"case error(Swift.Error)","type":"case"},{"path":"\/documentation\/rxswift\/event\/next(_:)","title":"case next(Element)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/event\/element","title":"var element: Element?","type":"property"},{"path":"\/documentation\/rxswift\/event\/error","title":"var error: Swift.Error?","type":"property"},{"path":"\/documentation\/rxswift\/event\/iscompleted","title":"var isCompleted: Bool","type":"property"},{"path":"\/documentation\/rxswift\/event\/isstopevent","title":"var isStopEvent: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rxswift\/event\/map(_:)","title":"func map<Result>((Element) throws -> Result) -> Event<Result>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/event\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/rxswift\/event\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/event\/event","title":"var event: Event<Element>","type":"property"}],"path":"\/documentation\/rxswift\/event\/eventconvertible-implementations","title":"EventConvertible Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/event","title":"Event","type":"enum"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/rxswift\/hooks\/customcapturesubscriptioncallstack-swift.typealias","title":"Hooks.CustomCaptureSubscriptionCallstack","type":"typealias"},{"path":"\/documentation\/rxswift\/hooks\/defaulterrorhandler-swift.typealias","title":"Hooks.DefaultErrorHandler","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/hooks\/customcapturesubscriptioncallstack-swift.type.property","title":"static var customCaptureSubscriptionCallstack: CustomCaptureSubscriptionCallstack","type":"property"},{"path":"\/documentation\/rxswift\/hooks\/defaulterrorhandler-swift.type.property","title":"static var defaultErrorHandler: DefaultErrorHandler","type":"property"},{"path":"\/documentation\/rxswift\/hooks\/recordcallstackonerror","title":"static var recordCallStackOnError: Bool","type":"property"}],"path":"\/documentation\/rxswift\/hooks","title":"Hooks","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/rxswift\/infallibleevent\/completed","title":"case completed","type":"case"},{"path":"\/documentation\/rxswift\/infallibleevent\/next(_:)","title":"case next(Element)","type":"case"}],"path":"\/documentation\/rxswift\/infallibleevent","title":"InfallibleEvent","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/rxswift\/maybeevent\/completed","title":"case completed","type":"case"},{"path":"\/documentation\/rxswift\/maybeevent\/error(_:)","title":"case error(Swift.Error)","type":"case"},{"path":"\/documentation\/rxswift\/maybeevent\/success(_:)","title":"case success(Element)","type":"case"}],"path":"\/documentation\/rxswift\/maybeevent","title":"MaybeEvent","type":"enum"},{"path":"\/documentation\/rxswift\/maybetrait","title":"MaybeTrait","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/rxswift\/rxerror\/argumentoutofrange","title":"case argumentOutOfRange","type":"case"},{"path":"\/documentation\/rxswift\/rxerror\/disposed(object:)","title":"case disposed(object: AnyObject)","type":"case"},{"path":"\/documentation\/rxswift\/rxerror\/morethanoneelement","title":"case moreThanOneElement","type":"case"},{"path":"\/documentation\/rxswift\/rxerror\/noelements","title":"case noElements","type":"case"},{"path":"\/documentation\/rxswift\/rxerror\/overflow","title":"case overflow","type":"case"},{"path":"\/documentation\/rxswift\/rxerror\/timeout","title":"case timeout","type":"case"},{"path":"\/documentation\/rxswift\/rxerror\/unknown","title":"case unknown","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/rxerror\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/rxswift\/rxerror\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rxswift\/rxerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/rxswift\/rxerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/rxerror","title":"RxError","type":"enum"},{"path":"\/documentation\/rxswift\/singletrait","title":"SingleTrait","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/rxswift\/subjectlifetimescope\/forever","title":"case forever","type":"case"},{"path":"\/documentation\/rxswift\/subjectlifetimescope\/whileconnected","title":"case whileConnected","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/rxswift\/subjectlifetimescope\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/rxswift\/subjectlifetimescope\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/subjectlifetimescope","title":"SubjectLifetimeScope","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/rxswift\/takebehavior\/exclusive","title":"case exclusive","type":"case"},{"path":"\/documentation\/rxswift\/takebehavior\/inclusive","title":"case inclusive","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/rxswift\/takebehavior\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/rxswift\/takebehavior\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/takebehavior","title":"TakeBehavior","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/rxswift\/virtualtimecomparison\/equal","title":"case equal","type":"case"},{"path":"\/documentation\/rxswift\/virtualtimecomparison\/greaterthan","title":"case greaterThan","type":"case"},{"path":"\/documentation\/rxswift\/virtualtimecomparison\/lessthan","title":"case lessThan","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/rxswift\/virtualtimecomparison\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/rxswift\/virtualtimecomparison\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/rxswift\/virtualtimecomparison","title":"VirtualTimeComparison","type":"enum"}],"path":"\/documentation\/rxswift","title":"RxSwift","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}